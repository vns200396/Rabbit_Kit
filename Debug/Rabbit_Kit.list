
Rabbit_Kit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da4  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08005ed8  08005ed8  00015ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062c0  080062c0  000205e4  2**0
                  CONTENTS
  4 .ARM          00000000  080062c0  080062c0  000205e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062c0  080062c0  000205e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062c0  080062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062c4  080062c4  000162c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e4  20000000  080062c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  200005e4  080068ac  000205e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  080068ac  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012634  00000000  00000000  0002060d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003362  00000000  00000000  00032c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e18  00000000  00000000  00035fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c60  00000000  00000000  00036dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000060f2  00000000  00000000  00037a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010422  00000000  00000000  0003db12  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087a87  00000000  00000000  0004df34  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d59bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004434  00000000  00000000  000d5a38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200005e4 	.word	0x200005e4
 800014c:	00000000 	.word	0x00000000
 8000150:	08005ebc 	.word	0x08005ebc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200005e8 	.word	0x200005e8
 800016c:	08005ebc 	.word	0x08005ebc

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_Init+0x28>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_Init+0x28>)
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 fb4f 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	200f      	movs	r0, #15
 8000ac0:	f000 f808 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac4:	f001 fd3c 	bl	8002540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40022000 	.word	0x40022000

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x54>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x58>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 fb59 	bl	80011aa <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00e      	b.n	8000b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d80a      	bhi.n	8000b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f000 fb2f 	bl	8001172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <HAL_InitTick+0x5c>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000040c 	.word	0x2000040c
 8000b2c:	20000004 	.word	0x20000004
 8000b30:	20000000 	.word	0x20000000

08000b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x1c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x20>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a03      	ldr	r2, [pc, #12]	; (8000b54 <HAL_IncTick+0x20>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	20000004 	.word	0x20000004
 8000b54:	2000062c 	.word	0x2000062c

08000b58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b02      	ldr	r3, [pc, #8]	; (8000b68 <HAL_GetTick+0x10>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	2000062c 	.word	0x2000062c

08000b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b74:	f7ff fff0 	bl	8000b58 <HAL_GetTick>
 8000b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b84:	d005      	beq.n	8000b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_Delay+0x40>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b92:	bf00      	nop
 8000b94:	f7ff ffe0 	bl	8000b58 <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d8f7      	bhi.n	8000b94 <HAL_Delay+0x28>
  {
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000004 	.word	0x20000004

08000bb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e0ce      	b.n	8000d70 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d109      	bne.n	8000bf4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f8c8 	bl	8000d84 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 f9c7 	bl	8000f88 <ADC_ConversionStop_Disable>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 80a9 	bne.w	8000d5e <HAL_ADC_Init+0x1ae>
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f040 80a5 	bne.w	8000d5e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c1c:	f023 0302 	bic.w	r3, r3, #2
 8000c20:	f043 0202 	orr.w	r2, r3, #2
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4951      	ldr	r1, [pc, #324]	; (8000d78 <HAL_ADC_Init+0x1c8>)
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d10a      	bne.n	8000c4c <HAL_ADC_Init+0x9c>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000c3e:	d002      	beq.n	8000c46 <HAL_ADC_Init+0x96>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	e004      	b.n	8000c50 <HAL_ADC_Init+0xa0>
 8000c46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c4a:	e001      	b.n	8000c50 <HAL_ADC_Init+0xa0>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7b1b      	ldrb	r3, [r3, #12]
 8000c56:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c58:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c68:	d003      	beq.n	8000c72 <HAL_ADC_Init+0xc2>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d102      	bne.n	8000c78 <HAL_ADC_Init+0xc8>
 8000c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c76:	e000      	b.n	8000c7a <HAL_ADC_Init+0xca>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7d1b      	ldrb	r3, [r3, #20]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d119      	bne.n	8000cbc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7b1b      	ldrb	r3, [r3, #12]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d109      	bne.n	8000ca4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	035a      	lsls	r2, r3, #13
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	e00b      	b.n	8000cbc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca8:	f043 0220 	orr.w	r2, r3, #32
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb4:	f043 0201 	orr.w	r2, r3, #1
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <HAL_ADC_Init+0x1cc>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cec:	d003      	beq.n	8000cf6 <HAL_ADC_Init+0x146>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d104      	bne.n	8000d00 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	051b      	lsls	r3, r3, #20
 8000cfe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d06:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	430a      	orrs	r2, r1
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_ADC_Init+0x1d0>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d10b      	bne.n	8000d3c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2e:	f023 0303 	bic.w	r3, r3, #3
 8000d32:	f043 0201 	orr.w	r2, r3, #1
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d3a:	e018      	b.n	8000d6e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d40:	f023 0312 	bic.w	r3, r3, #18
 8000d44:	f043 0210 	orr.w	r2, r3, #16
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d50:	f043 0201 	orr.w	r2, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d5c:	e007      	b.n	8000d6e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d62:	f043 0210 	orr.w	r2, r3, #16
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40013c00 	.word	0x40013c00
 8000d7c:	ffe1f7fd 	.word	0xffe1f7fd
 8000d80:	ff1f0efe 	.word	0xff1f0efe

08000d84 <HAL_ADC_MspInit>:
  * @brief  Initializes the ADC MSP.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
	...

08000d98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d101      	bne.n	8000db8 <HAL_ADC_ConfigChannel+0x20>
 8000db4:	2302      	movs	r3, #2
 8000db6:	e0dc      	b.n	8000f72 <HAL_ADC_ConfigChannel+0x1da>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b06      	cmp	r3, #6
 8000dc6:	d81c      	bhi.n	8000e02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3b05      	subs	r3, #5
 8000dda:	221f      	movs	r2, #31
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	4019      	ands	r1, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	3b05      	subs	r3, #5
 8000df4:	fa00 f203 	lsl.w	r2, r0, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	635a      	str	r2, [r3, #52]	; 0x34
 8000e00:	e03c      	b.n	8000e7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b0c      	cmp	r3, #12
 8000e08:	d81c      	bhi.n	8000e44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	4613      	mov	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	3b23      	subs	r3, #35	; 0x23
 8000e1c:	221f      	movs	r2, #31
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	4019      	ands	r1, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	3b23      	subs	r3, #35	; 0x23
 8000e36:	fa00 f203 	lsl.w	r2, r0, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	631a      	str	r2, [r3, #48]	; 0x30
 8000e42:	e01b      	b.n	8000e7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	3b41      	subs	r3, #65	; 0x41
 8000e56:	221f      	movs	r2, #31
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	4019      	ands	r1, r3
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	3b41      	subs	r3, #65	; 0x41
 8000e70:	fa00 f203 	lsl.w	r2, r0, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b09      	cmp	r3, #9
 8000e82:	d91c      	bls.n	8000ebe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	68d9      	ldr	r1, [r3, #12]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4413      	add	r3, r2
 8000e94:	3b1e      	subs	r3, #30
 8000e96:	2207      	movs	r2, #7
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	4019      	ands	r1, r3
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	6898      	ldr	r0, [r3, #8]
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	3b1e      	subs	r3, #30
 8000eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	e019      	b.n	8000ef2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6919      	ldr	r1, [r3, #16]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	2207      	movs	r2, #7
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	4019      	ands	r1, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	6898      	ldr	r0, [r3, #8]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b10      	cmp	r3, #16
 8000ef8:	d003      	beq.n	8000f02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000efe:	2b11      	cmp	r3, #17
 8000f00:	d132      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <HAL_ADC_ConfigChannel+0x1e4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d125      	bne.n	8000f58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d126      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f28:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b10      	cmp	r3, #16
 8000f30:	d11a      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f38:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3c:	0c9a      	lsrs	r2, r3, #18
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f48:	e002      	b.n	8000f50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f9      	bne.n	8000f4a <HAL_ADC_ConfigChannel+0x1b2>
 8000f56:	e007      	b.n	8000f68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	f043 0220 	orr.w	r2, r3, #32
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	40012400 	.word	0x40012400
 8000f80:	2000040c 	.word	0x2000040c
 8000f84:	431bde83 	.word	0x431bde83

08000f88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d127      	bne.n	8000ff2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fb2:	f7ff fdd1 	bl	8000b58 <HAL_GetTick>
 8000fb6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fb8:	e014      	b.n	8000fe4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fba:	f7ff fdcd 	bl	8000b58 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d90d      	bls.n	8000fe4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	f043 0210 	orr.w	r2, r3, #16
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd8:	f043 0201 	orr.w	r2, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e007      	b.n	8000ff4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d0e3      	beq.n	8000fba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001018:	4013      	ands	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <__NVIC_GetPriorityGrouping+0x18>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	f003 0307 	and.w	r3, r3, #7
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff90 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff49 	bl	8000ffc <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff5e 	bl	8001044 <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff90 	bl	80010b4 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5f 	bl	8001060 <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffb0 	bl	8001118 <SysTick_Config>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b08b      	sub	sp, #44	; 0x2c
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d6:	e133      	b.n	8001440 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011d8:	2201      	movs	r2, #1
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f040 8122 	bne.w	800143a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b12      	cmp	r3, #18
 80011fc:	d034      	beq.n	8001268 <HAL_GPIO_Init+0xa4>
 80011fe:	2b12      	cmp	r3, #18
 8001200:	d80d      	bhi.n	800121e <HAL_GPIO_Init+0x5a>
 8001202:	2b02      	cmp	r3, #2
 8001204:	d02b      	beq.n	800125e <HAL_GPIO_Init+0x9a>
 8001206:	2b02      	cmp	r3, #2
 8001208:	d804      	bhi.n	8001214 <HAL_GPIO_Init+0x50>
 800120a:	2b00      	cmp	r3, #0
 800120c:	d031      	beq.n	8001272 <HAL_GPIO_Init+0xae>
 800120e:	2b01      	cmp	r3, #1
 8001210:	d01c      	beq.n	800124c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001212:	e048      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001214:	2b03      	cmp	r3, #3
 8001216:	d043      	beq.n	80012a0 <HAL_GPIO_Init+0xdc>
 8001218:	2b11      	cmp	r3, #17
 800121a:	d01b      	beq.n	8001254 <HAL_GPIO_Init+0x90>
          break;
 800121c:	e043      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800121e:	4a8f      	ldr	r2, [pc, #572]	; (800145c <HAL_GPIO_Init+0x298>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d026      	beq.n	8001272 <HAL_GPIO_Init+0xae>
 8001224:	4a8d      	ldr	r2, [pc, #564]	; (800145c <HAL_GPIO_Init+0x298>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d806      	bhi.n	8001238 <HAL_GPIO_Init+0x74>
 800122a:	4a8d      	ldr	r2, [pc, #564]	; (8001460 <HAL_GPIO_Init+0x29c>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d020      	beq.n	8001272 <HAL_GPIO_Init+0xae>
 8001230:	4a8c      	ldr	r2, [pc, #560]	; (8001464 <HAL_GPIO_Init+0x2a0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d01d      	beq.n	8001272 <HAL_GPIO_Init+0xae>
          break;
 8001236:	e036      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001238:	4a8b      	ldr	r2, [pc, #556]	; (8001468 <HAL_GPIO_Init+0x2a4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d019      	beq.n	8001272 <HAL_GPIO_Init+0xae>
 800123e:	4a8b      	ldr	r2, [pc, #556]	; (800146c <HAL_GPIO_Init+0x2a8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d016      	beq.n	8001272 <HAL_GPIO_Init+0xae>
 8001244:	4a8a      	ldr	r2, [pc, #552]	; (8001470 <HAL_GPIO_Init+0x2ac>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0xae>
          break;
 800124a:	e02c      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	623b      	str	r3, [r7, #32]
          break;
 8001252:	e028      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	3304      	adds	r3, #4
 800125a:	623b      	str	r3, [r7, #32]
          break;
 800125c:	e023      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	3308      	adds	r3, #8
 8001264:	623b      	str	r3, [r7, #32]
          break;
 8001266:	e01e      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	330c      	adds	r3, #12
 800126e:	623b      	str	r3, [r7, #32]
          break;
 8001270:	e019      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800127a:	2304      	movs	r3, #4
 800127c:	623b      	str	r3, [r7, #32]
          break;
 800127e:	e012      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d105      	bne.n	8001294 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001288:	2308      	movs	r3, #8
 800128a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	611a      	str	r2, [r3, #16]
          break;
 8001292:	e008      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001294:	2308      	movs	r3, #8
 8001296:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	615a      	str	r2, [r3, #20]
          break;
 800129e:	e002      	b.n	80012a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
          break;
 80012a4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2bff      	cmp	r3, #255	; 0xff
 80012aa:	d801      	bhi.n	80012b0 <HAL_GPIO_Init+0xec>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	e001      	b.n	80012b4 <HAL_GPIO_Init+0xf0>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3304      	adds	r3, #4
 80012b4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2bff      	cmp	r3, #255	; 0xff
 80012ba:	d802      	bhi.n	80012c2 <HAL_GPIO_Init+0xfe>
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_Init+0x104>
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	3b08      	subs	r3, #8
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	210f      	movs	r1, #15
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	401a      	ands	r2, r3
 80012da:	6a39      	ldr	r1, [r7, #32]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	431a      	orrs	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80a2 	beq.w	800143a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012f6:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4a5e      	ldr	r2, [pc, #376]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6193      	str	r3, [r2, #24]
 8001302:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <HAL_GPIO_Init+0x2b0>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800130e:	4a5a      	ldr	r2, [pc, #360]	; (8001478 <HAL_GPIO_Init+0x2b4>)
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4013      	ands	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a51      	ldr	r2, [pc, #324]	; (800147c <HAL_GPIO_Init+0x2b8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d01f      	beq.n	800137a <HAL_GPIO_Init+0x1b6>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a50      	ldr	r2, [pc, #320]	; (8001480 <HAL_GPIO_Init+0x2bc>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d019      	beq.n	8001376 <HAL_GPIO_Init+0x1b2>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4f      	ldr	r2, [pc, #316]	; (8001484 <HAL_GPIO_Init+0x2c0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0x1ae>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4e      	ldr	r2, [pc, #312]	; (8001488 <HAL_GPIO_Init+0x2c4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00d      	beq.n	800136e <HAL_GPIO_Init+0x1aa>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4d      	ldr	r2, [pc, #308]	; (800148c <HAL_GPIO_Init+0x2c8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d007      	beq.n	800136a <HAL_GPIO_Init+0x1a6>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4c      	ldr	r2, [pc, #304]	; (8001490 <HAL_GPIO_Init+0x2cc>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_GPIO_Init+0x1a2>
 8001362:	2305      	movs	r3, #5
 8001364:	e00a      	b.n	800137c <HAL_GPIO_Init+0x1b8>
 8001366:	2306      	movs	r3, #6
 8001368:	e008      	b.n	800137c <HAL_GPIO_Init+0x1b8>
 800136a:	2304      	movs	r3, #4
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x1b8>
 800136e:	2303      	movs	r3, #3
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x1b8>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x1b8>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x1b8>
 800137a:	2300      	movs	r3, #0
 800137c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137e:	f002 0203 	and.w	r2, r2, #3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800138c:	493a      	ldr	r1, [pc, #232]	; (8001478 <HAL_GPIO_Init+0x2b4>)
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d006      	beq.n	80013b4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	493a      	ldr	r1, [pc, #232]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
 80013b2:	e006      	b.n	80013c2 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013b4:	4b37      	ldr	r3, [pc, #220]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	4935      	ldr	r1, [pc, #212]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 80013be:	4013      	ands	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d006      	beq.n	80013dc <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4930      	ldr	r1, [pc, #192]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
 80013da:	e006      	b.n	80013ea <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013dc:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	492b      	ldr	r1, [pc, #172]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013f6:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	4926      	ldr	r1, [pc, #152]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	608b      	str	r3, [r1, #8]
 8001402:	e006      	b.n	8001412 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001404:	4b23      	ldr	r3, [pc, #140]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	43db      	mvns	r3, r3
 800140c:	4921      	ldr	r1, [pc, #132]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 800140e:	4013      	ands	r3, r2
 8001410:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	491c      	ldr	r1, [pc, #112]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	60cb      	str	r3, [r1, #12]
 800142a:	e006      	b.n	800143a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	43db      	mvns	r3, r3
 8001434:	4917      	ldr	r1, [pc, #92]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 8001436:	4013      	ands	r3, r2
 8001438:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	3301      	adds	r3, #1
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	fa22 f303 	lsr.w	r3, r2, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	f47f aec4 	bne.w	80011d8 <HAL_GPIO_Init+0x14>
  }
}
 8001450:	bf00      	nop
 8001452:	372c      	adds	r7, #44	; 0x2c
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	10210000 	.word	0x10210000
 8001460:	10110000 	.word	0x10110000
 8001464:	10120000 	.word	0x10120000
 8001468:	10310000 	.word	0x10310000
 800146c:	10320000 	.word	0x10320000
 8001470:	10220000 	.word	0x10220000
 8001474:	40021000 	.word	0x40021000
 8001478:	40010000 	.word	0x40010000
 800147c:	40010800 	.word	0x40010800
 8001480:	40010c00 	.word	0x40010c00
 8001484:	40011000 	.word	0x40011000
 8001488:	40011400 	.word	0x40011400
 800148c:	40011800 	.word	0x40011800
 8001490:	40011c00 	.word	0x40011c00
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80014a6:	e0a6      	b.n	80015f6 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80014a8:	2201      	movs	r2, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 8099 	beq.w	80015f0 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80014be:	4a54      	ldr	r2, [pc, #336]	; (8001610 <HAL_GPIO_DeInit+0x178>)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3302      	adds	r3, #2
 80014c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ca:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	220f      	movs	r2, #15
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4013      	ands	r3, r2
 80014de:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <HAL_GPIO_DeInit+0x17c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d01f      	beq.n	8001528 <HAL_GPIO_DeInit+0x90>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a4b      	ldr	r2, [pc, #300]	; (8001618 <HAL_GPIO_DeInit+0x180>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d019      	beq.n	8001524 <HAL_GPIO_DeInit+0x8c>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a4a      	ldr	r2, [pc, #296]	; (800161c <HAL_GPIO_DeInit+0x184>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d013      	beq.n	8001520 <HAL_GPIO_DeInit+0x88>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a49      	ldr	r2, [pc, #292]	; (8001620 <HAL_GPIO_DeInit+0x188>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d00d      	beq.n	800151c <HAL_GPIO_DeInit+0x84>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a48      	ldr	r2, [pc, #288]	; (8001624 <HAL_GPIO_DeInit+0x18c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d007      	beq.n	8001518 <HAL_GPIO_DeInit+0x80>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a47      	ldr	r2, [pc, #284]	; (8001628 <HAL_GPIO_DeInit+0x190>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d101      	bne.n	8001514 <HAL_GPIO_DeInit+0x7c>
 8001510:	2305      	movs	r3, #5
 8001512:	e00a      	b.n	800152a <HAL_GPIO_DeInit+0x92>
 8001514:	2306      	movs	r3, #6
 8001516:	e008      	b.n	800152a <HAL_GPIO_DeInit+0x92>
 8001518:	2304      	movs	r3, #4
 800151a:	e006      	b.n	800152a <HAL_GPIO_DeInit+0x92>
 800151c:	2303      	movs	r3, #3
 800151e:	e004      	b.n	800152a <HAL_GPIO_DeInit+0x92>
 8001520:	2302      	movs	r3, #2
 8001522:	e002      	b.n	800152a <HAL_GPIO_DeInit+0x92>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <HAL_GPIO_DeInit+0x92>
 8001528:	2300      	movs	r3, #0
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	f002 0203 	and.w	r2, r2, #3
 8001530:	0092      	lsls	r2, r2, #2
 8001532:	4093      	lsls	r3, r2
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	429a      	cmp	r2, r3
 8001538:	d132      	bne.n	80015a0 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	220f      	movs	r2, #15
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800154a:	4a31      	ldr	r2, [pc, #196]	; (8001610 <HAL_GPIO_DeInit+0x178>)
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	43da      	mvns	r2, r3
 800155a:	482d      	ldr	r0, [pc, #180]	; (8001610 <HAL_GPIO_DeInit+0x178>)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	400a      	ands	r2, r1
 8001562:	3302      	adds	r3, #2
 8001564:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001568:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_GPIO_DeInit+0x194>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	43db      	mvns	r3, r3
 8001570:	492e      	ldr	r1, [pc, #184]	; (800162c <HAL_GPIO_DeInit+0x194>)
 8001572:	4013      	ands	r3, r2
 8001574:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_GPIO_DeInit+0x194>)
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	492b      	ldr	r1, [pc, #172]	; (800162c <HAL_GPIO_DeInit+0x194>)
 8001580:	4013      	ands	r3, r2
 8001582:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001584:	4b29      	ldr	r3, [pc, #164]	; (800162c <HAL_GPIO_DeInit+0x194>)
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	43db      	mvns	r3, r3
 800158c:	4927      	ldr	r1, [pc, #156]	; (800162c <HAL_GPIO_DeInit+0x194>)
 800158e:	4013      	ands	r3, r2
 8001590:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <HAL_GPIO_DeInit+0x194>)
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	43db      	mvns	r3, r3
 800159a:	4924      	ldr	r1, [pc, #144]	; (800162c <HAL_GPIO_DeInit+0x194>)
 800159c:	4013      	ands	r3, r2
 800159e:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2bff      	cmp	r3, #255	; 0xff
 80015a4:	d801      	bhi.n	80015aa <HAL_GPIO_DeInit+0x112>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	e001      	b.n	80015ae <HAL_GPIO_DeInit+0x116>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3304      	adds	r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2bff      	cmp	r3, #255	; 0xff
 80015b4:	d802      	bhi.n	80015bc <HAL_GPIO_DeInit+0x124>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	e002      	b.n	80015c2 <HAL_GPIO_DeInit+0x12a>
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	3b08      	subs	r3, #8
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	210f      	movs	r1, #15
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	401a      	ands	r2, r3
 80015d4:	2104      	movs	r1, #4
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	431a      	orrs	r2, r3
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	401a      	ands	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	60da      	str	r2, [r3, #12]
    }

    position++;
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	3301      	adds	r3, #1
 80015f4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	fa22 f303 	lsr.w	r3, r2, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f47f af52 	bne.w	80014a8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001604:	bf00      	nop
 8001606:	3724      	adds	r7, #36	; 0x24
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40010000 	.word	0x40010000
 8001614:	40010800 	.word	0x40010800
 8001618:	40010c00 	.word	0x40010c00
 800161c:	40011000 	.word	0x40011000
 8001620:	40011400 	.word	0x40011400
 8001624:	40011800 	.word	0x40011800
 8001628:	40011c00 	.word	0x40011c00
 800162c:	40010400 	.word	0x40010400

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	611a      	str	r2, [r3, #16]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	4013      	ands	r3, r2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 ff38 	bl	80024f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40010400 	.word	0x40010400

08001690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e26c      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8087 	beq.w	80017be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b0:	4b92      	ldr	r3, [pc, #584]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d00c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016bc:	4b8f      	ldr	r3, [pc, #572]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d112      	bne.n	80016ee <HAL_RCC_OscConfig+0x5e>
 80016c8:	4b8c      	ldr	r3, [pc, #560]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d4:	d10b      	bne.n	80016ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d6:	4b89      	ldr	r3, [pc, #548]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d06c      	beq.n	80017bc <HAL_RCC_OscConfig+0x12c>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d168      	bne.n	80017bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e246      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x76>
 80016f8:	4b80      	ldr	r3, [pc, #512]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a7f      	ldr	r2, [pc, #508]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	e02e      	b.n	8001764 <HAL_RCC_OscConfig+0xd4>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x98>
 800170e:	4b7b      	ldr	r3, [pc, #492]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7a      	ldr	r2, [pc, #488]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b78      	ldr	r3, [pc, #480]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a77      	ldr	r2, [pc, #476]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e01d      	b.n	8001764 <HAL_RCC_OscConfig+0xd4>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0xbc>
 8001732:	4b72      	ldr	r3, [pc, #456]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a71      	ldr	r2, [pc, #452]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b6f      	ldr	r3, [pc, #444]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6e      	ldr	r2, [pc, #440]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0xd4>
 800174c:	4b6b      	ldr	r3, [pc, #428]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a6a      	ldr	r2, [pc, #424]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a67      	ldr	r2, [pc, #412]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff f9f4 	bl	8000b58 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff f9f0 	bl	8000b58 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e1fa      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0xe4>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff f9e0 	bl	8000b58 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff f9dc 	bl	8000b58 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1e6      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x10c>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d063      	beq.n	8001892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ca:	4b4c      	ldr	r3, [pc, #304]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017d6:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d11c      	bne.n	800181c <HAL_RCC_OscConfig+0x18c>
 80017e2:	4b46      	ldr	r3, [pc, #280]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d116      	bne.n	800181c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ee:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d005      	beq.n	8001806 <HAL_RCC_OscConfig+0x176>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d001      	beq.n	8001806 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e1ba      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4939      	ldr	r1, [pc, #228]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	e03a      	b.n	8001892 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff f995 	bl	8000b58 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001832:	f7ff f991 	bl	8000b58 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e19b      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4927      	ldr	r1, [pc, #156]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
 8001864:	e015      	b.n	8001892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff f974 	bl	8000b58 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001874:	f7ff f970 	bl	8000b58 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e17a      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d03a      	beq.n	8001914 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d019      	beq.n	80018da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_RCC_OscConfig+0x274>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ac:	f7ff f954 	bl	8000b58 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff f950 	bl	8000b58 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e15a      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f000 fada 	bl	8001e8c <RCC_Delay>
 80018d8:	e01c      	b.n	8001914 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_RCC_OscConfig+0x274>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e0:	f7ff f93a 	bl	8000b58 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e6:	e00f      	b.n	8001908 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e8:	f7ff f936 	bl	8000b58 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d908      	bls.n	8001908 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e140      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	42420000 	.word	0x42420000
 8001904:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001908:	4b9e      	ldr	r3, [pc, #632]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e9      	bne.n	80018e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80a6 	beq.w	8001a6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001926:	4b97      	ldr	r3, [pc, #604]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10d      	bne.n	800194e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4b94      	ldr	r3, [pc, #592]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a93      	ldr	r2, [pc, #588]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	61d3      	str	r3, [r2, #28]
 800193e:	4b91      	ldr	r3, [pc, #580]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194a:	2301      	movs	r3, #1
 800194c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194e:	4b8e      	ldr	r3, [pc, #568]	; (8001b88 <HAL_RCC_OscConfig+0x4f8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d118      	bne.n	800198c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195a:	4b8b      	ldr	r3, [pc, #556]	; (8001b88 <HAL_RCC_OscConfig+0x4f8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a8a      	ldr	r2, [pc, #552]	; (8001b88 <HAL_RCC_OscConfig+0x4f8>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001966:	f7ff f8f7 	bl	8000b58 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196e:	f7ff f8f3 	bl	8000b58 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b64      	cmp	r3, #100	; 0x64
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e0fd      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001980:	4b81      	ldr	r3, [pc, #516]	; (8001b88 <HAL_RCC_OscConfig+0x4f8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d106      	bne.n	80019a2 <HAL_RCC_OscConfig+0x312>
 8001994:	4b7b      	ldr	r3, [pc, #492]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a7a      	ldr	r2, [pc, #488]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	e02d      	b.n	80019fe <HAL_RCC_OscConfig+0x36e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x334>
 80019aa:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a75      	ldr	r2, [pc, #468]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	4a72      	ldr	r2, [pc, #456]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	f023 0304 	bic.w	r3, r3, #4
 80019c0:	6213      	str	r3, [r2, #32]
 80019c2:	e01c      	b.n	80019fe <HAL_RCC_OscConfig+0x36e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b05      	cmp	r3, #5
 80019ca:	d10c      	bne.n	80019e6 <HAL_RCC_OscConfig+0x356>
 80019cc:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a6c      	ldr	r2, [pc, #432]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4a69      	ldr	r2, [pc, #420]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6213      	str	r3, [r2, #32]
 80019e4:	e00b      	b.n	80019fe <HAL_RCC_OscConfig+0x36e>
 80019e6:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a66      	ldr	r2, [pc, #408]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6213      	str	r3, [r2, #32]
 80019f2:	4b64      	ldr	r3, [pc, #400]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4a63      	ldr	r2, [pc, #396]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d015      	beq.n	8001a32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff f8a7 	bl	8000b58 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7ff f8a3 	bl	8000b58 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0ab      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a24:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0ee      	beq.n	8001a0e <HAL_RCC_OscConfig+0x37e>
 8001a30:	e014      	b.n	8001a5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7ff f891 	bl	8000b58 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff f88d 	bl	8000b58 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e095      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a50:	4b4c      	ldr	r3, [pc, #304]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1ee      	bne.n	8001a3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d105      	bne.n	8001a6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a62:	4b48      	ldr	r3, [pc, #288]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a47      	ldr	r2, [pc, #284]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8081 	beq.w	8001b7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a78:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d061      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d146      	bne.n	8001b1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8c:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <HAL_RCC_OscConfig+0x4fc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff f861 	bl	8000b58 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff f85d 	bl	8000b58 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e067      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aac:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f0      	bne.n	8001a9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac0:	d108      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ac2:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	492d      	ldr	r1, [pc, #180]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a19      	ldr	r1, [r3, #32]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	4927      	ldr	r1, [pc, #156]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_RCC_OscConfig+0x4fc>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7ff f831 	bl	8000b58 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afa:	f7ff f82d 	bl	8000b58 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e037      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x46a>
 8001b18:	e02f      	b.n	8001b7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_RCC_OscConfig+0x4fc>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff f81a 	bl	8000b58 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff f816 	bl	8000b58 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e020      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x498>
 8001b46:	e018      	b.n	8001b7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e013      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	42420060 	.word	0x42420060

08001b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0d0      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d910      	bls.n	8001bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 0207 	bic.w	r2, r3, #7
 8001bba:	4965      	ldr	r1, [pc, #404]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b63      	ldr	r3, [pc, #396]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0b8      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d020      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bec:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4a58      	ldr	r2, [pc, #352]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c04:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a52      	ldr	r2, [pc, #328]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c10:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	494d      	ldr	r1, [pc, #308]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d040      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d115      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e07f      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4e:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e073      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5e:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e06b      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6e:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f023 0203 	bic.w	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4936      	ldr	r1, [pc, #216]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c80:	f7fe ff6a 	bl	8000b58 <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c88:	f7fe ff66 	bl	8000b58 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e053      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 020c 	and.w	r2, r3, #12
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1eb      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d210      	bcs.n	8001ce0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 0207 	bic.w	r2, r3, #7
 8001cc6:	4922      	ldr	r1, [pc, #136]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e032      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4916      	ldr	r1, [pc, #88]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d009      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	490e      	ldr	r1, [pc, #56]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d1e:	f000 f821 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d22:	4601      	mov	r1, r0
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <HAL_RCC_ClockConfig+0x1c8>)
 8001d30:	5cd3      	ldrb	r3, [r2, r3]
 8001d32:	fa21 f303 	lsr.w	r3, r1, r3
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x1cc>)
 8001d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1d0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fec8 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08005fe4 	.word	0x08005fe4
 8001d5c:	2000040c 	.word	0x2000040c
 8001d60:	20000000 	.word	0x20000000

08001d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b490      	push	{r4, r7}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d6c:	1d3c      	adds	r4, r7, #4
 8001d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d74:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d002      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x40>
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d003      	beq.n	8001daa <HAL_RCC_GetSysClockFreq+0x46>
 8001da2:	e02d      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001da4:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001da6:	623b      	str	r3, [r7, #32]
      break;
 8001da8:	e02d      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	0c9b      	lsrs	r3, r3, #18
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001db6:	4413      	add	r3, r2
 8001db8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dbc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	0c5b      	lsrs	r3, r3, #17
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ddc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001de2:	fb02 f203 	mul.w	r2, r2, r3
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
 8001dee:	e004      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	623b      	str	r3, [r7, #32]
      break;
 8001dfe:	e002      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e02:	623b      	str	r3, [r7, #32]
      break;
 8001e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e06:	6a3b      	ldr	r3, [r7, #32]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3728      	adds	r7, #40	; 0x28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc90      	pop	{r4, r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	08005ed8 	.word	0x08005ed8
 8001e18:	08005ee8 	.word	0x08005ee8
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	007a1200 	.word	0x007a1200
 8001e24:	003d0900 	.word	0x003d0900

08001e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e2c:	4b02      	ldr	r3, [pc, #8]	; (8001e38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	2000040c 	.word	0x2000040c

08001e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e40:	f7ff fff2 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e44:	4601      	mov	r1, r0
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	4a03      	ldr	r2, [pc, #12]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	08005ff4 	.word	0x08005ff4

08001e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e68:	f7ff ffde 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4601      	mov	r1, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	0adb      	lsrs	r3, r3, #11
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4a03      	ldr	r2, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e7a:	5cd3      	ldrb	r3, [r2, r3]
 8001e7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08005ff4 	.word	0x08005ff4

08001e8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <RCC_Delay+0x34>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <RCC_Delay+0x38>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0a5b      	lsrs	r3, r3, #9
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ea8:	bf00      	nop
  }
  while (Delay --);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1e5a      	subs	r2, r3, #1
 8001eae:	60fa      	str	r2, [r7, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f9      	bne.n	8001ea8 <RCC_Delay+0x1c>
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	2000040c 	.word	0x2000040c
 8001ec4:	10624dd3 	.word	0x10624dd3

08001ec8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e03f      	b.n	8001f6c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d106      	bne.n	8001f06 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f837 	bl	8001f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2224      	movs	r2, #36	; 0x24
 8001f0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f1c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f914 	bl	800214c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f42:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f52:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b088      	sub	sp, #32
 8001f8a:	af02      	add	r7, sp, #8
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	f040 8083 	bne.w	80020ae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_UART_Transmit+0x2e>
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e07b      	b.n	80020b0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_UART_Transmit+0x40>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e074      	b.n	80020b0 <HAL_UART_Transmit+0x12a>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2221      	movs	r2, #33	; 0x21
 8001fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fdc:	f7fe fdbc 	bl	8000b58 <HAL_GetTick>
 8001fe0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	88fa      	ldrh	r2, [r7, #6]
 8001fe6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	88fa      	ldrh	r2, [r7, #6]
 8001fec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fee:	e042      	b.n	8002076 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002006:	d122      	bne.n	800204e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2200      	movs	r2, #0
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f850 	bl	80020b8 <UART_WaitOnFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e046      	b.n	80020b0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002034:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d103      	bne.n	8002046 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	3302      	adds	r3, #2
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	e017      	b.n	8002076 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	3301      	adds	r3, #1
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	e013      	b.n	8002076 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2200      	movs	r2, #0
 8002056:	2180      	movs	r1, #128	; 0x80
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f82d 	bl	80020b8 <UART_WaitOnFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e023      	b.n	80020b0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	60ba      	str	r2, [r7, #8]
 800206e:	781a      	ldrb	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1b7      	bne.n	8001ff0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2200      	movs	r2, #0
 8002088:	2140      	movs	r1, #64	; 0x40
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f814 	bl	80020b8 <UART_WaitOnFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e00a      	b.n	80020b0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80020ae:	2302      	movs	r3, #2
  }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020c8:	e02c      	b.n	8002124 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d028      	beq.n	8002124 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80020d8:	f7fe fd3e 	bl	8000b58 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d21d      	bcs.n	8002124 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e00f      	b.n	8002144 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	4013      	ands	r3, r2
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	429a      	cmp	r2, r3
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	429a      	cmp	r2, r3
 8002140:	d0c3      	beq.n	80020ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	4313      	orrs	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002186:	f023 030c 	bic.w	r3, r3, #12
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	68f9      	ldr	r1, [r7, #12]
 8002190:	430b      	orrs	r3, r1
 8002192:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a52      	ldr	r2, [pc, #328]	; (80022f8 <UART_SetConfig+0x1ac>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d14e      	bne.n	8002252 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021b4:	f7ff fe56 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 80021b8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009a      	lsls	r2, r3, #2
 80021c4:	441a      	add	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	4a4a      	ldr	r2, [pc, #296]	; (80022fc <UART_SetConfig+0x1b0>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	0119      	lsls	r1, r3, #4
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	009a      	lsls	r2, r3, #2
 80021e4:	441a      	add	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f0:	4b42      	ldr	r3, [pc, #264]	; (80022fc <UART_SetConfig+0x1b0>)
 80021f2:	fba3 0302 	umull	r0, r3, r3, r2
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2064      	movs	r0, #100	; 0x64
 80021fa:	fb00 f303 	mul.w	r3, r0, r3
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	3332      	adds	r3, #50	; 0x32
 8002204:	4a3d      	ldr	r2, [pc, #244]	; (80022fc <UART_SetConfig+0x1b0>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002210:	4419      	add	r1, r3
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	009a      	lsls	r2, r3, #2
 800221c:	441a      	add	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	fbb2 f2f3 	udiv	r2, r2, r3
 8002228:	4b34      	ldr	r3, [pc, #208]	; (80022fc <UART_SetConfig+0x1b0>)
 800222a:	fba3 0302 	umull	r0, r3, r3, r2
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2064      	movs	r0, #100	; 0x64
 8002232:	fb00 f303 	mul.w	r3, r0, r3
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	3332      	adds	r3, #50	; 0x32
 800223c:	4a2f      	ldr	r2, [pc, #188]	; (80022fc <UART_SetConfig+0x1b0>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	f003 020f 	and.w	r2, r3, #15
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	440a      	add	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002250:	e04d      	b.n	80022ee <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002252:	f7ff fdf3 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8002256:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	009a      	lsls	r2, r3, #2
 8002262:	441a      	add	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4a23      	ldr	r2, [pc, #140]	; (80022fc <UART_SetConfig+0x1b0>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	0119      	lsls	r1, r3, #4
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	009a      	lsls	r2, r3, #2
 8002282:	441a      	add	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	fbb2 f2f3 	udiv	r2, r2, r3
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <UART_SetConfig+0x1b0>)
 8002290:	fba3 0302 	umull	r0, r3, r3, r2
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	2064      	movs	r0, #100	; 0x64
 8002298:	fb00 f303 	mul.w	r3, r0, r3
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	3332      	adds	r3, #50	; 0x32
 80022a2:	4a16      	ldr	r2, [pc, #88]	; (80022fc <UART_SetConfig+0x1b0>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ae:	4419      	add	r1, r3
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	009a      	lsls	r2, r3, #2
 80022ba:	441a      	add	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <UART_SetConfig+0x1b0>)
 80022c8:	fba3 0302 	umull	r0, r3, r3, r2
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	2064      	movs	r0, #100	; 0x64
 80022d0:	fb00 f303 	mul.w	r3, r0, r3
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	3332      	adds	r3, #50	; 0x32
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <UART_SetConfig+0x1b0>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	f003 020f 	and.w	r2, r3, #15
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	440a      	add	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40013800 	.word	0x40013800
 80022fc:	51eb851f 	.word	0x51eb851f

08002300 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <DWT_Delay_Init+0x58>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4a13      	ldr	r2, [pc, #76]	; (8002358 <DWT_Delay_Init+0x58>)
 800230a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800230e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <DWT_Delay_Init+0x58>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a10      	ldr	r2, [pc, #64]	; (8002358 <DWT_Delay_Init+0x58>)
 8002316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <DWT_Delay_Init+0x5c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0e      	ldr	r2, [pc, #56]	; (800235c <DWT_Delay_Init+0x5c>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <DWT_Delay_Init+0x5c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0b      	ldr	r2, [pc, #44]	; (800235c <DWT_Delay_Init+0x5c>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <DWT_Delay_Init+0x5c>)
 8002336:	2200      	movs	r2, #0
 8002338:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800233a:	bf00      	nop
     __ASM volatile ("NOP");
 800233c:	bf00      	nop
  __ASM volatile ("NOP");
 800233e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <DWT_Delay_Init+0x5c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8002348:	2300      	movs	r3, #0
 800234a:	e000      	b.n	800234e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800234c:	2301      	movs	r3, #1
  }
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000edf0 	.word	0xe000edf0
 800235c:	e0001000 	.word	0xe0001000

08002360 <main>:
uint32_t a = 3906;
uint32_t b;
uint32_t c;

int main(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af02      	add	r7, sp, #8
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002366:	f7fe fb9f 	bl	8000aa8 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800236a:	f000 f86f 	bl	800244c <SystemClock_Config>
	led_init();
 800236e:	f000 fd45 	bl	8002dfc <led_init>
	key_init();
 8002372:	f000 fcf9 	bl	8002d68 <key_init>
	relay_init();
 8002376:	f001 f983 	bl	8003680 <relay_init>
	debug_config(115200, UART_STOPBITS_1, UART_PARITY_NONE, UART_HWCONTROL_NONE);
 800237a:	2300      	movs	r3, #0
 800237c:	2200      	movs	r2, #0
 800237e:	2100      	movs	r1, #0
 8002380:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8002384:	f000 faa6 	bl	80028d4 <debug_config>

	while(DWT_Delay_Init())
 8002388:	e006      	b.n	8002398 <main+0x38>
	{
		printf("[DWT Init]: Error   \r\n");
 800238a:	4827      	ldr	r0, [pc, #156]	; (8002428 <main+0xc8>)
 800238c:	f001 fed2 	bl	8004134 <puts>
		HAL_Delay(500);
 8002390:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002394:	f7fe fbea 	bl	8000b6c <HAL_Delay>
	while(DWT_Delay_Init())
 8002398:	f7ff ffb2 	bl	8002300 <DWT_Delay_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f3      	bne.n	800238a <main+0x2a>
	}
	printf("[DWT Init]: Success   \r\n");
 80023a2:	4822      	ldr	r0, [pc, #136]	; (800242c <main+0xcc>)
 80023a4:	f001 fec6 	bl	8004134 <puts>

	infrared_reflective_init();
 80023a8:	f000 fc9c 	bl	8002ce4 <infrared_reflective_init>
	infrared_init();
 80023ac:	f000 fc58 	bl	8002c60 <infrared_init>
	buzzer_init();
 80023b0:	f000 fb5c 	bl	8002a6c <buzzer_init>
	adc_init();
 80023b4:	f000 fa22 	bl	80027fc <adc_init>
	my9291_led_rbg_init(4);
 80023b8:	2004      	movs	r0, #4
 80023ba:	f000 fef1 	bl	80031a0 <my9291_led_rbg_init>
	iic_init();
 80023be:	f000 ff87 	bl	80032d0 <iic_init>
	while(DHT11_Init())
 80023c2:	e006      	b.n	80023d2 <main+0x72>
	{
		printf("[DHT11 Init]: Error   \r\n");
 80023c4:	481a      	ldr	r0, [pc, #104]	; (8002430 <main+0xd0>)
 80023c6:	f001 feb5 	bl	8004134 <puts>
		HAL_Delay(500);
 80023ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023ce:	f7fe fbcd 	bl	8000b6c <HAL_Delay>
	while(DHT11_Init())
 80023d2:	f000 fb9f 	bl	8002b14 <DHT11_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f3      	bne.n	80023c4 <main+0x64>
	}
	printf("[DHT11 Init]: Success   \r\n");
 80023dc:	4815      	ldr	r0, [pc, #84]	; (8002434 <main+0xd4>)
 80023de:	f001 fea9 	bl	8004134 <puts>
	oled_init();
 80023e2:	f001 f863 	bl	80034ac <oled_init>
	oled_clscr();
 80023e6:	f001 f8da 	bl	800359e <oled_clscr>
	oled_DrawBMP(0,0,128,8, (uint8_t *) pornhub_bits);
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <main+0xd8>)
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2308      	movs	r3, #8
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	2100      	movs	r1, #0
 80023f4:	2000      	movs	r0, #0
 80023f6:	f001 f8fb 	bl	80035f0 <oled_DrawBMP>
	b = a/100;
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <main+0xdc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a10      	ldr	r2, [pc, #64]	; (8002440 <main+0xe0>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <main+0xe4>)
 8002408:	6013      	str	r3, [r2, #0]
	c = 16*(a%100);
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <main+0xdc>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <main+0xe0>)
 8002410:	fba3 1302 	umull	r1, r3, r3, r2
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	2164      	movs	r1, #100	; 0x64
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4a09      	ldr	r2, [pc, #36]	; (8002448 <main+0xe8>)
 8002422:	6013      	str	r3, [r2, #0]
    /* Loop forever */
	while(1)
 8002424:	e7fe      	b.n	8002424 <main+0xc4>
 8002426:	bf00      	nop
 8002428:	08005eec 	.word	0x08005eec
 800242c:	08005f04 	.word	0x08005f04
 8002430:	08005f1c 	.word	0x08005f1c
 8002434:	08005f34 	.word	0x08005f34
 8002438:	20000008 	.word	0x20000008
 800243c:	20000408 	.word	0x20000408
 8002440:	51eb851f 	.word	0x51eb851f
 8002444:	20000630 	.word	0x20000630
 8002448:	20000634 	.word	0x20000634

0800244c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b090      	sub	sp, #64	; 0x40
 8002450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002452:	f107 0318 	add.w	r3, r7, #24
 8002456:	2228      	movs	r2, #40	; 0x28
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f001 f99e 	bl	800379c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
 800246c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOD_CLK_ENABLE();
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <SystemClock_Config+0xa4>)
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <SystemClock_Config+0xa4>)
 8002474:	f043 0320 	orr.w	r3, r3, #32
 8002478:	6193      	str	r3, [r2, #24]
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <SystemClock_Config+0xa4>)
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002486:	2301      	movs	r3, #1
 8002488:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800248a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800248e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002494:	2301      	movs	r3, #1
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002498:	2302      	movs	r3, #2
 800249a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800249c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80024a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a8:	f107 0318 	add.w	r3, r7, #24
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff f8ef 	bl	8001690 <HAL_RCC_OscConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <SystemClock_Config+0x70>
  {
    Error_Handler();
 80024b8:	f000 f93c 	bl	8002734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024bc:	230f      	movs	r3, #15
 80024be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c0:	2302      	movs	r3, #2
 80024c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	2102      	movs	r1, #2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fb5a 	bl	8001b90 <HAL_RCC_ClockConfig>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80024e2:	f000 f927 	bl	8002734 <Error_Handler>
  }
}
 80024e6:	bf00      	nop
 80024e8:	3740      	adds	r7, #64	; 0x40
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_1)
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d102      	bne.n	800250a <HAL_GPIO_EXTI_Callback+0x16>
  {
	  infrared_reflective_callback();
 8002504:	f000 fc14 	bl	8002d30 <infrared_reflective_callback>
  }
  else if (GPIO_Pin == GPIO_PIN_4)
  {
	  infrared_callback();
  }
}
 8002508:	e004      	b.n	8002514 <HAL_GPIO_EXTI_Callback+0x20>
  else if (GPIO_Pin == GPIO_PIN_4)
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	2b10      	cmp	r3, #16
 800250e:	d101      	bne.n	8002514 <HAL_GPIO_EXTI_Callback+0x20>
	  infrared_callback();
 8002510:	f000 fbcc 	bl	8002cac <infrared_callback>
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&DebugHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8002524:	1d39      	adds	r1, r7, #4
 8002526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800252a:	2201      	movs	r2, #1
 800252c:	4803      	ldr	r0, [pc, #12]	; (800253c <__io_putchar+0x20>)
 800252e:	f7ff fd2a 	bl	8001f86 <HAL_UART_Transmit>

  return ch;
 8002532:	687b      	ldr	r3, [r7, #4]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000668 	.word	0x20000668

08002540 <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
	__HAL_RCC_AFIO_CLK_ENABLE();
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_MspInit+0x40>)
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	4a0d      	ldr	r2, [pc, #52]	; (8002580 <HAL_MspInit+0x40>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6193      	str	r3, [r2, #24]
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_MspInit+0x40>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_MspInit+0x40>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_MspInit+0x40>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002568:	61d3      	str	r3, [r2, #28]
 800256a:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_MspInit+0x40>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	683b      	ldr	r3, [r7, #0]

}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	40021000 	.word	0x40021000

08002584 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002594:	e7fe      	b.n	8002594 <HardFault_Handler+0x4>

08002596 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800259a:	e7fe      	b.n	800259a <MemManage_Handler+0x4>

0800259c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <BusFault_Handler+0x4>

080025a2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80025a6:	e7fe      	b.n	80025a6 <UsageFault_Handler+0x4>

080025a8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80025d0:	f7fe fab0 	bl	8000b34 <HAL_IncTick>
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <EXTI1_IRQHandler>:
  * @brief  This function handles external line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80025dc:	2002      	movs	r0, #2
 80025de:	f7ff f83f 	bl	8001660 <HAL_GPIO_EXTI_IRQHandler>
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <EXTI4_IRQHandler>:
  * @brief  This function handles external line 4 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80025ea:	2010      	movs	r0, #16
 80025ec:	f7ff f838 	bl	8001660 <HAL_GPIO_EXTI_IRQHandler>
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	e00a      	b.n	800261c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002606:	f3af 8000 	nop.w
 800260a:	4601      	mov	r1, r0
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	60ba      	str	r2, [r7, #8]
 8002612:	b2ca      	uxtb	r2, r1
 8002614:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3301      	adds	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	429a      	cmp	r2, r3
 8002622:	dbf0      	blt.n	8002606 <_read+0x12>
	}

return len;
 8002624:	687b      	ldr	r3, [r7, #4]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e009      	b.n	8002654 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	60ba      	str	r2, [r7, #8]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff67 	bl	800251c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3301      	adds	r3, #1
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	429a      	cmp	r2, r3
 800265a:	dbf1      	blt.n	8002640 <_write+0x12>
	}
	return len;
 800265c:	687b      	ldr	r3, [r7, #4]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <_close>:

int _close(int file)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
	return -1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800268c:	605a      	str	r2, [r3, #4]
	return 0;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <_isatty>:

int _isatty(int file)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
	return 1;
 80026a2:	2301      	movs	r3, #1
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
	return 0;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
	...

080026c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <_sbrk+0x5c>)
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <_sbrk+0x60>)
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <_sbrk+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <_sbrk+0x64>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <_sbrk+0x68>)
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d207      	bcs.n	8002708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f8:	f001 f826 	bl	8003748 <__errno>
 80026fc:	4602      	mov	r2, r0
 80026fe:	230c      	movs	r3, #12
 8002700:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	e009      	b.n	800271c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	4a05      	ldr	r2, [pc, #20]	; (800272c <_sbrk+0x64>)
 8002718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271a:	68fb      	ldr	r3, [r7, #12]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20010000 	.word	0x20010000
 8002728:	00000400 	.word	0x00000400
 800272c:	20000600 	.word	0x20000600
 8002730:	200006f0 	.word	0x200006f0

08002734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002744:	4b15      	ldr	r3, [pc, #84]	; (800279c <SystemInit+0x5c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a14      	ldr	r2, [pc, #80]	; (800279c <SystemInit+0x5c>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <SystemInit+0x5c>)
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	4911      	ldr	r1, [pc, #68]	; (800279c <SystemInit+0x5c>)
 8002756:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <SystemInit+0x60>)
 8002758:	4013      	ands	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <SystemInit+0x5c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <SystemInit+0x5c>)
 8002762:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <SystemInit+0x5c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <SystemInit+0x5c>)
 8002772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <SystemInit+0x5c>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a07      	ldr	r2, [pc, #28]	; (800279c <SystemInit+0x5c>)
 800277e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002782:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <SystemInit+0x5c>)
 8002786:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800278a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <SystemInit+0x64>)
 800278e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002792:	609a      	str	r2, [r3, #8]
#endif 
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	40021000 	.word	0x40021000
 80027a0:	f8ff0000 	.word	0xf8ff0000
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027a8:	480d      	ldr	r0, [pc, #52]	; (80027e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027aa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80027ac:	f7ff ffc8 	bl	8002740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b0:	480c      	ldr	r0, [pc, #48]	; (80027e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80027b2:	490d      	ldr	r1, [pc, #52]	; (80027e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <LoopForever+0xe>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027c8:	4c0a      	ldr	r4, [pc, #40]	; (80027f4 <LoopForever+0x16>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027d6:	f000 ffbd 	bl	8003754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027da:	f7ff fdc1 	bl	8002360 <main>

080027de <LoopForever>:

LoopForever:
    b LoopForever
 80027de:	e7fe      	b.n	80027de <LoopForever>
  ldr   r0, =_estack
 80027e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80027e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e8:	200005e4 	.word	0x200005e4
  ldr r2, =_sidata
 80027ec:	080062c8 	.word	0x080062c8
  ldr r2, =_sbss
 80027f0:	200005e4 	.word	0x200005e4
  ldr r4, =_ebss
 80027f4:	200006ec 	.word	0x200006ec

080027f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f8:	e7fe      	b.n	80027f8 <ADC1_2_IRQHandler>
	...

080027fc <adc_init>:
  * @brief  ADC configuration
  * @param  None
  * @retval None
  */
void adc_init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef          GPIO_InitStruct;
  ADC_ChannelConfTypeDef   sConfig;


  ADCx_FORCE_RESET();
 8002802:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <adc_init+0xc8>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	4a2f      	ldr	r2, [pc, #188]	; (80028c4 <adc_init+0xc8>)
 8002808:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280c:	60d3      	str	r3, [r2, #12]
  ADCx_RELEASE_RESET();
 800280e:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <adc_init+0xc8>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4a2c      	ldr	r2, [pc, #176]	; (80028c4 <adc_init+0xc8>)
 8002814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002818:	60d3      	str	r3, [r2, #12]

  ADCx_CLK_ENABLE();
 800281a:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <adc_init+0xc8>)
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	4a29      	ldr	r2, [pc, #164]	; (80028c4 <adc_init+0xc8>)
 8002820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002824:	6193      	str	r3, [r2, #24]
 8002826:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <adc_init+0xc8>)
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
  ADCx_CHANNEL_GPIO_CLK_ENABLE();
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <adc_init+0xc8>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	4a23      	ldr	r2, [pc, #140]	; (80028c4 <adc_init+0xc8>)
 8002838:	f043 0310 	orr.w	r3, r3, #16
 800283c:	6193      	str	r3, [r2, #24]
 800283e:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <adc_init+0xc8>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]


  /* Configuration of ADCx init structure: ADC parameters and regular group */
  AdcHandle.Instance = ADCx;
 800284a:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <adc_init+0xcc>)
 800284c:	4a1f      	ldr	r2, [pc, #124]	; (80028cc <adc_init+0xd0>)
 800284e:	601a      	str	r2, [r3, #0]

  AdcHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <adc_init+0xcc>)
 8002852:	2200      	movs	r2, #0
 8002854:	605a      	str	r2, [r3, #4]
  AdcHandle.Init.ScanConvMode          = ADC_SCAN_DISABLE;              /* Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1) */
 8002856:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <adc_init+0xcc>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  AdcHandle.Init.ContinuousConvMode    = DISABLE;                       /* Continuous mode disabled to have only 1 conversion at each conversion trig */
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <adc_init+0xcc>)
 800285e:	2200      	movs	r2, #0
 8002860:	731a      	strb	r2, [r3, #12]
  AdcHandle.Init.NbrOfConversion       = 1;                             /* Parameter discarded because sequencer is disabled */
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <adc_init+0xcc>)
 8002864:	2201      	movs	r2, #1
 8002866:	611a      	str	r2, [r3, #16]
  AdcHandle.Init.DiscontinuousConvMode = DISABLE;                       /* Parameter discarded because sequencer is disabled */
 8002868:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <adc_init+0xcc>)
 800286a:	2200      	movs	r2, #0
 800286c:	751a      	strb	r2, [r3, #20]
  AdcHandle.Init.NbrOfDiscConversion   = 1;                             /* Parameter discarded because sequencer is disabled */
 800286e:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <adc_init+0xcc>)
 8002870:	2201      	movs	r2, #1
 8002872:	619a      	str	r2, [r3, #24]
  AdcHandle.Init.ExternalTrigConv      = ADC_SOFTWARE_START;            /* Software start to trig the 1st conversion manually, without external event */
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <adc_init+0xcc>)
 8002876:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800287a:	61da      	str	r2, [r3, #28]

  HAL_ADC_Init(&AdcHandle);
 800287c:	4812      	ldr	r0, [pc, #72]	; (80028c8 <adc_init+0xcc>)
 800287e:	f7fe f997 	bl	8000bb0 <HAL_ADC_Init>

  /* Configure GPIO pin of the selected ADC channel */
  GPIO_InitStruct.Pin = ADCx_CHANNEL_PIN;
 8002882:	2301      	movs	r3, #1
 8002884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002886:	2303      	movs	r3, #3
 8002888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 800288e:	f107 0318 	add.w	r3, r7, #24
 8002892:	4619      	mov	r1, r3
 8002894:	480e      	ldr	r0, [pc, #56]	; (80028d0 <adc_init+0xd4>)
 8002896:	f7fe fc95 	bl	80011c4 <HAL_GPIO_Init>
  /* Configuration of channel on ADCx regular group on sequencer rank 1 */
  /* Note: Considering IT occurring after each ADC conversion if ADC          */
  /*       conversion is out of the analog watchdog window selected (ADC IT   */
  /*       enabled), select sampling time and ADC clock with sufficient       */
  /*       duration to not create an overhead situation in IRQHandler.        */
  sConfig.Channel      = ADCx_CHANNEL;
 800289a:	230a      	movs	r3, #10
 800289c:	60fb      	str	r3, [r7, #12]
  sConfig.Rank         = ADC_REGULAR_RANK_1;
 800289e:	2301      	movs	r3, #1
 80028a0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80028a2:	2302      	movs	r3, #2
 80028a4:	617b      	str	r3, [r7, #20]

  if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	4619      	mov	r1, r3
 80028ac:	4806      	ldr	r0, [pc, #24]	; (80028c8 <adc_init+0xcc>)
 80028ae:	f7fe fa73 	bl	8000d98 <HAL_ADC_ConfigChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <adc_init+0xc0>
  {
    /* Channel Configuration Error */
    Error_Handler();
 80028b8:	f7ff ff3c 	bl	8002734 <Error_Handler>
  }
}
 80028bc:	bf00      	nop
 80028be:	3728      	adds	r7, #40	; 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000
 80028c8:	20000638 	.word	0x20000638
 80028cc:	40012400 	.word	0x40012400
 80028d0:	40011000 	.word	0x40011000

080028d4 <debug_config>:

/* UART handler declaration */
UART_HandleTypeDef DebugHandle;

void debug_config(uint32_t bau, uint32_t stopbits, uint32_t parity, uint32_t hwctrl)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08e      	sub	sp, #56	; 0x38
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
	  GPIO_InitTypeDef  GPIO_DebugTypDef;


	  // Reset peripherals USART
	  BSP_DEBUG_USARTx_FORCE_RESET();
 80028e2:	4b5e      	ldr	r3, [pc, #376]	; (8002a5c <debug_config+0x188>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	4a5d      	ldr	r2, [pc, #372]	; (8002a5c <debug_config+0x188>)
 80028e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ec:	60d3      	str	r3, [r2, #12]
	  BSP_DEBUG_USARTx_RELEASE_RESET();
 80028ee:	4b5b      	ldr	r3, [pc, #364]	; (8002a5c <debug_config+0x188>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	4a5a      	ldr	r2, [pc, #360]	; (8002a5c <debug_config+0x188>)
 80028f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028f8:	60d3      	str	r3, [r2, #12]

	  //Disable peripherals and GPIO Clocks
	  HAL_GPIO_DeInit(BSP_DEBUG_USARTx_TX_GPIO_PORT, BSP_DEBUG_USARTx_TX_PIN);
 80028fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028fe:	4858      	ldr	r0, [pc, #352]	; (8002a60 <debug_config+0x18c>)
 8002900:	f7fe fdca 	bl	8001498 <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(BSP_DEBUG_USARTx_RX_GPIO_PORT, BSP_DEBUG_USARTx_RX_PIN);
 8002904:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002908:	4855      	ldr	r0, [pc, #340]	; (8002a60 <debug_config+0x18c>)
 800290a:	f7fe fdc5 	bl	8001498 <HAL_GPIO_DeInit>


	  //Enable peripherals and GPIO Clocks
	  BSP_DEBUG_USARTx_RX_GPIO_CLK_ENABLE();
 800290e:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <debug_config+0x188>)
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	4a52      	ldr	r2, [pc, #328]	; (8002a5c <debug_config+0x188>)
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	6193      	str	r3, [r2, #24]
 800291a:	4b50      	ldr	r3, [pc, #320]	; (8002a5c <debug_config+0x188>)
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  BSP_DEBUG_USARTx_TX_GPIO_CLK_ENABLE();
 8002926:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <debug_config+0x188>)
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	4a4c      	ldr	r2, [pc, #304]	; (8002a5c <debug_config+0x188>)
 800292c:	f043 0304 	orr.w	r3, r3, #4
 8002930:	6193      	str	r3, [r2, #24]
 8002932:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <debug_config+0x188>)
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	6a3b      	ldr	r3, [r7, #32]
	  BSP_DEBUG_RTS_CLK_ENABLE();
 800293e:	4b47      	ldr	r3, [pc, #284]	; (8002a5c <debug_config+0x188>)
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	4a46      	ldr	r2, [pc, #280]	; (8002a5c <debug_config+0x188>)
 8002944:	f043 0304 	orr.w	r3, r3, #4
 8002948:	6193      	str	r3, [r2, #24]
 800294a:	4b44      	ldr	r3, [pc, #272]	; (8002a5c <debug_config+0x188>)
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	69fb      	ldr	r3, [r7, #28]
	  BSP_DEBUG_CTS_CLK_ENABLE();
 8002956:	4b41      	ldr	r3, [pc, #260]	; (8002a5c <debug_config+0x188>)
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	4a40      	ldr	r2, [pc, #256]	; (8002a5c <debug_config+0x188>)
 800295c:	f043 0304 	orr.w	r3, r3, #4
 8002960:	6193      	str	r3, [r2, #24]
 8002962:	4b3e      	ldr	r3, [pc, #248]	; (8002a5c <debug_config+0x188>)
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	69bb      	ldr	r3, [r7, #24]

	  /* Enable USARTx clock */
	  BSP_DEBUG_USARTx_CLK_ENABLE();
 800296e:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <debug_config+0x188>)
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	4a3a      	ldr	r2, [pc, #232]	; (8002a5c <debug_config+0x188>)
 8002974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002978:	6193      	str	r3, [r2, #24]
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <debug_config+0x188>)
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]


	  // Configure peripheral GPIO
	  /* Debug TX GPIO pin configuration  */
	  GPIO_DebugTypDef.Pin       = BSP_DEBUG_USARTx_TX_PIN;
 8002986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_DebugTypDef.Mode      = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_DebugTypDef.Pull      = GPIO_PULLUP;
 8002990:	2301      	movs	r3, #1
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_DebugTypDef.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002994:	2303      	movs	r3, #3
 8002996:	637b      	str	r3, [r7, #52]	; 0x34

	  HAL_GPIO_Init(BSP_DEBUG_USARTx_TX_GPIO_PORT, &GPIO_DebugTypDef);
 8002998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800299c:	4619      	mov	r1, r3
 800299e:	4830      	ldr	r0, [pc, #192]	; (8002a60 <debug_config+0x18c>)
 80029a0:	f7fe fc10 	bl	80011c4 <HAL_GPIO_Init>

	  /* Debug RX GPIO pin configuration  */
	  GPIO_DebugTypDef.Pin = BSP_DEBUG_USARTx_RX_PIN;
 80029a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28

	  HAL_GPIO_Init(BSP_DEBUG_USARTx_RX_GPIO_PORT, &GPIO_DebugTypDef);
 80029aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ae:	4619      	mov	r1, r3
 80029b0:	482b      	ldr	r0, [pc, #172]	; (8002a60 <debug_config+0x18c>)
 80029b2:	f7fe fc07 	bl	80011c4 <HAL_GPIO_Init>

	  if(hwctrl == UART_HWCONTROL_RTS || hwctrl == UART_HWCONTROL_RTS_CTS)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029bc:	d003      	beq.n	80029c6 <debug_config+0xf2>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029c4:	d10e      	bne.n	80029e4 <debug_config+0x110>
	  {
		  /* Debug RTS GPIO pin configuration  */
		  GPIO_DebugTypDef.Pin       = BSP_DEBUG_GPIO_RTSPin;
 80029c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
		  GPIO_DebugTypDef.Mode      = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		  GPIO_DebugTypDef.Pull      = GPIO_PULLUP;
 80029d0:	2301      	movs	r3, #1
 80029d2:	633b      	str	r3, [r7, #48]	; 0x30
		  GPIO_DebugTypDef.Speed     = GPIO_SPEED_FREQ_HIGH;
 80029d4:	2303      	movs	r3, #3
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34

		  HAL_GPIO_Init(BSP_DEBUG_RTS_PORT, &GPIO_DebugTypDef);
 80029d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029dc:	4619      	mov	r1, r3
 80029de:	4820      	ldr	r0, [pc, #128]	; (8002a60 <debug_config+0x18c>)
 80029e0:	f7fe fbf0 	bl	80011c4 <HAL_GPIO_Init>
	  }

	  if(hwctrl == UART_HWCONTROL_CTS || hwctrl == UART_HWCONTROL_RTS_CTS)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ea:	d003      	beq.n	80029f4 <debug_config+0x120>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029f2:	d111      	bne.n	8002a18 <debug_config+0x144>
	  {
		  /* Debug RTS GPIO pin configuration  */
		  GPIO_DebugTypDef.Pin       = BSP_DEBUG_GPIO_RTSPin;
 80029f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
		  /* Debug CTS GPIO pin configuration  */
		  GPIO_DebugTypDef.Pin = BSP_DEBUG_GPIO_CTSPin;
 80029fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
		  GPIO_DebugTypDef.Mode      = GPIO_MODE_INPUT;
 8002a00:	2300      	movs	r3, #0
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
		  GPIO_DebugTypDef.Pull      = GPIO_PULLUP;
 8002a04:	2301      	movs	r3, #1
 8002a06:	633b      	str	r3, [r7, #48]	; 0x30
		  GPIO_DebugTypDef.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	637b      	str	r3, [r7, #52]	; 0x34

		  HAL_GPIO_Init(BSP_DEBUG_CTS_PORT, &GPIO_DebugTypDef);
 8002a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a10:	4619      	mov	r1, r3
 8002a12:	4813      	ldr	r0, [pc, #76]	; (8002a60 <debug_config+0x18c>)
 8002a14:	f7fe fbd6 	bl	80011c4 <HAL_GPIO_Init>
	  }


	  //Configure the UART peripheral
	  DebugHandle.Instance        = BSP_DEBUG_USARTx;
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <debug_config+0x190>)
 8002a1a:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <debug_config+0x194>)
 8002a1c:	601a      	str	r2, [r3, #0]

	  DebugHandle.Init.BaudRate   = bau;
 8002a1e:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <debug_config+0x190>)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6053      	str	r3, [r2, #4]
	  DebugHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <debug_config+0x190>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
	  DebugHandle.Init.StopBits   = stopbits;
 8002a2a:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <debug_config+0x190>)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	60d3      	str	r3, [r2, #12]
	  DebugHandle.Init.Parity     = parity;
 8002a30:	4a0c      	ldr	r2, [pc, #48]	; (8002a64 <debug_config+0x190>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6113      	str	r3, [r2, #16]
	  DebugHandle.Init.HwFlowCtl  = hwctrl;
 8002a36:	4a0b      	ldr	r2, [pc, #44]	; (8002a64 <debug_config+0x190>)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	6193      	str	r3, [r2, #24]
	  DebugHandle.Init.Mode       = UART_MODE_TX_RX;
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <debug_config+0x190>)
 8002a3e:	220c      	movs	r2, #12
 8002a40:	615a      	str	r2, [r3, #20]

	  if (HAL_UART_Init(&DebugHandle) != HAL_OK)
 8002a42:	4808      	ldr	r0, [pc, #32]	; (8002a64 <debug_config+0x190>)
 8002a44:	f7ff fa49 	bl	8001eda <HAL_UART_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <debug_config+0x17e>
	  {
	    /* Initialization Error */
	    Error_Handler();
 8002a4e:	f7ff fe71 	bl	8002734 <Error_Handler>
	  }
}
 8002a52:	bf00      	nop
 8002a54:	3738      	adds	r7, #56	; 0x38
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40010800 	.word	0x40010800
 8002a64:	20000668 	.word	0x20000668
 8002a68:	40013800 	.word	0x40013800

08002a6c <buzzer_init>:
  * @brief Buzzer Initialization Function
  * @param None
  * @retval None
  */
void buzzer_init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_BuzzerTypDef = {0};
 8002a72:	f107 0308 	add.w	r3, r7, #8
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  BUZZER_CLK_ENABLE();
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <buzzer_init+0x5c>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <buzzer_init+0x5c>)
 8002a86:	f043 0310 	orr.w	r3, r3, #16
 8002a8a:	6193      	str	r3, [r2, #24]
 8002a8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <buzzer_init+0x5c>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2120      	movs	r1, #32
 8002a9c:	480b      	ldr	r0, [pc, #44]	; (8002acc <buzzer_init+0x60>)
 8002a9e:	f7fe fdc7 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC59 */
  GPIO_BuzzerTypDef.Pin = BUZZER_PIN;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	60bb      	str	r3, [r7, #8]
  GPIO_BuzzerTypDef.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	60fb      	str	r3, [r7, #12]
  GPIO_BuzzerTypDef.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
  GPIO_BuzzerTypDef.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUZZER_PORT, &GPIO_BuzzerTypDef);
 8002ab2:	f107 0308 	add.w	r3, r7, #8
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4804      	ldr	r0, [pc, #16]	; (8002acc <buzzer_init+0x60>)
 8002aba:	f7fe fb83 	bl	80011c4 <HAL_GPIO_Init>
}
 8002abe:	bf00      	nop
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40011000 	.word	0x40011000

08002ad0 <delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void delay_us(volatile uint32_t microseconds)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <delay_us+0x3c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002ade:	f7ff f9a3 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <delay_us+0x40>)
 8002ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aea:	0c9b      	lsrs	r3, r3, #18
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	fb02 f303 	mul.w	r3, r2, r3
 8002af2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002af4:	bf00      	nop
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <delay_us+0x3c>)
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad2      	subs	r2, r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d3f8      	bcc.n	8002af6 <delay_us+0x26>
}
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	e0001000 	.word	0xe0001000
 8002b10:	431bde83 	.word	0x431bde83

08002b14 <DHT11_Init>:
#include "dht11.h"
#include "dwt_stm32_delay.h"
#include "bsp_debug_usart.h"

uint8_t DHT11_Init()
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_DHT11TypDef;

	DHT11_CLK_ENABLE();
 8002b1a:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <DHT11_Init+0x58>)
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <DHT11_Init+0x58>)
 8002b20:	f043 0308 	orr.w	r3, r3, #8
 8002b24:	6193      	str	r3, [r2, #24]
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <DHT11_Init+0x58>)
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]

	GPIO_DHT11TypDef.Pin=DHT11;
 8002b32:	2301      	movs	r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
	GPIO_DHT11TypDef.Mode= GPIO_MODE_OUTPUT_PP;
 8002b36:	2301      	movs	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
	GPIO_DHT11TypDef.Pull = GPIO_PULLUP;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	613b      	str	r3, [r7, #16]
	GPIO_DHT11TypDef.Speed=GPIO_SPEED_FREQ_HIGH;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DHT11, &GPIO_DHT11TypDef);
 8002b42:	f107 0308 	add.w	r3, r7, #8
 8002b46:	4619      	mov	r1, r3
 8002b48:	4809      	ldr	r0, [pc, #36]	; (8002b70 <DHT11_Init+0x5c>)
 8002b4a:	f7fe fb3b 	bl	80011c4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIO_DHT11, DHT11, GPIO_PIN_SET);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	2101      	movs	r1, #1
 8002b52:	4807      	ldr	r0, [pc, #28]	; (8002b70 <DHT11_Init+0x5c>)
 8002b54:	f7fe fd6c 	bl	8001630 <HAL_GPIO_WritePin>

	DHT11_Rst();
 8002b58:	f000 f80c 	bl	8002b74 <DHT11_Rst>
	return DHT11_Check();
 8002b5c:	f000 f81e 	bl	8002b9c <DHT11_Check>
 8002b60:	4603      	mov	r3, r0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40010c00 	.word	0x40010c00

08002b74 <DHT11_Rst>:

void DHT11_Rst()
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
	DHT11_IO_OUT();
 8002b78:	f000 f846 	bl	8002c08 <DHT11_IO_OUT>
    DHT11_DQ_OUT=0;
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <DHT11_Rst+0x24>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
    HAL_Delay(18);
 8002b82:	2012      	movs	r0, #18
 8002b84:	f7fd fff2 	bl	8000b6c <HAL_Delay>
    DHT11_DQ_OUT=1;
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <DHT11_Rst+0x24>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
	delay_us(30);
 8002b8e:	201e      	movs	r0, #30
 8002b90:	f7ff ff9e 	bl	8002ad0 <delay_us>
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	42218180 	.word	0x42218180

08002b9c <DHT11_Check>:

uint8_t DHT11_Check()
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
	uint8_t retry=0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	71fb      	strb	r3, [r7, #7]
	DHT11_IO_IN();//SET INPUT
 8002ba6:	f000 f845 	bl	8002c34 <DHT11_IO_IN>
    while (DHT11_DQ_IN&&retry<100)
 8002baa:	e005      	b.n	8002bb8 <DHT11_Check+0x1c>
	{
		retry++;
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f7ff ff8c 	bl	8002ad0 <delay_us>
    while (DHT11_DQ_IN&&retry<100)
 8002bb8:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <DHT11_Check+0x68>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <DHT11_Check+0x2a>
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	2b63      	cmp	r3, #99	; 0x63
 8002bc4:	d9f2      	bls.n	8002bac <DHT11_Check+0x10>
	};
	if(retry>=100)return 1;
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	2b63      	cmp	r3, #99	; 0x63
 8002bca:	d901      	bls.n	8002bd0 <DHT11_Check+0x34>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e015      	b.n	8002bfc <DHT11_Check+0x60>
	else retry=0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	71fb      	strb	r3, [r7, #7]
    while (!DHT11_DQ_IN&&retry<100)
 8002bd4:	e005      	b.n	8002be2 <DHT11_Check+0x46>
	{
		retry++;
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f7ff ff77 	bl	8002ad0 <delay_us>
    while (!DHT11_DQ_IN&&retry<100)
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <DHT11_Check+0x68>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d102      	bne.n	8002bf0 <DHT11_Check+0x54>
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	2b63      	cmp	r3, #99	; 0x63
 8002bee:	d9f2      	bls.n	8002bd6 <DHT11_Check+0x3a>
	};
	if(retry>=100)return 1;
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	2b63      	cmp	r3, #99	; 0x63
 8002bf4:	d901      	bls.n	8002bfa <DHT11_Check+0x5e>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <DHT11_Check+0x60>
	return 0;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	42218100 	.word	0x42218100

08002c08 <DHT11_IO_OUT>:
	}else return 1;
	return 0;
}

void DHT11_IO_OUT(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_DHT11TypDef;
	GPIO_DHT11TypDef.Pin =DHT11;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	603b      	str	r3, [r7, #0]
	GPIO_DHT11TypDef.Mode= GPIO_MODE_OUTPUT_PP;
 8002c12:	2301      	movs	r3, #1
 8002c14:	607b      	str	r3, [r7, #4]
	GPIO_DHT11TypDef.Pull = GPIO_PULLUP;
 8002c16:	2301      	movs	r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
	GPIO_DHT11TypDef.Speed=GPIO_SPEED_FREQ_HIGH;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIO_DHT11, &GPIO_DHT11TypDef);
 8002c1e:	463b      	mov	r3, r7
 8002c20:	4619      	mov	r1, r3
 8002c22:	4803      	ldr	r0, [pc, #12]	; (8002c30 <DHT11_IO_OUT+0x28>)
 8002c24:	f7fe face 	bl	80011c4 <HAL_GPIO_Init>
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40010c00 	.word	0x40010c00

08002c34 <DHT11_IO_IN>:


void DHT11_IO_IN(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_DHT11TypDef;
	GPIO_DHT11TypDef.Pin =DHT11;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	603b      	str	r3, [r7, #0]
	GPIO_DHT11TypDef.Mode = GPIO_MODE_INPUT;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	607b      	str	r3, [r7, #4]
	GPIO_DHT11TypDef.Pull = GPIO_PULLUP;
 8002c42:	2301      	movs	r3, #1
 8002c44:	60bb      	str	r3, [r7, #8]
	GPIO_DHT11TypDef.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c46:	2303      	movs	r3, #3
 8002c48:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIO_DHT11, &GPIO_DHT11TypDef);
 8002c4a:	463b      	mov	r3, r7
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4803      	ldr	r0, [pc, #12]	; (8002c5c <DHT11_IO_IN+0x28>)
 8002c50:	f7fe fab8 	bl	80011c4 <HAL_GPIO_Init>
}
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40010c00 	.word	0x40010c00

08002c60 <infrared_init>:
#include "bsp_debug_usart.h"

//#define EXTI_INFRARED

void infrared_init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef   IR_TypDef;

	  /* Enable GPIOA clock */
	  INFRARED_CLK_ENABLE();
 8002c66:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <infrared_init+0x44>)
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <infrared_init+0x44>)
 8002c6c:	f043 0310 	orr.w	r3, r3, #16
 8002c70:	6193      	str	r3, [r2, #24]
 8002c72:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <infrared_init+0x44>)
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
	  /* Enable and set EXTI line x Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(IR_IRQn, 2, 1);
	  HAL_NVIC_EnableIRQ(IR_IRQn);
#else
	  /*Configure GPIO pins : PA15*/
	  IR_TypDef.Pin = INFRARED_PIN;
 8002c7e:	2310      	movs	r3, #16
 8002c80:	60bb      	str	r3, [r7, #8]
	  IR_TypDef.Mode = GPIO_MODE_INPUT;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
	  IR_TypDef.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
	  IR_TypDef.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(INFRARED_PORT, &IR_TypDef);
 8002c8e:	f107 0308 	add.w	r3, r7, #8
 8002c92:	4619      	mov	r1, r3
 8002c94:	4804      	ldr	r0, [pc, #16]	; (8002ca8 <infrared_init+0x48>)
 8002c96:	f7fe fa95 	bl	80011c4 <HAL_GPIO_Init>

#endif
}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40011000 	.word	0x40011000

08002cac <infrared_callback>:


void infrared_callback(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
	static uint8_t state =0;
#ifdef EXTI_INFRARED
	  printf("Infrared \r\n");
#else
	 if(!INFRARED)
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <infrared_callback+0x2c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <infrared_callback+0x22>
	 {
		 if(!state)
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <infrared_callback+0x30>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <infrared_callback+0x28>
		 {
			 state =1;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <infrared_callback+0x30>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
			 printf("Infrared \r\n");
 8002cc6:	4806      	ldr	r0, [pc, #24]	; (8002ce0 <infrared_callback+0x34>)
 8002cc8:	f001 fa34 	bl	8004134 <puts>
		 state =0;
	 }

#endif

}
 8002ccc:	e002      	b.n	8002cd4 <infrared_callback+0x28>
		 state =0;
 8002cce:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <infrared_callback+0x30>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	42220110 	.word	0x42220110
 8002cdc:	20000604 	.word	0x20000604
 8002ce0:	08005f50 	.word	0x08005f50

08002ce4 <infrared_reflective_init>:

//#define EXTI_INFRARED_REFLECTIVE


void infrared_reflective_init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef   IR_TypDef;

	  /* Enable GPIOA clock */
	  INFRARED_REFLECTIVE_CLK_ENABLE();
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <infrared_reflective_init+0x44>)
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <infrared_reflective_init+0x44>)
 8002cf0:	f043 0308 	orr.w	r3, r3, #8
 8002cf4:	6193      	str	r3, [r2, #24]
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <infrared_reflective_init+0x44>)
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
	  /* Enable and set EXTI line x Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(IN_REF_IRQn, 2, 0);
	  HAL_NVIC_EnableIRQ(IN_REF_IRQn);
#else
	  /*Configure GPIO pins : PA15*/
	  IR_TypDef.Pin = INFRARED_REFLECTIVE_PIN;
 8002d02:	2302      	movs	r3, #2
 8002d04:	60bb      	str	r3, [r7, #8]
	  IR_TypDef.Mode = GPIO_MODE_INPUT;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
	  IR_TypDef.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
	  IR_TypDef.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(INFRARED_REFLECTIVE_PORT, &IR_TypDef);
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	4619      	mov	r1, r3
 8002d18:	4804      	ldr	r0, [pc, #16]	; (8002d2c <infrared_reflective_init+0x48>)
 8002d1a:	f7fe fa53 	bl	80011c4 <HAL_GPIO_Init>

#endif
}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40010c00 	.word	0x40010c00

08002d30 <infrared_reflective_callback>:


void infrared_reflective_callback(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	static uint8_t state =0;
#ifdef EXTI_INFRARED_REFLECTIVE
	  printf("Infrared Reflective \r\n");
#else
	 if(!INFRARED_REFLECTIVE)
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <infrared_reflective_callback+0x2c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <infrared_reflective_callback+0x22>
	 {
		 if(!state)
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <infrared_reflective_callback+0x30>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <infrared_reflective_callback+0x28>
		 {
			 state =1;
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <infrared_reflective_callback+0x30>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
			 printf("Infrared Reflective \r\n");
 8002d4a:	4806      	ldr	r0, [pc, #24]	; (8002d64 <infrared_reflective_callback+0x34>)
 8002d4c:	f001 f9f2 	bl	8004134 <puts>
		 state =0;
	 }

#endif

}
 8002d50:	e002      	b.n	8002d58 <infrared_reflective_callback+0x28>
		 state =0;
 8002d52:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <infrared_reflective_callback+0x30>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	42218104 	.word	0x42218104
 8002d60:	20000605 	.word	0x20000605
 8002d64:	08005f5c 	.word	0x08005f5c

08002d68 <key_init>:
#include "key.h"


void key_init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_KeyInit = {0};
 8002d6e:	f107 0308 	add.w	r3, r7, #8
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <key_init+0x88>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <key_init+0x88>)
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	6193      	str	r3, [r2, #24]
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <key_init+0x88>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d94:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <key_init+0x88>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <key_init+0x88>)
 8002d9a:	f043 0310 	orr.w	r3, r3, #16
 8002d9e:	6193      	str	r3, [r2, #24]
 8002da0:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <key_init+0x88>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA15*/
  GPIO_KeyInit.Pin = GPIO_PIN_15;
 8002dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db0:	60bb      	str	r3, [r7, #8]
  GPIO_KeyInit.Mode = GPIO_MODE_INPUT;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
  GPIO_KeyInit.Pull = GPIO_PULLUP;
 8002db6:	2301      	movs	r3, #1
 8002db8:	613b      	str	r3, [r7, #16]
  GPIO_KeyInit.Speed = GPIO_SPEED_FREQ_LOW;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_KeyInit);
 8002dbe:	f107 0308 	add.w	r3, r7, #8
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	480b      	ldr	r0, [pc, #44]	; (8002df4 <key_init+0x8c>)
 8002dc6:	f7fe f9fd 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11*/
  GPIO_KeyInit.Pin = GPIO_PIN_10| GPIO_PIN_11;
 8002dca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002dce:	60bb      	str	r3, [r7, #8]
  GPIO_KeyInit.Mode = GPIO_MODE_INPUT;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
  GPIO_KeyInit.Pull = GPIO_PULLUP;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	613b      	str	r3, [r7, #16]
  GPIO_KeyInit.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_KeyInit);
 8002ddc:	f107 0308 	add.w	r3, r7, #8
 8002de0:	4619      	mov	r1, r3
 8002de2:	4805      	ldr	r0, [pc, #20]	; (8002df8 <key_init+0x90>)
 8002de4:	f7fe f9ee 	bl	80011c4 <HAL_GPIO_Init>
}
 8002de8:	bf00      	nop
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010800 	.word	0x40010800
 8002df8:	40011000 	.word	0x40011000

08002dfc <led_init>:
  * @brief Led Initialization Function
  * @param None
  * @retval None
  */
void led_init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_LedInit = {0};
 8002e02:	f107 0308 	add.w	r3, r7, #8
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e10:	4b22      	ldr	r3, [pc, #136]	; (8002e9c <led_init+0xa0>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	4a21      	ldr	r2, [pc, #132]	; (8002e9c <led_init+0xa0>)
 8002e16:	f043 0310 	orr.w	r3, r3, #16
 8002e1a:	6193      	str	r3, [r2, #24]
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <led_init+0xa0>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e28:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <led_init+0xa0>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <led_init+0xa0>)
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	6193      	str	r3, [r2, #24]
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <led_init+0xa0>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002e40:	2200      	movs	r2, #0
 8002e42:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002e46:	4816      	ldr	r0, [pc, #88]	; (8002ea0 <led_init+0xa4>)
 8002e48:	f7fe fbf2 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e52:	4814      	ldr	r0, [pc, #80]	; (8002ea4 <led_init+0xa8>)
 8002e54:	f7fe fbec 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC7 PC8 PC9 */
  GPIO_LedInit.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002e58:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002e5c:	60bb      	str	r3, [r7, #8]
  GPIO_LedInit.Mode = GPIO_MODE_OUTPUT_PP;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	60fb      	str	r3, [r7, #12]
  GPIO_LedInit.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
  GPIO_LedInit.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	2302      	movs	r3, #2
 8002e68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_LedInit);
 8002e6a:	f107 0308 	add.w	r3, r7, #8
 8002e6e:	4619      	mov	r1, r3
 8002e70:	480b      	ldr	r0, [pc, #44]	; (8002ea0 <led_init+0xa4>)
 8002e72:	f7fe f9a7 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_LedInit.Pin = GPIO_PIN_8;
 8002e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e7a:	60bb      	str	r3, [r7, #8]
  GPIO_LedInit.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
  GPIO_LedInit.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
  GPIO_LedInit.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2302      	movs	r3, #2
 8002e86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_LedInit);
 8002e88:	f107 0308 	add.w	r3, r7, #8
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4805      	ldr	r0, [pc, #20]	; (8002ea4 <led_init+0xa8>)
 8002e90:	f7fe f998 	bl	80011c4 <HAL_GPIO_Init>
}
 8002e94:	bf00      	nop
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40011000 	.word	0x40011000
 8002ea4:	40010800 	.word	0x40010800

08002ea8 <delay_us>:
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <delay_us+0x3c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002eb6:	f7fe ffb7 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <delay_us+0x40>)
 8002ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec2:	0c9b      	lsrs	r3, r3, #18
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	fb02 f303 	mul.w	r3, r2, r3
 8002eca:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002ecc:	bf00      	nop
 8002ece:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <delay_us+0x3c>)
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad2      	subs	r2, r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d3f8      	bcc.n	8002ece <delay_us+0x26>
}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	e0001000 	.word	0xe0001000
 8002ee8:	431bde83 	.word	0x431bde83

08002eec <di_pulse>:
static MY9291_COLOR_TypDef  _color = {0, 0, 0, 0, 0};

#define debug_rbg


static void di_pulse(unsigned int times) {
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	for (unsigned int i = 0; i < times; i++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e008      	b.n	8002f0c <di_pulse+0x20>
	{
		DI =1;
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <di_pulse+0x34>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
		DI =0;
 8002f00:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <di_pulse+0x34>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
	for (unsigned int i = 0; i < times; i++)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d3f2      	bcc.n	8002efa <di_pulse+0xe>
	}
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	422181a4 	.word	0x422181a4

08002f24 <dcki_pulse>:

static void dcki_pulse(unsigned int times) {
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	for (unsigned int i = 0; i < times; i++)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e008      	b.n	8002f44 <dcki_pulse+0x20>
	{
		DCKI =1;
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <dcki_pulse+0x34>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
		DCKI =0;
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <dcki_pulse+0x34>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
	for (unsigned int i = 0; i < times; i++)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3301      	adds	r3, #1
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d3f2      	bcc.n	8002f32 <dcki_pulse+0xe>
	}
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	422181a0 	.word	0x422181a0

08002f5c <write>:

static void write(unsigned int data, unsigned char bit_length)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	70fb      	strb	r3, [r7, #3]

    unsigned int mask = (0x01 << (bit_length - 1));
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	60bb      	str	r3, [r7, #8]

    for (unsigned int i = 0; i < bit_length / 2; i++) {
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e02c      	b.n	8002fd4 <write+0x78>
		DCKI =0;
 8002f7a:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <write+0x90>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(DI_PORT, DI_PIN, (data & mask));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	4013      	ands	r3, r2
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f92:	4817      	ldr	r0, [pc, #92]	; (8002ff0 <write+0x94>)
 8002f94:	f7fe fb4c 	bl	8001630 <HAL_GPIO_WritePin>
		DCKI =1;
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <write+0x90>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
        data = data << 1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(DI_PORT, DI_PIN, (data & mask));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	4013      	ands	r3, r2
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fb6:	480e      	ldr	r0, [pc, #56]	; (8002ff0 <write+0x94>)
 8002fb8:	f7fe fb3a 	bl	8001630 <HAL_GPIO_WritePin>
		DCKI =0;
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <write+0x90>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
        DI =0;
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <write+0x98>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
        data = data << 1;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	607b      	str	r3, [r7, #4]
    for (unsigned int i = 0; i < bit_length / 2; i++) {
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d3cb      	bcc.n	8002f7a <write+0x1e>
    }
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	422181a0 	.word	0x422181a0
 8002ff0:	40010c00 	.word	0x40010c00
 8002ff4:	422181a4 	.word	0x422181a4

08002ff8 <set_cmd>:


static void set_cmd(MY9291_CMD_TypDef command)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	7138      	strb	r0, [r7, #4]

	// ets_intr_lock();

    // TStop > 12us.
	delay_us(12);
 8003000:	200c      	movs	r0, #12
 8003002:	f7ff ff51 	bl	8002ea8 <delay_us>

    // Send 12 DI pulse, after 6 pulse's falling edge store duty data, and 12
	// pulse's rising edge convert to command mode.
	di_pulse(12);
 8003006:	200c      	movs	r0, #12
 8003008:	f7ff ff70 	bl	8002eec <di_pulse>

    // Delay >12us, begin send CMD data
	delay_us(12);
 800300c:	200c      	movs	r0, #12
 800300e:	f7ff ff4b 	bl	8002ea8 <delay_us>

    // Send CMD data
    unsigned char command_data = *(unsigned char *) (&command);
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	73fb      	strb	r3, [r7, #15]
    write(command_data, 8);
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2108      	movs	r1, #8
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff9d 	bl	8002f5c <write>

	// TStart > 12us. Delay 12 us.
	delay_us(12);
 8003022:	200c      	movs	r0, #12
 8003024:	f7ff ff40 	bl	8002ea8 <delay_us>

    // Send 16 DI pulse，at 14 pulse's falling edge store CMD data, and
	// at 16 pulse's falling edge convert to duty mode.
	di_pulse(16);
 8003028:	2010      	movs	r0, #16
 800302a:	f7ff ff5f 	bl	8002eec <di_pulse>

    // TStop > 12us.
	delay_us(12);
 800302e:	200c      	movs	r0, #12
 8003030:	f7ff ff3a 	bl	8002ea8 <delay_us>

    // ets_intr_unlock();

}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <send>:

static void send()
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0

	// Color to show
	unsigned int duty[6] = {0};
 8003042:	463b      	mov	r3, r7
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	611a      	str	r2, [r3, #16]
 8003050:	615a      	str	r2, [r3, #20]
	if (_state) {
 8003052:	4b3e      	ldr	r3, [pc, #248]	; (800314c <send+0x110>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d025      	beq.n	80030a6 <send+0x6a>
        if (_channels == 4) {
 800305a:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <send+0x114>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b04      	cmp	r3, #4
 8003060:	d110      	bne.n	8003084 <send+0x48>
            duty[0] = _color.red;
 8003062:	4b3c      	ldr	r3, [pc, #240]	; (8003154 <send+0x118>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	603b      	str	r3, [r7, #0]
            duty[1] = _color.green;
 8003068:	4b3a      	ldr	r3, [pc, #232]	; (8003154 <send+0x118>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	607b      	str	r3, [r7, #4]
            duty[2] = _color.blue;
 800306e:	4b39      	ldr	r3, [pc, #228]	; (8003154 <send+0x118>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	60bb      	str	r3, [r7, #8]
            duty[3] = _color.white;
 8003074:	4b37      	ldr	r3, [pc, #220]	; (8003154 <send+0x118>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	60fb      	str	r3, [r7, #12]
            duty[4] = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
            duty[5] = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	e010      	b.n	80030a6 <send+0x6a>
        } else {
            duty[0] = _color.white;
 8003084:	4b33      	ldr	r3, [pc, #204]	; (8003154 <send+0x118>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	603b      	str	r3, [r7, #0]
            duty[1] = _color.warm;
 800308a:	4b32      	ldr	r3, [pc, #200]	; (8003154 <send+0x118>)
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	607b      	str	r3, [r7, #4]
            duty[2] = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	60bb      	str	r3, [r7, #8]
            duty[3] = _color.green;
 8003094:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <send+0x118>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	60fb      	str	r3, [r7, #12]
            duty[4] = _color.red;
 800309a:	4b2e      	ldr	r3, [pc, #184]	; (8003154 <send+0x118>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	613b      	str	r3, [r7, #16]
            duty[5] = _color.blue;
 80030a0:	4b2c      	ldr	r3, [pc, #176]	; (8003154 <send+0x118>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	617b      	str	r3, [r7, #20]
        }
    }

    unsigned char bit_length = 8;
 80030a6:	2308      	movs	r3, #8
 80030a8:	77fb      	strb	r3, [r7, #31]
	switch (_command.bit_width) {
 80030aa:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <send+0x11c>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d817      	bhi.n	80030e8 <send+0xac>
 80030b8:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <send+0x84>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	080030d1 	.word	0x080030d1
 80030c4:	080030d7 	.word	0x080030d7
 80030c8:	080030dd 	.word	0x080030dd
 80030cc:	080030e3 	.word	0x080030e3
		case MY9291_CMD_BIT_WIDTH_16:
			bit_length = 16;
 80030d0:	2310      	movs	r3, #16
 80030d2:	77fb      	strb	r3, [r7, #31]
			break;
 80030d4:	e00b      	b.n	80030ee <send+0xb2>
		case MY9291_CMD_BIT_WIDTH_14:
			bit_length = 14;
 80030d6:	230e      	movs	r3, #14
 80030d8:	77fb      	strb	r3, [r7, #31]
			break;
 80030da:	e008      	b.n	80030ee <send+0xb2>
		case MY9291_CMD_BIT_WIDTH_12:
			bit_length = 12;
 80030dc:	230c      	movs	r3, #12
 80030de:	77fb      	strb	r3, [r7, #31]
			break;
 80030e0:	e005      	b.n	80030ee <send+0xb2>
		case MY9291_CMD_BIT_WIDTH_8:
			bit_length = 8;
 80030e2:	2308      	movs	r3, #8
 80030e4:	77fb      	strb	r3, [r7, #31]
			break;
 80030e6:	e002      	b.n	80030ee <send+0xb2>
		default:
			bit_length = 8;
 80030e8:	2308      	movs	r3, #8
 80030ea:	77fb      	strb	r3, [r7, #31]
			break;
 80030ec:	bf00      	nop
	}

	// ets_intr_lock();

    // TStop > 12us.
	delay_us(12);
 80030ee:	200c      	movs	r0, #12
 80030f0:	f7ff feda 	bl	8002ea8 <delay_us>

    // Send color data
    unsigned int length = (_channels == 4) ? 4 : 6;
 80030f4:	4b16      	ldr	r3, [pc, #88]	; (8003150 <send+0x114>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d101      	bne.n	8003100 <send+0xc4>
 80030fc:	2304      	movs	r3, #4
 80030fe:	e000      	b.n	8003102 <send+0xc6>
 8003100:	2306      	movs	r3, #6
 8003102:	61bb      	str	r3, [r7, #24]
    for (unsigned char channel = 0; channel < length; channel++) {
 8003104:	2300      	movs	r3, #0
 8003106:	77bb      	strb	r3, [r7, #30]
 8003108:	e00e      	b.n	8003128 <send+0xec>
        write(duty[channel], bit_length);
 800310a:	7fbb      	ldrb	r3, [r7, #30]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	f107 0220 	add.w	r2, r7, #32
 8003112:	4413      	add	r3, r2
 8003114:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003118:	7ffa      	ldrb	r2, [r7, #31]
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff1d 	bl	8002f5c <write>
    for (unsigned char channel = 0; channel < length; channel++) {
 8003122:	7fbb      	ldrb	r3, [r7, #30]
 8003124:	3301      	adds	r3, #1
 8003126:	77bb      	strb	r3, [r7, #30]
 8003128:	7fbb      	ldrb	r3, [r7, #30]
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	429a      	cmp	r2, r3
 800312e:	d8ec      	bhi.n	800310a <send+0xce>
	}

	// TStart > 12us. Ready for send DI pulse.
	delay_us(12);
 8003130:	200c      	movs	r0, #12
 8003132:	f7ff feb9 	bl	8002ea8 <delay_us>

	// Send 8 DI pulse. After 8 pulse falling edge, store old data.
	di_pulse(8);
 8003136:	2008      	movs	r0, #8
 8003138:	f7ff fed8 	bl	8002eec <di_pulse>

	// TStop > 12us.
	delay_us(12);
 800313c:	200c      	movs	r0, #12
 800313e:	f7ff feb3 	bl	8002ea8 <delay_us>

	// ets_intr_unlock();

}
 8003142:	bf00      	nop
 8003144:	3720      	adds	r7, #32
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000609 	.word	0x20000609
 8003150:	20000410 	.word	0x20000410
 8003154:	2000060c 	.word	0x2000060c
 8003158:	20000608 	.word	0x20000608

0800315c <setState>:
{
    return _state;
}

void setState(bool state)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
    _state = state;
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <setState+0x34>)
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	7013      	strb	r3, [r2, #0]
#ifdef debug_rbg
    printf("[MY9291] setState: %s \r\n", _state ? "true" : "false");
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <setState+0x34>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <setState+0x1c>
 8003174:	4b07      	ldr	r3, [pc, #28]	; (8003194 <setState+0x38>)
 8003176:	e000      	b.n	800317a <setState+0x1e>
 8003178:	4b07      	ldr	r3, [pc, #28]	; (8003198 <setState+0x3c>)
 800317a:	4619      	mov	r1, r3
 800317c:	4807      	ldr	r0, [pc, #28]	; (800319c <setState+0x40>)
 800317e:	f000 ff65 	bl	800404c <iprintf>
#endif
    send();
 8003182:	f7ff ff5b 	bl	800303c <send>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000609 	.word	0x20000609
 8003194:	08005fa0 	.word	0x08005fa0
 8003198:	08005fa8 	.word	0x08005fa8
 800319c:	08005fb0 	.word	0x08005fb0

080031a0 <my9291_led_rbg_init>:

void my9291_led_rbg_init(unsigned char channels)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
	  GPIO_InitTypeDef GPIO_LedInit = {0};
 80031aa:	f107 0310 	add.w	r3, r7, #16
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	60da      	str	r2, [r3, #12]

	  /* GPIO Ports Clock Enable */
	  DI_CLK_ENABLE();
 80031b8:	4b40      	ldr	r3, [pc, #256]	; (80032bc <my9291_led_rbg_init+0x11c>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	4a3f      	ldr	r2, [pc, #252]	; (80032bc <my9291_led_rbg_init+0x11c>)
 80031be:	f043 0308 	orr.w	r3, r3, #8
 80031c2:	6193      	str	r3, [r2, #24]
 80031c4:	4b3d      	ldr	r3, [pc, #244]	; (80032bc <my9291_led_rbg_init+0x11c>)
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]
	  DCKI_CLK_ENABLE();
 80031d0:	4b3a      	ldr	r3, [pc, #232]	; (80032bc <my9291_led_rbg_init+0x11c>)
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	4a39      	ldr	r2, [pc, #228]	; (80032bc <my9291_led_rbg_init+0x11c>)
 80031d6:	f043 0308 	orr.w	r3, r3, #8
 80031da:	6193      	str	r3, [r2, #24]
 80031dc:	4b37      	ldr	r3, [pc, #220]	; (80032bc <my9291_led_rbg_init+0x11c>)
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	68bb      	ldr	r3, [r7, #8]


	  /*Configure GPIO pins : DCKI_PIN */
	  GPIO_LedInit.Pin = DI_PIN;
 80031e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ec:	613b      	str	r3, [r7, #16]
	  GPIO_LedInit.Mode = GPIO_MODE_OUTPUT_PP;
 80031ee:	2301      	movs	r3, #1
 80031f0:	617b      	str	r3, [r7, #20]
	  GPIO_LedInit.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
	  GPIO_LedInit.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	2302      	movs	r3, #2
 80031f8:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(DI_PORT, &GPIO_LedInit);
 80031fa:	f107 0310 	add.w	r3, r7, #16
 80031fe:	4619      	mov	r1, r3
 8003200:	482f      	ldr	r0, [pc, #188]	; (80032c0 <my9291_led_rbg_init+0x120>)
 8003202:	f7fd ffdf 	bl	80011c4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : DCKI_PIN */
	  GPIO_LedInit.Pin = DCKI_PIN;
 8003206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800320a:	613b      	str	r3, [r7, #16]
	  GPIO_LedInit.Mode = GPIO_MODE_OUTPUT_PP;
 800320c:	2301      	movs	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
	  GPIO_LedInit.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	61bb      	str	r3, [r7, #24]
	  GPIO_LedInit.Speed = GPIO_SPEED_FREQ_LOW;
 8003214:	2302      	movs	r3, #2
 8003216:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(DCKI_PORT, &GPIO_LedInit);
 8003218:	f107 0310 	add.w	r3, r7, #16
 800321c:	4619      	mov	r1, r3
 800321e:	4828      	ldr	r0, [pc, #160]	; (80032c0 <my9291_led_rbg_init+0x120>)
 8003220:	f7fd ffd0 	bl	80011c4 <HAL_GPIO_Init>


	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DI_PORT, DI_PIN, GPIO_PIN_RESET);
 8003224:	2200      	movs	r2, #0
 8003226:	f44f 7100 	mov.w	r1, #512	; 0x200
 800322a:	4825      	ldr	r0, [pc, #148]	; (80032c0 <my9291_led_rbg_init+0x120>)
 800322c:	f7fe fa00 	bl	8001630 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DCKI_PORT, DCKI_PIN, GPIO_PIN_RESET);
 8003230:	2200      	movs	r2, #0
 8003232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003236:	4822      	ldr	r0, [pc, #136]	; (80032c0 <my9291_led_rbg_init+0x120>)
 8003238:	f7fe f9fa 	bl	8001630 <HAL_GPIO_WritePin>


	_command.scatter = MY9291_CMD_SCATTER_APDM;
 800323c:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <my9291_led_rbg_init+0x124>)
 800323e:	7813      	ldrb	r3, [r2, #0]
 8003240:	f36f 0300 	bfc	r3, #0, #1
 8003244:	7013      	strb	r3, [r2, #0]
	_command.frequency = MY9291_CMD_FREQUENCY_DIVIDE_1;
 8003246:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <my9291_led_rbg_init+0x124>)
 8003248:	7813      	ldrb	r3, [r2, #0]
 800324a:	f36f 0342 	bfc	r3, #1, #2
 800324e:	7013      	strb	r3, [r2, #0]
	_command.bit_width = MY9291_CMD_BIT_WIDTH_8;
 8003250:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <my9291_led_rbg_init+0x124>)
 8003252:	7813      	ldrb	r3, [r2, #0]
 8003254:	f043 0318 	orr.w	r3, r3, #24
 8003258:	7013      	strb	r3, [r2, #0]
	_command.reaction = MY9291_CMD_REACTION_FAST;
 800325a:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <my9291_led_rbg_init+0x124>)
 800325c:	7813      	ldrb	r3, [r2, #0]
 800325e:	f36f 1345 	bfc	r3, #5, #1
 8003262:	7013      	strb	r3, [r2, #0]
	_command.one_shot = MY9291_CMD_ONE_SHOT_DISABLE;
 8003264:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <my9291_led_rbg_init+0x124>)
 8003266:	7813      	ldrb	r3, [r2, #0]
 8003268:	f36f 1386 	bfc	r3, #6, #1
 800326c:	7013      	strb	r3, [r2, #0]
	_command.resv =0;
 800326e:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <my9291_led_rbg_init+0x124>)
 8003270:	7813      	ldrb	r3, [r2, #0]
 8003272:	f36f 13c7 	bfc	r3, #7, #1
 8003276:	7013      	strb	r3, [r2, #0]

	if (channels == 4 || channels == 5) _channels = channels;
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	2b04      	cmp	r3, #4
 800327c:	d002      	beq.n	8003284 <my9291_led_rbg_init+0xe4>
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	2b05      	cmp	r3, #5
 8003282:	d102      	bne.n	800328a <my9291_led_rbg_init+0xea>
 8003284:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <my9291_led_rbg_init+0x128>)
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	7013      	strb	r3, [r2, #0]

	// Clear all duty register
	if (_channels == 4) {
 800328a:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <my9291_led_rbg_init+0x128>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b04      	cmp	r3, #4
 8003290:	d103      	bne.n	800329a <my9291_led_rbg_init+0xfa>
		dcki_pulse(32);
 8003292:	2020      	movs	r0, #32
 8003294:	f7ff fe46 	bl	8002f24 <dcki_pulse>
 8003298:	e002      	b.n	80032a0 <my9291_led_rbg_init+0x100>
	} else {
		dcki_pulse(64);
 800329a:	2040      	movs	r0, #64	; 0x40
 800329c:	f7ff fe42 	bl	8002f24 <dcki_pulse>
	}

	// Send init command
	set_cmd(_command);
 80032a0:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <my9291_led_rbg_init+0x124>)
 80032a2:	7818      	ldrb	r0, [r3, #0]
 80032a4:	f7ff fea8 	bl	8002ff8 <set_cmd>

#ifdef debug_rbg
	printf("[MY9291] Initialized \r\n");
 80032a8:	4808      	ldr	r0, [pc, #32]	; (80032cc <my9291_led_rbg_init+0x12c>)
 80032aa:	f000 ff43 	bl	8004134 <puts>
#endif

	setState(true);
 80032ae:	2001      	movs	r0, #1
 80032b0:	f7ff ff54 	bl	800315c <setState>
}
 80032b4:	bf00      	nop
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40010c00 	.word	0x40010c00
 80032c4:	20000608 	.word	0x20000608
 80032c8:	20000410 	.word	0x20000410
 80032cc:	08005fcc 	.word	0x08005fcc

080032d0 <iic_init>:

};


void iic_init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_IICInit = {0};
 80032d6:	f107 0308 	add.w	r3, r7, #8
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	605a      	str	r2, [r3, #4]
 80032e0:	609a      	str	r2, [r3, #8]
 80032e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  SCL_CLK_ENABLE();
 80032e4:	4b20      	ldr	r3, [pc, #128]	; (8003368 <iic_init+0x98>)
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <iic_init+0x98>)
 80032ea:	f043 0308 	orr.w	r3, r3, #8
 80032ee:	6193      	str	r3, [r2, #24]
 80032f0:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <iic_init+0x98>)
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
  SDA_CLK_ENABLE();
 80032fc:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <iic_init+0x98>)
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	4a19      	ldr	r2, [pc, #100]	; (8003368 <iic_init+0x98>)
 8003302:	f043 0308 	orr.w	r3, r3, #8
 8003306:	6193      	str	r3, [r2, #24]
 8003308:	4b17      	ldr	r3, [pc, #92]	; (8003368 <iic_init+0x98>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC7 PC8 PC9 */
  GPIO_IICInit.Pin = SCL_PIN;
 8003314:	2340      	movs	r3, #64	; 0x40
 8003316:	60bb      	str	r3, [r7, #8]
  GPIO_IICInit.Mode = GPIO_MODE_OUTPUT_PP;
 8003318:	2301      	movs	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
  GPIO_IICInit.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
  GPIO_IICInit.Speed = GPIO_SPEED_FREQ_LOW;
 8003320:	2302      	movs	r3, #2
 8003322:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SCL_PORT, &GPIO_IICInit);
 8003324:	f107 0308 	add.w	r3, r7, #8
 8003328:	4619      	mov	r1, r3
 800332a:	4810      	ldr	r0, [pc, #64]	; (800336c <iic_init+0x9c>)
 800332c:	f7fd ff4a 	bl	80011c4 <HAL_GPIO_Init>

  GPIO_IICInit.Pin = SDA_PIN;
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	60bb      	str	r3, [r7, #8]
  GPIO_IICInit.Mode = GPIO_MODE_OUTPUT_PP;
 8003334:	2301      	movs	r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
  GPIO_IICInit.Pull = GPIO_NOPULL;
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
  GPIO_IICInit.Speed = GPIO_SPEED_FREQ_LOW;
 800333c:	2302      	movs	r3, #2
 800333e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDA_PORT, &GPIO_IICInit);
 8003340:	f107 0308 	add.w	r3, r7, #8
 8003344:	4619      	mov	r1, r3
 8003346:	4809      	ldr	r0, [pc, #36]	; (800336c <iic_init+0x9c>)
 8003348:	f7fd ff3c 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 800334c:	2201      	movs	r2, #1
 800334e:	2140      	movs	r1, #64	; 0x40
 8003350:	4806      	ldr	r0, [pc, #24]	; (800336c <iic_init+0x9c>)
 8003352:	f7fe f96d 	bl	8001630 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8003356:	2201      	movs	r2, #1
 8003358:	2180      	movs	r1, #128	; 0x80
 800335a:	4804      	ldr	r0, [pc, #16]	; (800336c <iic_init+0x9c>)
 800335c:	f7fe f968 	bl	8001630 <HAL_GPIO_WritePin>
}
 8003360:	bf00      	nop
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	40010c00 	.word	0x40010c00

08003370 <iic_start>:


void iic_start(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
	SCL = 1;
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <iic_start+0x24>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]
	SDA = 1;
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <iic_start+0x28>)
 800337c:	2201      	movs	r2, #1
 800337e:	601a      	str	r2, [r3, #0]
	SDA = 0;
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <iic_start+0x28>)
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
	SCL = 0;
 8003386:	4b03      	ldr	r3, [pc, #12]	; (8003394 <iic_start+0x24>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	42218198 	.word	0x42218198
 8003398:	4221819c 	.word	0x4221819c

0800339c <iic_stop>:


void iic_stop(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
	SCL = 1;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <iic_stop+0x20>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
	SDA = 0;
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <iic_stop+0x24>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
	SDA = 1;
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <iic_stop+0x24>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
}
 80033b2:	bf00      	nop
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	42218198 	.word	0x42218198
 80033c0:	4221819c 	.word	0x4221819c

080033c4 <iic_acknowledge>:

void iic_acknowledge(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
	SCL = 1;
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <iic_acknowledge+0x18>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
	SCL = 0;
 80033ce:	4b03      	ldr	r3, [pc, #12]	; (80033dc <iic_acknowledge+0x18>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	42218198 	.word	0x42218198

080033e0 <iic_write_byte>:

void iic_write_byte(uint8_t dat)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
	int i;

	for(i =0 ; i < 8; i++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	e016      	b.n	800341e <iic_write_byte+0x3e>
	{
		if(dat&0x80)
 80033f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	da03      	bge.n	8003400 <iic_write_byte+0x20>
		{
			SDA = HIGH;
 80033f8:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <iic_write_byte+0x50>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e002      	b.n	8003406 <iic_write_byte+0x26>
		}
		else
		{
			SDA = LOW;
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <iic_write_byte+0x50>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
		}
		SCL = HIGH;
 8003406:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <iic_write_byte+0x54>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]
		SCL = LOW;
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <iic_write_byte+0x54>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
		dat = dat << 1;
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	71fb      	strb	r3, [r7, #7]
	for(i =0 ; i < 8; i++)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3301      	adds	r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b07      	cmp	r3, #7
 8003422:	dde5      	ble.n	80033f0 <iic_write_byte+0x10>
	}
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	4221819c 	.word	0x4221819c
 8003434:	42218198 	.word	0x42218198

08003438 <oled_write_cmd>:

void oled_write_cmd(uint8_t	dat)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
	iic_start();
 8003442:	f7ff ff95 	bl	8003370 <iic_start>
	iic_write_byte(ADDR_OLED);
 8003446:	2078      	movs	r0, #120	; 0x78
 8003448:	f7ff ffca 	bl	80033e0 <iic_write_byte>
	iic_acknowledge();
 800344c:	f7ff ffba 	bl	80033c4 <iic_acknowledge>
	iic_write_byte(WRITE_CMD);
 8003450:	2000      	movs	r0, #0
 8003452:	f7ff ffc5 	bl	80033e0 <iic_write_byte>
	iic_acknowledge();
 8003456:	f7ff ffb5 	bl	80033c4 <iic_acknowledge>
	iic_write_byte(dat);
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ffbf 	bl	80033e0 <iic_write_byte>
	iic_acknowledge();
 8003462:	f7ff ffaf 	bl	80033c4 <iic_acknowledge>
	iic_stop();
 8003466:	f7ff ff99 	bl	800339c <iic_stop>
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <oled_write_dat>:

void oled_write_dat(uint8_t	dat)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	4603      	mov	r3, r0
 800347a:	71fb      	strb	r3, [r7, #7]
	iic_start();
 800347c:	f7ff ff78 	bl	8003370 <iic_start>
	iic_write_byte(ADDR_OLED);
 8003480:	2078      	movs	r0, #120	; 0x78
 8003482:	f7ff ffad 	bl	80033e0 <iic_write_byte>
	iic_acknowledge();
 8003486:	f7ff ff9d 	bl	80033c4 <iic_acknowledge>
	iic_write_byte(WRITE_DATA);
 800348a:	2040      	movs	r0, #64	; 0x40
 800348c:	f7ff ffa8 	bl	80033e0 <iic_write_byte>
	iic_acknowledge();
 8003490:	f7ff ff98 	bl	80033c4 <iic_acknowledge>
	iic_write_byte(dat);
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff ffa2 	bl	80033e0 <iic_write_byte>
	iic_acknowledge();
 800349c:	f7ff ff92 	bl	80033c4 <iic_acknowledge>
	iic_stop();
 80034a0:	f7ff ff7c 	bl	800339c <iic_stop>
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <oled_init>:


void oled_init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0

	/* Power up VDD
	(RES# as Low State) */
	iic_init();
 80034b0:	f7ff ff0e 	bl	80032d0 <iic_init>

	/* Power Stabilized
	(Delay Recommended) */
	/* Set RES# as High
	(3μs Delay Minimum) */
	HAL_Delay(100);
 80034b4:	2064      	movs	r0, #100	; 0x64
 80034b6:	f7fd fb59 	bl	8000b6c <HAL_Delay>
//  oled_write_cmd(0x30);//
//  oled_write_cmd(0x8D);//set charge pump enable
//  oled_write_cmd(0x14);//
//  oled_write_cmd(0xAF);//--turn on oled panel

	oled_write_cmd(0xAE); /*display off*/
 80034ba:	20ae      	movs	r0, #174	; 0xae
 80034bc:	f7ff ffbc 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0x00); /*set lower column address*/
 80034c0:	2000      	movs	r0, #0
 80034c2:	f7ff ffb9 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0x10); /*set higher column address*/
 80034c6:	2010      	movs	r0, #16
 80034c8:	f7ff ffb6 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0x40); /*set display start line*/
 80034cc:	2040      	movs	r0, #64	; 0x40
 80034ce:	f7ff ffb3 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0xB0); /*set page address*/
 80034d2:	20b0      	movs	r0, #176	; 0xb0
 80034d4:	f7ff ffb0 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0x81); /*contract control*/
 80034d8:	2081      	movs	r0, #129	; 0x81
 80034da:	f7ff ffad 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0x66); /*128*/
 80034de:	2066      	movs	r0, #102	; 0x66
 80034e0:	f7ff ffaa 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0xA1); /*set segment remap*/
 80034e4:	20a1      	movs	r0, #161	; 0xa1
 80034e6:	f7ff ffa7 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0xA6); /*normal / reverse*/
 80034ea:	20a6      	movs	r0, #166	; 0xa6
 80034ec:	f7ff ffa4 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0xA8); /*multiplex ratio*/
 80034f0:	20a8      	movs	r0, #168	; 0xa8
 80034f2:	f7ff ffa1 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0x3F); /*duty = 1/64*/
 80034f6:	203f      	movs	r0, #63	; 0x3f
 80034f8:	f7ff ff9e 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0xC8); /*Com scan direction*/
 80034fc:	20c8      	movs	r0, #200	; 0xc8
 80034fe:	f7ff ff9b 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0xD3); /*set display offset*/
 8003502:	20d3      	movs	r0, #211	; 0xd3
 8003504:	f7ff ff98 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0x00);
 8003508:	2000      	movs	r0, #0
 800350a:	f7ff ff95 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0xD5); /*set osc division*/
 800350e:	20d5      	movs	r0, #213	; 0xd5
 8003510:	f7ff ff92 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0x80);
 8003514:	2080      	movs	r0, #128	; 0x80
 8003516:	f7ff ff8f 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0xD9); /*set pre-charge period*/
 800351a:	20d9      	movs	r0, #217	; 0xd9
 800351c:	f7ff ff8c 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0x1f);
 8003520:	201f      	movs	r0, #31
 8003522:	f7ff ff89 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0xDA); /*set COM pins*/
 8003526:	20da      	movs	r0, #218	; 0xda
 8003528:	f7ff ff86 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0x12);
 800352c:	2012      	movs	r0, #18
 800352e:	f7ff ff83 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0xdb); /*set vcomh*/
 8003532:	20db      	movs	r0, #219	; 0xdb
 8003534:	f7ff ff80 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0x30);
 8003538:	2030      	movs	r0, #48	; 0x30
 800353a:	f7ff ff7d 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0x8d); /*set charge pump enable*/
 800353e:	208d      	movs	r0, #141	; 0x8d
 8003540:	f7ff ff7a 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0x14);
 8003544:	2014      	movs	r0, #20
 8003546:	f7ff ff77 	bl	8003438 <oled_write_cmd>
	oled_write_cmd(0xAF); /*display ON*/
 800354a:	20af      	movs	r0, #175	; 0xaf
 800354c:	f7ff ff74 	bl	8003438 <oled_write_cmd>
  HAL_Delay(100);
 8003550:	2064      	movs	r0, #100	; 0x64
 8003552:	f7fd fb0b 	bl	8000b6c <HAL_Delay>
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}

0800355a <oled_set_pos>:


void oled_set_pos(uint8_t x, uint8_t y)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	460a      	mov	r2, r1
 8003564:	71fb      	strb	r3, [r7, #7]
 8003566:	4613      	mov	r3, r2
 8003568:	71bb      	strb	r3, [r7, #6]
	/* Set the page start address of the target display location by command B0h to B7h. */
	oled_write_cmd(0xb0+y);
 800356a:	79bb      	ldrb	r3, [r7, #6]
 800356c:	3b50      	subs	r3, #80	; 0x50
 800356e:	b2db      	uxtb	r3, r3
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff61 	bl	8003438 <oled_write_cmd>

	/* Set the upper start column address of pointer by command 10h~1Fh. */
	oled_write_cmd(((x&0xf0) >> 4)|0x10);
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f043 0310 	orr.w	r3, r3, #16
 8003580:	b2db      	uxtb	r3, r3
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff ff58 	bl	8003438 <oled_write_cmd>

	/* Set the lower start column address of pointer by command 00h~0Fh.. */
	oled_write_cmd(x&0x0f);
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	b2db      	uxtb	r3, r3
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff51 	bl	8003438 <oled_write_cmd>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <oled_clscr>:

void oled_clscr(void)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
	uint8_t i,n;

	for ( i =0 ; i < 8; i++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	71fb      	strb	r3, [r7, #7]
 80035a8:	e01b      	b.n	80035e2 <oled_clscr+0x44>
	{
		oled_write_cmd(0xb0+i);
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	3b50      	subs	r3, #80	; 0x50
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff41 	bl	8003438 <oled_write_cmd>
		oled_write_cmd(0x00);
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7ff ff3e 	bl	8003438 <oled_write_cmd>
		oled_write_cmd(0x10);
 80035bc:	2010      	movs	r0, #16
 80035be:	f7ff ff3b 	bl	8003438 <oled_write_cmd>
		for(n =0; n < 128; n++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	71bb      	strb	r3, [r7, #6]
 80035c6:	e005      	b.n	80035d4 <oled_clscr+0x36>
		{
			oled_write_dat(0x00);
 80035c8:	2000      	movs	r0, #0
 80035ca:	f7ff ff52 	bl	8003472 <oled_write_dat>
		for(n =0; n < 128; n++)
 80035ce:	79bb      	ldrb	r3, [r7, #6]
 80035d0:	3301      	adds	r3, #1
 80035d2:	71bb      	strb	r3, [r7, #6]
 80035d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	daf5      	bge.n	80035c8 <oled_clscr+0x2a>
	for ( i =0 ; i < 8; i++)
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	3301      	adds	r3, #1
 80035e0:	71fb      	strb	r3, [r7, #7]
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	2b07      	cmp	r3, #7
 80035e6:	d9e0      	bls.n	80035aa <oled_clscr+0xc>
		}
	}
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <oled_DrawBMP>:
    j++;
  }
}

void oled_DrawBMP(uint8_t x0, uint8_t y0,uint8_t x1, uint8_t y1,uint8_t *bmp)
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4604      	mov	r4, r0
 80035f8:	4608      	mov	r0, r1
 80035fa:	4611      	mov	r1, r2
 80035fc:	461a      	mov	r2, r3
 80035fe:	4623      	mov	r3, r4
 8003600:	71fb      	strb	r3, [r7, #7]
 8003602:	4603      	mov	r3, r0
 8003604:	71bb      	strb	r3, [r7, #6]
 8003606:	460b      	mov	r3, r1
 8003608:	717b      	strb	r3, [r7, #5]
 800360a:	4613      	mov	r3, r2
 800360c:	713b      	strb	r3, [r7, #4]
  unsigned int j=0;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
  uint8_t x,y;

  if(y1%8==0) y=y1/8;
 8003612:	793b      	ldrb	r3, [r7, #4]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <oled_DrawBMP+0x36>
 800361e:	793b      	ldrb	r3, [r7, #4]
 8003620:	08db      	lsrs	r3, r3, #3
 8003622:	72bb      	strb	r3, [r7, #10]
 8003624:	e004      	b.n	8003630 <oled_DrawBMP+0x40>
  else y=y1/8+1;
 8003626:	793b      	ldrb	r3, [r7, #4]
 8003628:	08db      	lsrs	r3, r3, #3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	3301      	adds	r3, #1
 800362e:	72bb      	strb	r3, [r7, #10]
  for(y=y0;y<y1;y++)
 8003630:	79bb      	ldrb	r3, [r7, #6]
 8003632:	72bb      	strb	r3, [r7, #10]
 8003634:	e01b      	b.n	800366e <oled_DrawBMP+0x7e>
  {
	  oled_set_pos(x0,y);
 8003636:	7aba      	ldrb	r2, [r7, #10]
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff ff8c 	bl	800355a <oled_set_pos>
    for(x=x0;x<x1;x++)
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	72fb      	strb	r3, [r7, #11]
 8003646:	e00b      	b.n	8003660 <oled_DrawBMP+0x70>
    {
    	oled_write_dat(bmp[j++]);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	60fa      	str	r2, [r7, #12]
 800364e:	6a3a      	ldr	r2, [r7, #32]
 8003650:	4413      	add	r3, r2
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff0c 	bl	8003472 <oled_write_dat>
    for(x=x0;x<x1;x++)
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	3301      	adds	r3, #1
 800365e:	72fb      	strb	r3, [r7, #11]
 8003660:	7afa      	ldrb	r2, [r7, #11]
 8003662:	797b      	ldrb	r3, [r7, #5]
 8003664:	429a      	cmp	r2, r3
 8003666:	d3ef      	bcc.n	8003648 <oled_DrawBMP+0x58>
  for(y=y0;y<y1;y++)
 8003668:	7abb      	ldrb	r3, [r7, #10]
 800366a:	3301      	adds	r3, #1
 800366c:	72bb      	strb	r3, [r7, #10]
 800366e:	7aba      	ldrb	r2, [r7, #10]
 8003670:	793b      	ldrb	r3, [r7, #4]
 8003672:	429a      	cmp	r2, r3
 8003674:	d3df      	bcc.n	8003636 <oled_DrawBMP+0x46>
    }
  }
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	bd90      	pop	{r4, r7, pc}
	...

08003680 <relay_init>:
#include "relay.h"


void relay_init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_RelayInit = {0};
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	60da      	str	r2, [r3, #12]

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003692:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <relay_init+0x74>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	4a12      	ldr	r2, [pc, #72]	; (80036f4 <relay_init+0x74>)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	6053      	str	r3, [r2, #4]

  /* GPIO Ports Clock Enable */
  RELAY_CLK_ENABLE();
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <relay_init+0x78>)
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	4a11      	ldr	r2, [pc, #68]	; (80036f8 <relay_init+0x78>)
 80036b4:	f043 0308 	orr.w	r3, r3, #8
 80036b8:	6193      	str	r3, [r2, #24]
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <relay_init+0x78>)
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_RESET);
 80036c6:	2200      	movs	r2, #0
 80036c8:	2108      	movs	r1, #8
 80036ca:	480c      	ldr	r0, [pc, #48]	; (80036fc <relay_init+0x7c>)
 80036cc:	f7fd ffb0 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB3*/
  GPIO_RelayInit.Pin = RELAY_PIN;
 80036d0:	2308      	movs	r3, #8
 80036d2:	607b      	str	r3, [r7, #4]
  GPIO_RelayInit.Mode = GPIO_MODE_OUTPUT_PP;
 80036d4:	2301      	movs	r3, #1
 80036d6:	60bb      	str	r3, [r7, #8]
  GPIO_RelayInit.Pull = GPIO_PULLDOWN;
 80036d8:	2302      	movs	r3, #2
 80036da:	60fb      	str	r3, [r7, #12]
  GPIO_RelayInit.Speed = GPIO_SPEED_FREQ_LOW;
 80036dc:	2302      	movs	r3, #2
 80036de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RELAY_PORT, &GPIO_RelayInit);
 80036e0:	1d3b      	adds	r3, r7, #4
 80036e2:	4619      	mov	r1, r3
 80036e4:	4805      	ldr	r0, [pc, #20]	; (80036fc <relay_init+0x7c>)
 80036e6:	f7fd fd6d 	bl	80011c4 <HAL_GPIO_Init>
}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40010c00 	.word	0x40010c00

08003700 <TIM3_IRQHandler>:
    Error_Handler();
  }
}

void TIMx_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
	  /* TIM Update event */
	  if (__HAL_TIM_GET_FLAG(&TimHandle, TIM_FLAG_UPDATE) != RESET)
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <TIM3_IRQHandler+0x40>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b01      	cmp	r3, #1
 8003710:	d113      	bne.n	800373a <TIM3_IRQHandler+0x3a>
	  {
	    if (__HAL_TIM_GET_IT_SOURCE(&TimHandle, TIM_IT_UPDATE) != RESET)
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <TIM3_IRQHandler+0x40>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b01      	cmp	r3, #1
 800371e:	d10c      	bne.n	800373a <TIM3_IRQHandler+0x3a>
	    {
	      __HAL_TIM_CLEAR_IT(&TimHandle, TIM_IT_UPDATE);
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <TIM3_IRQHandler+0x40>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0201 	mvn.w	r2, #1
 8003728:	611a      	str	r2, [r3, #16]

	    	  timer++;
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <TIM3_IRQHandler+0x44>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3301      	adds	r3, #1
 8003730:	4a04      	ldr	r2, [pc, #16]	; (8003744 <TIM3_IRQHandler+0x44>)
 8003732:	6013      	str	r3, [r2, #0]
	          HAL_TIM_PeriodElapsedCallback(&TimHandle);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <TIM3_IRQHandler+0x40>)
 8003736:	f7fe fbc7 	bl	8001ec8 <HAL_TIM_PeriodElapsedCallback>
	    }
	  }
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	200006a8 	.word	0x200006a8
 8003744:	20000620 	.word	0x20000620

08003748 <__errno>:
 8003748:	4b01      	ldr	r3, [pc, #4]	; (8003750 <__errno+0x8>)
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000414 	.word	0x20000414

08003754 <__libc_init_array>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	2500      	movs	r5, #0
 8003758:	4e0c      	ldr	r6, [pc, #48]	; (800378c <__libc_init_array+0x38>)
 800375a:	4c0d      	ldr	r4, [pc, #52]	; (8003790 <__libc_init_array+0x3c>)
 800375c:	1ba4      	subs	r4, r4, r6
 800375e:	10a4      	asrs	r4, r4, #2
 8003760:	42a5      	cmp	r5, r4
 8003762:	d109      	bne.n	8003778 <__libc_init_array+0x24>
 8003764:	f002 fbaa 	bl	8005ebc <_init>
 8003768:	2500      	movs	r5, #0
 800376a:	4e0a      	ldr	r6, [pc, #40]	; (8003794 <__libc_init_array+0x40>)
 800376c:	4c0a      	ldr	r4, [pc, #40]	; (8003798 <__libc_init_array+0x44>)
 800376e:	1ba4      	subs	r4, r4, r6
 8003770:	10a4      	asrs	r4, r4, #2
 8003772:	42a5      	cmp	r5, r4
 8003774:	d105      	bne.n	8003782 <__libc_init_array+0x2e>
 8003776:	bd70      	pop	{r4, r5, r6, pc}
 8003778:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800377c:	4798      	blx	r3
 800377e:	3501      	adds	r5, #1
 8003780:	e7ee      	b.n	8003760 <__libc_init_array+0xc>
 8003782:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003786:	4798      	blx	r3
 8003788:	3501      	adds	r5, #1
 800378a:	e7f2      	b.n	8003772 <__libc_init_array+0x1e>
 800378c:	080062c0 	.word	0x080062c0
 8003790:	080062c0 	.word	0x080062c0
 8003794:	080062c0 	.word	0x080062c0
 8003798:	080062c4 	.word	0x080062c4

0800379c <memset>:
 800379c:	4603      	mov	r3, r0
 800379e:	4402      	add	r2, r0
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d100      	bne.n	80037a6 <memset+0xa>
 80037a4:	4770      	bx	lr
 80037a6:	f803 1b01 	strb.w	r1, [r3], #1
 80037aa:	e7f9      	b.n	80037a0 <memset+0x4>

080037ac <__cvt>:
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037b2:	461e      	mov	r6, r3
 80037b4:	bfbb      	ittet	lt
 80037b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80037ba:	461e      	movlt	r6, r3
 80037bc:	2300      	movge	r3, #0
 80037be:	232d      	movlt	r3, #45	; 0x2d
 80037c0:	b088      	sub	sp, #32
 80037c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80037c4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80037c8:	f027 0720 	bic.w	r7, r7, #32
 80037cc:	2f46      	cmp	r7, #70	; 0x46
 80037ce:	4614      	mov	r4, r2
 80037d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80037d2:	700b      	strb	r3, [r1, #0]
 80037d4:	d004      	beq.n	80037e0 <__cvt+0x34>
 80037d6:	2f45      	cmp	r7, #69	; 0x45
 80037d8:	d100      	bne.n	80037dc <__cvt+0x30>
 80037da:	3501      	adds	r5, #1
 80037dc:	2302      	movs	r3, #2
 80037de:	e000      	b.n	80037e2 <__cvt+0x36>
 80037e0:	2303      	movs	r3, #3
 80037e2:	aa07      	add	r2, sp, #28
 80037e4:	9204      	str	r2, [sp, #16]
 80037e6:	aa06      	add	r2, sp, #24
 80037e8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80037ec:	e9cd 3500 	strd	r3, r5, [sp]
 80037f0:	4622      	mov	r2, r4
 80037f2:	4633      	mov	r3, r6
 80037f4:	f000 fdf4 	bl	80043e0 <_dtoa_r>
 80037f8:	2f47      	cmp	r7, #71	; 0x47
 80037fa:	4680      	mov	r8, r0
 80037fc:	d102      	bne.n	8003804 <__cvt+0x58>
 80037fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003800:	07db      	lsls	r3, r3, #31
 8003802:	d526      	bpl.n	8003852 <__cvt+0xa6>
 8003804:	2f46      	cmp	r7, #70	; 0x46
 8003806:	eb08 0905 	add.w	r9, r8, r5
 800380a:	d111      	bne.n	8003830 <__cvt+0x84>
 800380c:	f898 3000 	ldrb.w	r3, [r8]
 8003810:	2b30      	cmp	r3, #48	; 0x30
 8003812:	d10a      	bne.n	800382a <__cvt+0x7e>
 8003814:	2200      	movs	r2, #0
 8003816:	2300      	movs	r3, #0
 8003818:	4620      	mov	r0, r4
 800381a:	4631      	mov	r1, r6
 800381c:	f7fd f8d4 	bl	80009c8 <__aeabi_dcmpeq>
 8003820:	b918      	cbnz	r0, 800382a <__cvt+0x7e>
 8003822:	f1c5 0501 	rsb	r5, r5, #1
 8003826:	f8ca 5000 	str.w	r5, [sl]
 800382a:	f8da 3000 	ldr.w	r3, [sl]
 800382e:	4499      	add	r9, r3
 8003830:	2200      	movs	r2, #0
 8003832:	2300      	movs	r3, #0
 8003834:	4620      	mov	r0, r4
 8003836:	4631      	mov	r1, r6
 8003838:	f7fd f8c6 	bl	80009c8 <__aeabi_dcmpeq>
 800383c:	b938      	cbnz	r0, 800384e <__cvt+0xa2>
 800383e:	2230      	movs	r2, #48	; 0x30
 8003840:	9b07      	ldr	r3, [sp, #28]
 8003842:	454b      	cmp	r3, r9
 8003844:	d205      	bcs.n	8003852 <__cvt+0xa6>
 8003846:	1c59      	adds	r1, r3, #1
 8003848:	9107      	str	r1, [sp, #28]
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	e7f8      	b.n	8003840 <__cvt+0x94>
 800384e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003852:	4640      	mov	r0, r8
 8003854:	9b07      	ldr	r3, [sp, #28]
 8003856:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003858:	eba3 0308 	sub.w	r3, r3, r8
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	b008      	add	sp, #32
 8003860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003864 <__exponent>:
 8003864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003866:	2900      	cmp	r1, #0
 8003868:	bfb4      	ite	lt
 800386a:	232d      	movlt	r3, #45	; 0x2d
 800386c:	232b      	movge	r3, #43	; 0x2b
 800386e:	4604      	mov	r4, r0
 8003870:	bfb8      	it	lt
 8003872:	4249      	neglt	r1, r1
 8003874:	2909      	cmp	r1, #9
 8003876:	f804 2b02 	strb.w	r2, [r4], #2
 800387a:	7043      	strb	r3, [r0, #1]
 800387c:	dd21      	ble.n	80038c2 <__exponent+0x5e>
 800387e:	f10d 0307 	add.w	r3, sp, #7
 8003882:	461f      	mov	r7, r3
 8003884:	260a      	movs	r6, #10
 8003886:	fb91 f5f6 	sdiv	r5, r1, r6
 800388a:	fb06 1115 	mls	r1, r6, r5, r1
 800388e:	2d09      	cmp	r5, #9
 8003890:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003894:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003898:	f103 32ff 	add.w	r2, r3, #4294967295
 800389c:	4629      	mov	r1, r5
 800389e:	dc09      	bgt.n	80038b4 <__exponent+0x50>
 80038a0:	3130      	adds	r1, #48	; 0x30
 80038a2:	3b02      	subs	r3, #2
 80038a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80038a8:	42bb      	cmp	r3, r7
 80038aa:	4622      	mov	r2, r4
 80038ac:	d304      	bcc.n	80038b8 <__exponent+0x54>
 80038ae:	1a10      	subs	r0, r2, r0
 80038b0:	b003      	add	sp, #12
 80038b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b4:	4613      	mov	r3, r2
 80038b6:	e7e6      	b.n	8003886 <__exponent+0x22>
 80038b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038bc:	f804 2b01 	strb.w	r2, [r4], #1
 80038c0:	e7f2      	b.n	80038a8 <__exponent+0x44>
 80038c2:	2330      	movs	r3, #48	; 0x30
 80038c4:	4419      	add	r1, r3
 80038c6:	7083      	strb	r3, [r0, #2]
 80038c8:	1d02      	adds	r2, r0, #4
 80038ca:	70c1      	strb	r1, [r0, #3]
 80038cc:	e7ef      	b.n	80038ae <__exponent+0x4a>
	...

080038d0 <_printf_float>:
 80038d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d4:	b091      	sub	sp, #68	; 0x44
 80038d6:	460c      	mov	r4, r1
 80038d8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80038da:	4693      	mov	fp, r2
 80038dc:	461e      	mov	r6, r3
 80038de:	4605      	mov	r5, r0
 80038e0:	f001 fcac 	bl	800523c <_localeconv_r>
 80038e4:	6803      	ldr	r3, [r0, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	9309      	str	r3, [sp, #36]	; 0x24
 80038ea:	f7fc fc41 	bl	8000170 <strlen>
 80038ee:	2300      	movs	r3, #0
 80038f0:	930e      	str	r3, [sp, #56]	; 0x38
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	900a      	str	r0, [sp, #40]	; 0x28
 80038f6:	3307      	adds	r3, #7
 80038f8:	f023 0307 	bic.w	r3, r3, #7
 80038fc:	f103 0208 	add.w	r2, r3, #8
 8003900:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003904:	f8d4 a000 	ldr.w	sl, [r4]
 8003908:	603a      	str	r2, [r7, #0]
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003912:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003916:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800391a:	930b      	str	r3, [sp, #44]	; 0x2c
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
 8003920:	4ba6      	ldr	r3, [pc, #664]	; (8003bbc <_printf_float+0x2ec>)
 8003922:	4638      	mov	r0, r7
 8003924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003926:	f7fd f881 	bl	8000a2c <__aeabi_dcmpun>
 800392a:	bb68      	cbnz	r0, 8003988 <_printf_float+0xb8>
 800392c:	f04f 32ff 	mov.w	r2, #4294967295
 8003930:	4ba2      	ldr	r3, [pc, #648]	; (8003bbc <_printf_float+0x2ec>)
 8003932:	4638      	mov	r0, r7
 8003934:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003936:	f7fd f85b 	bl	80009f0 <__aeabi_dcmple>
 800393a:	bb28      	cbnz	r0, 8003988 <_printf_float+0xb8>
 800393c:	2200      	movs	r2, #0
 800393e:	2300      	movs	r3, #0
 8003940:	4638      	mov	r0, r7
 8003942:	4649      	mov	r1, r9
 8003944:	f7fd f84a 	bl	80009dc <__aeabi_dcmplt>
 8003948:	b110      	cbz	r0, 8003950 <_printf_float+0x80>
 800394a:	232d      	movs	r3, #45	; 0x2d
 800394c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003950:	4f9b      	ldr	r7, [pc, #620]	; (8003bc0 <_printf_float+0x2f0>)
 8003952:	4b9c      	ldr	r3, [pc, #624]	; (8003bc4 <_printf_float+0x2f4>)
 8003954:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003958:	bf98      	it	ls
 800395a:	461f      	movls	r7, r3
 800395c:	2303      	movs	r3, #3
 800395e:	f04f 0900 	mov.w	r9, #0
 8003962:	6123      	str	r3, [r4, #16]
 8003964:	f02a 0304 	bic.w	r3, sl, #4
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	9600      	str	r6, [sp, #0]
 800396c:	465b      	mov	r3, fp
 800396e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003970:	4621      	mov	r1, r4
 8003972:	4628      	mov	r0, r5
 8003974:	f000 f9e2 	bl	8003d3c <_printf_common>
 8003978:	3001      	adds	r0, #1
 800397a:	f040 8090 	bne.w	8003a9e <_printf_float+0x1ce>
 800397e:	f04f 30ff 	mov.w	r0, #4294967295
 8003982:	b011      	add	sp, #68	; 0x44
 8003984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003988:	463a      	mov	r2, r7
 800398a:	464b      	mov	r3, r9
 800398c:	4638      	mov	r0, r7
 800398e:	4649      	mov	r1, r9
 8003990:	f7fd f84c 	bl	8000a2c <__aeabi_dcmpun>
 8003994:	b110      	cbz	r0, 800399c <_printf_float+0xcc>
 8003996:	4f8c      	ldr	r7, [pc, #560]	; (8003bc8 <_printf_float+0x2f8>)
 8003998:	4b8c      	ldr	r3, [pc, #560]	; (8003bcc <_printf_float+0x2fc>)
 800399a:	e7db      	b.n	8003954 <_printf_float+0x84>
 800399c:	6863      	ldr	r3, [r4, #4]
 800399e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80039a2:	1c59      	adds	r1, r3, #1
 80039a4:	a80d      	add	r0, sp, #52	; 0x34
 80039a6:	a90e      	add	r1, sp, #56	; 0x38
 80039a8:	d140      	bne.n	8003a2c <_printf_float+0x15c>
 80039aa:	2306      	movs	r3, #6
 80039ac:	6063      	str	r3, [r4, #4]
 80039ae:	f04f 0c00 	mov.w	ip, #0
 80039b2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80039b6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80039ba:	6863      	ldr	r3, [r4, #4]
 80039bc:	6022      	str	r2, [r4, #0]
 80039be:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	463a      	mov	r2, r7
 80039c6:	464b      	mov	r3, r9
 80039c8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80039cc:	4628      	mov	r0, r5
 80039ce:	f7ff feed 	bl	80037ac <__cvt>
 80039d2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80039d6:	2b47      	cmp	r3, #71	; 0x47
 80039d8:	4607      	mov	r7, r0
 80039da:	d109      	bne.n	80039f0 <_printf_float+0x120>
 80039dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039de:	1cd8      	adds	r0, r3, #3
 80039e0:	db02      	blt.n	80039e8 <_printf_float+0x118>
 80039e2:	6862      	ldr	r2, [r4, #4]
 80039e4:	4293      	cmp	r3, r2
 80039e6:	dd47      	ble.n	8003a78 <_printf_float+0x1a8>
 80039e8:	f1a8 0802 	sub.w	r8, r8, #2
 80039ec:	fa5f f888 	uxtb.w	r8, r8
 80039f0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80039f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80039f6:	d824      	bhi.n	8003a42 <_printf_float+0x172>
 80039f8:	3901      	subs	r1, #1
 80039fa:	4642      	mov	r2, r8
 80039fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a00:	910d      	str	r1, [sp, #52]	; 0x34
 8003a02:	f7ff ff2f 	bl	8003864 <__exponent>
 8003a06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a08:	4681      	mov	r9, r0
 8003a0a:	1813      	adds	r3, r2, r0
 8003a0c:	2a01      	cmp	r2, #1
 8003a0e:	6123      	str	r3, [r4, #16]
 8003a10:	dc02      	bgt.n	8003a18 <_printf_float+0x148>
 8003a12:	6822      	ldr	r2, [r4, #0]
 8003a14:	07d1      	lsls	r1, r2, #31
 8003a16:	d501      	bpl.n	8003a1c <_printf_float+0x14c>
 8003a18:	3301      	adds	r3, #1
 8003a1a:	6123      	str	r3, [r4, #16]
 8003a1c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0a2      	beq.n	800396a <_printf_float+0x9a>
 8003a24:	232d      	movs	r3, #45	; 0x2d
 8003a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a2a:	e79e      	b.n	800396a <_printf_float+0x9a>
 8003a2c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003a30:	f000 816e 	beq.w	8003d10 <_printf_float+0x440>
 8003a34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a38:	d1b9      	bne.n	80039ae <_printf_float+0xde>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1b7      	bne.n	80039ae <_printf_float+0xde>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e7b4      	b.n	80039ac <_printf_float+0xdc>
 8003a42:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003a46:	d119      	bne.n	8003a7c <_printf_float+0x1ac>
 8003a48:	2900      	cmp	r1, #0
 8003a4a:	6863      	ldr	r3, [r4, #4]
 8003a4c:	dd0c      	ble.n	8003a68 <_printf_float+0x198>
 8003a4e:	6121      	str	r1, [r4, #16]
 8003a50:	b913      	cbnz	r3, 8003a58 <_printf_float+0x188>
 8003a52:	6822      	ldr	r2, [r4, #0]
 8003a54:	07d2      	lsls	r2, r2, #31
 8003a56:	d502      	bpl.n	8003a5e <_printf_float+0x18e>
 8003a58:	3301      	adds	r3, #1
 8003a5a:	440b      	add	r3, r1
 8003a5c:	6123      	str	r3, [r4, #16]
 8003a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a60:	f04f 0900 	mov.w	r9, #0
 8003a64:	65a3      	str	r3, [r4, #88]	; 0x58
 8003a66:	e7d9      	b.n	8003a1c <_printf_float+0x14c>
 8003a68:	b913      	cbnz	r3, 8003a70 <_printf_float+0x1a0>
 8003a6a:	6822      	ldr	r2, [r4, #0]
 8003a6c:	07d0      	lsls	r0, r2, #31
 8003a6e:	d501      	bpl.n	8003a74 <_printf_float+0x1a4>
 8003a70:	3302      	adds	r3, #2
 8003a72:	e7f3      	b.n	8003a5c <_printf_float+0x18c>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e7f1      	b.n	8003a5c <_printf_float+0x18c>
 8003a78:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003a7c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003a80:	4293      	cmp	r3, r2
 8003a82:	db05      	blt.n	8003a90 <_printf_float+0x1c0>
 8003a84:	6822      	ldr	r2, [r4, #0]
 8003a86:	6123      	str	r3, [r4, #16]
 8003a88:	07d1      	lsls	r1, r2, #31
 8003a8a:	d5e8      	bpl.n	8003a5e <_printf_float+0x18e>
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	e7e5      	b.n	8003a5c <_printf_float+0x18c>
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bfcc      	ite	gt
 8003a94:	2301      	movgt	r3, #1
 8003a96:	f1c3 0302 	rsble	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	e7de      	b.n	8003a5c <_printf_float+0x18c>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	055a      	lsls	r2, r3, #21
 8003aa2:	d407      	bmi.n	8003ab4 <_printf_float+0x1e4>
 8003aa4:	6923      	ldr	r3, [r4, #16]
 8003aa6:	463a      	mov	r2, r7
 8003aa8:	4659      	mov	r1, fp
 8003aaa:	4628      	mov	r0, r5
 8003aac:	47b0      	blx	r6
 8003aae:	3001      	adds	r0, #1
 8003ab0:	d129      	bne.n	8003b06 <_printf_float+0x236>
 8003ab2:	e764      	b.n	800397e <_printf_float+0xae>
 8003ab4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003ab8:	f240 80d7 	bls.w	8003c6a <_printf_float+0x39a>
 8003abc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f7fc ff80 	bl	80009c8 <__aeabi_dcmpeq>
 8003ac8:	b388      	cbz	r0, 8003b2e <_printf_float+0x25e>
 8003aca:	2301      	movs	r3, #1
 8003acc:	4a40      	ldr	r2, [pc, #256]	; (8003bd0 <_printf_float+0x300>)
 8003ace:	4659      	mov	r1, fp
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	47b0      	blx	r6
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	f43f af52 	beq.w	800397e <_printf_float+0xae>
 8003ada:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	db02      	blt.n	8003ae8 <_printf_float+0x218>
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	07d8      	lsls	r0, r3, #31
 8003ae6:	d50e      	bpl.n	8003b06 <_printf_float+0x236>
 8003ae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003aec:	4659      	mov	r1, fp
 8003aee:	4628      	mov	r0, r5
 8003af0:	47b0      	blx	r6
 8003af2:	3001      	adds	r0, #1
 8003af4:	f43f af43 	beq.w	800397e <_printf_float+0xae>
 8003af8:	2700      	movs	r7, #0
 8003afa:	f104 081a 	add.w	r8, r4, #26
 8003afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b00:	3b01      	subs	r3, #1
 8003b02:	42bb      	cmp	r3, r7
 8003b04:	dc09      	bgt.n	8003b1a <_printf_float+0x24a>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	079f      	lsls	r7, r3, #30
 8003b0a:	f100 80fd 	bmi.w	8003d08 <_printf_float+0x438>
 8003b0e:	68e0      	ldr	r0, [r4, #12]
 8003b10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b12:	4298      	cmp	r0, r3
 8003b14:	bfb8      	it	lt
 8003b16:	4618      	movlt	r0, r3
 8003b18:	e733      	b.n	8003982 <_printf_float+0xb2>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	4642      	mov	r2, r8
 8003b1e:	4659      	mov	r1, fp
 8003b20:	4628      	mov	r0, r5
 8003b22:	47b0      	blx	r6
 8003b24:	3001      	adds	r0, #1
 8003b26:	f43f af2a 	beq.w	800397e <_printf_float+0xae>
 8003b2a:	3701      	adds	r7, #1
 8003b2c:	e7e7      	b.n	8003afe <_printf_float+0x22e>
 8003b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	dc2b      	bgt.n	8003b8c <_printf_float+0x2bc>
 8003b34:	2301      	movs	r3, #1
 8003b36:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <_printf_float+0x300>)
 8003b38:	4659      	mov	r1, fp
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	47b0      	blx	r6
 8003b3e:	3001      	adds	r0, #1
 8003b40:	f43f af1d 	beq.w	800397e <_printf_float+0xae>
 8003b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b46:	b923      	cbnz	r3, 8003b52 <_printf_float+0x282>
 8003b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b4a:	b913      	cbnz	r3, 8003b52 <_printf_float+0x282>
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	07d9      	lsls	r1, r3, #31
 8003b50:	d5d9      	bpl.n	8003b06 <_printf_float+0x236>
 8003b52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b56:	4659      	mov	r1, fp
 8003b58:	4628      	mov	r0, r5
 8003b5a:	47b0      	blx	r6
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	f43f af0e 	beq.w	800397e <_printf_float+0xae>
 8003b62:	f04f 0800 	mov.w	r8, #0
 8003b66:	f104 091a 	add.w	r9, r4, #26
 8003b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b6c:	425b      	negs	r3, r3
 8003b6e:	4543      	cmp	r3, r8
 8003b70:	dc01      	bgt.n	8003b76 <_printf_float+0x2a6>
 8003b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b74:	e797      	b.n	8003aa6 <_printf_float+0x1d6>
 8003b76:	2301      	movs	r3, #1
 8003b78:	464a      	mov	r2, r9
 8003b7a:	4659      	mov	r1, fp
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	47b0      	blx	r6
 8003b80:	3001      	adds	r0, #1
 8003b82:	f43f aefc 	beq.w	800397e <_printf_float+0xae>
 8003b86:	f108 0801 	add.w	r8, r8, #1
 8003b8a:	e7ee      	b.n	8003b6a <_printf_float+0x29a>
 8003b8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b90:	429a      	cmp	r2, r3
 8003b92:	bfa8      	it	ge
 8003b94:	461a      	movge	r2, r3
 8003b96:	2a00      	cmp	r2, #0
 8003b98:	4690      	mov	r8, r2
 8003b9a:	dd07      	ble.n	8003bac <_printf_float+0x2dc>
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	4659      	mov	r1, fp
 8003ba0:	463a      	mov	r2, r7
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	47b0      	blx	r6
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	f43f aee9 	beq.w	800397e <_printf_float+0xae>
 8003bac:	f104 031a 	add.w	r3, r4, #26
 8003bb0:	f04f 0a00 	mov.w	sl, #0
 8003bb4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003bb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bba:	e015      	b.n	8003be8 <_printf_float+0x318>
 8003bbc:	7fefffff 	.word	0x7fefffff
 8003bc0:	08006004 	.word	0x08006004
 8003bc4:	08006000 	.word	0x08006000
 8003bc8:	0800600c 	.word	0x0800600c
 8003bcc:	08006008 	.word	0x08006008
 8003bd0:	08006010 	.word	0x08006010
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003bd8:	4659      	mov	r1, fp
 8003bda:	4628      	mov	r0, r5
 8003bdc:	47b0      	blx	r6
 8003bde:	3001      	adds	r0, #1
 8003be0:	f43f aecd 	beq.w	800397e <_printf_float+0xae>
 8003be4:	f10a 0a01 	add.w	sl, sl, #1
 8003be8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003bec:	eba9 0308 	sub.w	r3, r9, r8
 8003bf0:	4553      	cmp	r3, sl
 8003bf2:	dcef      	bgt.n	8003bd4 <_printf_float+0x304>
 8003bf4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	444f      	add	r7, r9
 8003bfc:	db14      	blt.n	8003c28 <_printf_float+0x358>
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	07da      	lsls	r2, r3, #31
 8003c02:	d411      	bmi.n	8003c28 <_printf_float+0x358>
 8003c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003c08:	eba3 0209 	sub.w	r2, r3, r9
 8003c0c:	eba3 0901 	sub.w	r9, r3, r1
 8003c10:	4591      	cmp	r9, r2
 8003c12:	bfa8      	it	ge
 8003c14:	4691      	movge	r9, r2
 8003c16:	f1b9 0f00 	cmp.w	r9, #0
 8003c1a:	dc0d      	bgt.n	8003c38 <_printf_float+0x368>
 8003c1c:	2700      	movs	r7, #0
 8003c1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c22:	f104 081a 	add.w	r8, r4, #26
 8003c26:	e018      	b.n	8003c5a <_printf_float+0x38a>
 8003c28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	4628      	mov	r0, r5
 8003c30:	47b0      	blx	r6
 8003c32:	3001      	adds	r0, #1
 8003c34:	d1e6      	bne.n	8003c04 <_printf_float+0x334>
 8003c36:	e6a2      	b.n	800397e <_printf_float+0xae>
 8003c38:	464b      	mov	r3, r9
 8003c3a:	463a      	mov	r2, r7
 8003c3c:	4659      	mov	r1, fp
 8003c3e:	4628      	mov	r0, r5
 8003c40:	47b0      	blx	r6
 8003c42:	3001      	adds	r0, #1
 8003c44:	d1ea      	bne.n	8003c1c <_printf_float+0x34c>
 8003c46:	e69a      	b.n	800397e <_printf_float+0xae>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	4642      	mov	r2, r8
 8003c4c:	4659      	mov	r1, fp
 8003c4e:	4628      	mov	r0, r5
 8003c50:	47b0      	blx	r6
 8003c52:	3001      	adds	r0, #1
 8003c54:	f43f ae93 	beq.w	800397e <_printf_float+0xae>
 8003c58:	3701      	adds	r7, #1
 8003c5a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	eba3 0309 	sub.w	r3, r3, r9
 8003c64:	42bb      	cmp	r3, r7
 8003c66:	dcef      	bgt.n	8003c48 <_printf_float+0x378>
 8003c68:	e74d      	b.n	8003b06 <_printf_float+0x236>
 8003c6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c6c:	2a01      	cmp	r2, #1
 8003c6e:	dc01      	bgt.n	8003c74 <_printf_float+0x3a4>
 8003c70:	07db      	lsls	r3, r3, #31
 8003c72:	d538      	bpl.n	8003ce6 <_printf_float+0x416>
 8003c74:	2301      	movs	r3, #1
 8003c76:	463a      	mov	r2, r7
 8003c78:	4659      	mov	r1, fp
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	47b0      	blx	r6
 8003c7e:	3001      	adds	r0, #1
 8003c80:	f43f ae7d 	beq.w	800397e <_printf_float+0xae>
 8003c84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c88:	4659      	mov	r1, fp
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	47b0      	blx	r6
 8003c8e:	3001      	adds	r0, #1
 8003c90:	f107 0701 	add.w	r7, r7, #1
 8003c94:	f43f ae73 	beq.w	800397e <_printf_float+0xae>
 8003c98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f103 38ff 	add.w	r8, r3, #4294967295
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f7fc fe8f 	bl	80009c8 <__aeabi_dcmpeq>
 8003caa:	b9c0      	cbnz	r0, 8003cde <_printf_float+0x40e>
 8003cac:	4643      	mov	r3, r8
 8003cae:	463a      	mov	r2, r7
 8003cb0:	4659      	mov	r1, fp
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	47b0      	blx	r6
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d10d      	bne.n	8003cd6 <_printf_float+0x406>
 8003cba:	e660      	b.n	800397e <_printf_float+0xae>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	4642      	mov	r2, r8
 8003cc0:	4659      	mov	r1, fp
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	47b0      	blx	r6
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	f43f ae59 	beq.w	800397e <_printf_float+0xae>
 8003ccc:	3701      	adds	r7, #1
 8003cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	42bb      	cmp	r3, r7
 8003cd4:	dcf2      	bgt.n	8003cbc <_printf_float+0x3ec>
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003cdc:	e6e4      	b.n	8003aa8 <_printf_float+0x1d8>
 8003cde:	2700      	movs	r7, #0
 8003ce0:	f104 081a 	add.w	r8, r4, #26
 8003ce4:	e7f3      	b.n	8003cce <_printf_float+0x3fe>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e7e1      	b.n	8003cae <_printf_float+0x3de>
 8003cea:	2301      	movs	r3, #1
 8003cec:	4642      	mov	r2, r8
 8003cee:	4659      	mov	r1, fp
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	47b0      	blx	r6
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	f43f ae42 	beq.w	800397e <_printf_float+0xae>
 8003cfa:	3701      	adds	r7, #1
 8003cfc:	68e3      	ldr	r3, [r4, #12]
 8003cfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	42bb      	cmp	r3, r7
 8003d04:	dcf1      	bgt.n	8003cea <_printf_float+0x41a>
 8003d06:	e702      	b.n	8003b0e <_printf_float+0x23e>
 8003d08:	2700      	movs	r7, #0
 8003d0a:	f104 0819 	add.w	r8, r4, #25
 8003d0e:	e7f5      	b.n	8003cfc <_printf_float+0x42c>
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f43f ae94 	beq.w	8003a3e <_printf_float+0x16e>
 8003d16:	f04f 0c00 	mov.w	ip, #0
 8003d1a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003d1e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003d22:	6022      	str	r2, [r4, #0]
 8003d24:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003d28:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	463a      	mov	r2, r7
 8003d30:	464b      	mov	r3, r9
 8003d32:	4628      	mov	r0, r5
 8003d34:	f7ff fd3a 	bl	80037ac <__cvt>
 8003d38:	4607      	mov	r7, r0
 8003d3a:	e64f      	b.n	80039dc <_printf_float+0x10c>

08003d3c <_printf_common>:
 8003d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d40:	4691      	mov	r9, r2
 8003d42:	461f      	mov	r7, r3
 8003d44:	688a      	ldr	r2, [r1, #8]
 8003d46:	690b      	ldr	r3, [r1, #16]
 8003d48:	4606      	mov	r6, r0
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	bfb8      	it	lt
 8003d4e:	4613      	movlt	r3, r2
 8003d50:	f8c9 3000 	str.w	r3, [r9]
 8003d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d58:	460c      	mov	r4, r1
 8003d5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d5e:	b112      	cbz	r2, 8003d66 <_printf_common+0x2a>
 8003d60:	3301      	adds	r3, #1
 8003d62:	f8c9 3000 	str.w	r3, [r9]
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	0699      	lsls	r1, r3, #26
 8003d6a:	bf42      	ittt	mi
 8003d6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d70:	3302      	addmi	r3, #2
 8003d72:	f8c9 3000 	strmi.w	r3, [r9]
 8003d76:	6825      	ldr	r5, [r4, #0]
 8003d78:	f015 0506 	ands.w	r5, r5, #6
 8003d7c:	d107      	bne.n	8003d8e <_printf_common+0x52>
 8003d7e:	f104 0a19 	add.w	sl, r4, #25
 8003d82:	68e3      	ldr	r3, [r4, #12]
 8003d84:	f8d9 2000 	ldr.w	r2, [r9]
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	42ab      	cmp	r3, r5
 8003d8c:	dc29      	bgt.n	8003de2 <_printf_common+0xa6>
 8003d8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d92:	6822      	ldr	r2, [r4, #0]
 8003d94:	3300      	adds	r3, #0
 8003d96:	bf18      	it	ne
 8003d98:	2301      	movne	r3, #1
 8003d9a:	0692      	lsls	r2, r2, #26
 8003d9c:	d42e      	bmi.n	8003dfc <_printf_common+0xc0>
 8003d9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003da2:	4639      	mov	r1, r7
 8003da4:	4630      	mov	r0, r6
 8003da6:	47c0      	blx	r8
 8003da8:	3001      	adds	r0, #1
 8003daa:	d021      	beq.n	8003df0 <_printf_common+0xb4>
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	68e5      	ldr	r5, [r4, #12]
 8003db0:	f003 0306 	and.w	r3, r3, #6
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	bf18      	it	ne
 8003db8:	2500      	movne	r5, #0
 8003dba:	f8d9 2000 	ldr.w	r2, [r9]
 8003dbe:	f04f 0900 	mov.w	r9, #0
 8003dc2:	bf08      	it	eq
 8003dc4:	1aad      	subeq	r5, r5, r2
 8003dc6:	68a3      	ldr	r3, [r4, #8]
 8003dc8:	6922      	ldr	r2, [r4, #16]
 8003dca:	bf08      	it	eq
 8003dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	bfc4      	itt	gt
 8003dd4:	1a9b      	subgt	r3, r3, r2
 8003dd6:	18ed      	addgt	r5, r5, r3
 8003dd8:	341a      	adds	r4, #26
 8003dda:	454d      	cmp	r5, r9
 8003ddc:	d11a      	bne.n	8003e14 <_printf_common+0xd8>
 8003dde:	2000      	movs	r0, #0
 8003de0:	e008      	b.n	8003df4 <_printf_common+0xb8>
 8003de2:	2301      	movs	r3, #1
 8003de4:	4652      	mov	r2, sl
 8003de6:	4639      	mov	r1, r7
 8003de8:	4630      	mov	r0, r6
 8003dea:	47c0      	blx	r8
 8003dec:	3001      	adds	r0, #1
 8003dee:	d103      	bne.n	8003df8 <_printf_common+0xbc>
 8003df0:	f04f 30ff 	mov.w	r0, #4294967295
 8003df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df8:	3501      	adds	r5, #1
 8003dfa:	e7c2      	b.n	8003d82 <_printf_common+0x46>
 8003dfc:	2030      	movs	r0, #48	; 0x30
 8003dfe:	18e1      	adds	r1, r4, r3
 8003e00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e0a:	4422      	add	r2, r4
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e12:	e7c4      	b.n	8003d9e <_printf_common+0x62>
 8003e14:	2301      	movs	r3, #1
 8003e16:	4622      	mov	r2, r4
 8003e18:	4639      	mov	r1, r7
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	47c0      	blx	r8
 8003e1e:	3001      	adds	r0, #1
 8003e20:	d0e6      	beq.n	8003df0 <_printf_common+0xb4>
 8003e22:	f109 0901 	add.w	r9, r9, #1
 8003e26:	e7d8      	b.n	8003dda <_printf_common+0x9e>

08003e28 <_printf_i>:
 8003e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e30:	460c      	mov	r4, r1
 8003e32:	7e09      	ldrb	r1, [r1, #24]
 8003e34:	b085      	sub	sp, #20
 8003e36:	296e      	cmp	r1, #110	; 0x6e
 8003e38:	4617      	mov	r7, r2
 8003e3a:	4606      	mov	r6, r0
 8003e3c:	4698      	mov	r8, r3
 8003e3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e40:	f000 80b3 	beq.w	8003faa <_printf_i+0x182>
 8003e44:	d822      	bhi.n	8003e8c <_printf_i+0x64>
 8003e46:	2963      	cmp	r1, #99	; 0x63
 8003e48:	d036      	beq.n	8003eb8 <_printf_i+0x90>
 8003e4a:	d80a      	bhi.n	8003e62 <_printf_i+0x3a>
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	f000 80b9 	beq.w	8003fc4 <_printf_i+0x19c>
 8003e52:	2958      	cmp	r1, #88	; 0x58
 8003e54:	f000 8083 	beq.w	8003f5e <_printf_i+0x136>
 8003e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003e60:	e032      	b.n	8003ec8 <_printf_i+0xa0>
 8003e62:	2964      	cmp	r1, #100	; 0x64
 8003e64:	d001      	beq.n	8003e6a <_printf_i+0x42>
 8003e66:	2969      	cmp	r1, #105	; 0x69
 8003e68:	d1f6      	bne.n	8003e58 <_printf_i+0x30>
 8003e6a:	6820      	ldr	r0, [r4, #0]
 8003e6c:	6813      	ldr	r3, [r2, #0]
 8003e6e:	0605      	lsls	r5, r0, #24
 8003e70:	f103 0104 	add.w	r1, r3, #4
 8003e74:	d52a      	bpl.n	8003ecc <_printf_i+0xa4>
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6011      	str	r1, [r2, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	da03      	bge.n	8003e86 <_printf_i+0x5e>
 8003e7e:	222d      	movs	r2, #45	; 0x2d
 8003e80:	425b      	negs	r3, r3
 8003e82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e86:	486f      	ldr	r0, [pc, #444]	; (8004044 <_printf_i+0x21c>)
 8003e88:	220a      	movs	r2, #10
 8003e8a:	e039      	b.n	8003f00 <_printf_i+0xd8>
 8003e8c:	2973      	cmp	r1, #115	; 0x73
 8003e8e:	f000 809d 	beq.w	8003fcc <_printf_i+0x1a4>
 8003e92:	d808      	bhi.n	8003ea6 <_printf_i+0x7e>
 8003e94:	296f      	cmp	r1, #111	; 0x6f
 8003e96:	d020      	beq.n	8003eda <_printf_i+0xb2>
 8003e98:	2970      	cmp	r1, #112	; 0x70
 8003e9a:	d1dd      	bne.n	8003e58 <_printf_i+0x30>
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	f043 0320 	orr.w	r3, r3, #32
 8003ea2:	6023      	str	r3, [r4, #0]
 8003ea4:	e003      	b.n	8003eae <_printf_i+0x86>
 8003ea6:	2975      	cmp	r1, #117	; 0x75
 8003ea8:	d017      	beq.n	8003eda <_printf_i+0xb2>
 8003eaa:	2978      	cmp	r1, #120	; 0x78
 8003eac:	d1d4      	bne.n	8003e58 <_printf_i+0x30>
 8003eae:	2378      	movs	r3, #120	; 0x78
 8003eb0:	4865      	ldr	r0, [pc, #404]	; (8004048 <_printf_i+0x220>)
 8003eb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003eb6:	e055      	b.n	8003f64 <_printf_i+0x13c>
 8003eb8:	6813      	ldr	r3, [r2, #0]
 8003eba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ebe:	1d19      	adds	r1, r3, #4
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6011      	str	r1, [r2, #0]
 8003ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e08c      	b.n	8003fe6 <_printf_i+0x1be>
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ed2:	6011      	str	r1, [r2, #0]
 8003ed4:	bf18      	it	ne
 8003ed6:	b21b      	sxthne	r3, r3
 8003ed8:	e7cf      	b.n	8003e7a <_printf_i+0x52>
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	6825      	ldr	r5, [r4, #0]
 8003ede:	1d18      	adds	r0, r3, #4
 8003ee0:	6010      	str	r0, [r2, #0]
 8003ee2:	0628      	lsls	r0, r5, #24
 8003ee4:	d501      	bpl.n	8003eea <_printf_i+0xc2>
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	e002      	b.n	8003ef0 <_printf_i+0xc8>
 8003eea:	0668      	lsls	r0, r5, #25
 8003eec:	d5fb      	bpl.n	8003ee6 <_printf_i+0xbe>
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	296f      	cmp	r1, #111	; 0x6f
 8003ef2:	bf14      	ite	ne
 8003ef4:	220a      	movne	r2, #10
 8003ef6:	2208      	moveq	r2, #8
 8003ef8:	4852      	ldr	r0, [pc, #328]	; (8004044 <_printf_i+0x21c>)
 8003efa:	2100      	movs	r1, #0
 8003efc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f00:	6865      	ldr	r5, [r4, #4]
 8003f02:	2d00      	cmp	r5, #0
 8003f04:	60a5      	str	r5, [r4, #8]
 8003f06:	f2c0 8095 	blt.w	8004034 <_printf_i+0x20c>
 8003f0a:	6821      	ldr	r1, [r4, #0]
 8003f0c:	f021 0104 	bic.w	r1, r1, #4
 8003f10:	6021      	str	r1, [r4, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d13d      	bne.n	8003f92 <_printf_i+0x16a>
 8003f16:	2d00      	cmp	r5, #0
 8003f18:	f040 808e 	bne.w	8004038 <_printf_i+0x210>
 8003f1c:	4665      	mov	r5, ip
 8003f1e:	2a08      	cmp	r2, #8
 8003f20:	d10b      	bne.n	8003f3a <_printf_i+0x112>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	07db      	lsls	r3, r3, #31
 8003f26:	d508      	bpl.n	8003f3a <_printf_i+0x112>
 8003f28:	6923      	ldr	r3, [r4, #16]
 8003f2a:	6862      	ldr	r2, [r4, #4]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	bfde      	ittt	le
 8003f30:	2330      	movle	r3, #48	; 0x30
 8003f32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f3a:	ebac 0305 	sub.w	r3, ip, r5
 8003f3e:	6123      	str	r3, [r4, #16]
 8003f40:	f8cd 8000 	str.w	r8, [sp]
 8003f44:	463b      	mov	r3, r7
 8003f46:	aa03      	add	r2, sp, #12
 8003f48:	4621      	mov	r1, r4
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	f7ff fef6 	bl	8003d3c <_printf_common>
 8003f50:	3001      	adds	r0, #1
 8003f52:	d14d      	bne.n	8003ff0 <_printf_i+0x1c8>
 8003f54:	f04f 30ff 	mov.w	r0, #4294967295
 8003f58:	b005      	add	sp, #20
 8003f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f5e:	4839      	ldr	r0, [pc, #228]	; (8004044 <_printf_i+0x21c>)
 8003f60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003f64:	6813      	ldr	r3, [r2, #0]
 8003f66:	6821      	ldr	r1, [r4, #0]
 8003f68:	1d1d      	adds	r5, r3, #4
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6015      	str	r5, [r2, #0]
 8003f6e:	060a      	lsls	r2, r1, #24
 8003f70:	d50b      	bpl.n	8003f8a <_printf_i+0x162>
 8003f72:	07ca      	lsls	r2, r1, #31
 8003f74:	bf44      	itt	mi
 8003f76:	f041 0120 	orrmi.w	r1, r1, #32
 8003f7a:	6021      	strmi	r1, [r4, #0]
 8003f7c:	b91b      	cbnz	r3, 8003f86 <_printf_i+0x15e>
 8003f7e:	6822      	ldr	r2, [r4, #0]
 8003f80:	f022 0220 	bic.w	r2, r2, #32
 8003f84:	6022      	str	r2, [r4, #0]
 8003f86:	2210      	movs	r2, #16
 8003f88:	e7b7      	b.n	8003efa <_printf_i+0xd2>
 8003f8a:	064d      	lsls	r5, r1, #25
 8003f8c:	bf48      	it	mi
 8003f8e:	b29b      	uxthmi	r3, r3
 8003f90:	e7ef      	b.n	8003f72 <_printf_i+0x14a>
 8003f92:	4665      	mov	r5, ip
 8003f94:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f98:	fb02 3311 	mls	r3, r2, r1, r3
 8003f9c:	5cc3      	ldrb	r3, [r0, r3]
 8003f9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	2900      	cmp	r1, #0
 8003fa6:	d1f5      	bne.n	8003f94 <_printf_i+0x16c>
 8003fa8:	e7b9      	b.n	8003f1e <_printf_i+0xf6>
 8003faa:	6813      	ldr	r3, [r2, #0]
 8003fac:	6825      	ldr	r5, [r4, #0]
 8003fae:	1d18      	adds	r0, r3, #4
 8003fb0:	6961      	ldr	r1, [r4, #20]
 8003fb2:	6010      	str	r0, [r2, #0]
 8003fb4:	0628      	lsls	r0, r5, #24
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	d501      	bpl.n	8003fbe <_printf_i+0x196>
 8003fba:	6019      	str	r1, [r3, #0]
 8003fbc:	e002      	b.n	8003fc4 <_printf_i+0x19c>
 8003fbe:	066a      	lsls	r2, r5, #25
 8003fc0:	d5fb      	bpl.n	8003fba <_printf_i+0x192>
 8003fc2:	8019      	strh	r1, [r3, #0]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4665      	mov	r5, ip
 8003fc8:	6123      	str	r3, [r4, #16]
 8003fca:	e7b9      	b.n	8003f40 <_printf_i+0x118>
 8003fcc:	6813      	ldr	r3, [r2, #0]
 8003fce:	1d19      	adds	r1, r3, #4
 8003fd0:	6011      	str	r1, [r2, #0]
 8003fd2:	681d      	ldr	r5, [r3, #0]
 8003fd4:	6862      	ldr	r2, [r4, #4]
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4628      	mov	r0, r5
 8003fda:	f001 f9a9 	bl	8005330 <memchr>
 8003fde:	b108      	cbz	r0, 8003fe4 <_printf_i+0x1bc>
 8003fe0:	1b40      	subs	r0, r0, r5
 8003fe2:	6060      	str	r0, [r4, #4]
 8003fe4:	6863      	ldr	r3, [r4, #4]
 8003fe6:	6123      	str	r3, [r4, #16]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fee:	e7a7      	b.n	8003f40 <_printf_i+0x118>
 8003ff0:	6923      	ldr	r3, [r4, #16]
 8003ff2:	462a      	mov	r2, r5
 8003ff4:	4639      	mov	r1, r7
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	47c0      	blx	r8
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d0aa      	beq.n	8003f54 <_printf_i+0x12c>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	079b      	lsls	r3, r3, #30
 8004002:	d413      	bmi.n	800402c <_printf_i+0x204>
 8004004:	68e0      	ldr	r0, [r4, #12]
 8004006:	9b03      	ldr	r3, [sp, #12]
 8004008:	4298      	cmp	r0, r3
 800400a:	bfb8      	it	lt
 800400c:	4618      	movlt	r0, r3
 800400e:	e7a3      	b.n	8003f58 <_printf_i+0x130>
 8004010:	2301      	movs	r3, #1
 8004012:	464a      	mov	r2, r9
 8004014:	4639      	mov	r1, r7
 8004016:	4630      	mov	r0, r6
 8004018:	47c0      	blx	r8
 800401a:	3001      	adds	r0, #1
 800401c:	d09a      	beq.n	8003f54 <_printf_i+0x12c>
 800401e:	3501      	adds	r5, #1
 8004020:	68e3      	ldr	r3, [r4, #12]
 8004022:	9a03      	ldr	r2, [sp, #12]
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	42ab      	cmp	r3, r5
 8004028:	dcf2      	bgt.n	8004010 <_printf_i+0x1e8>
 800402a:	e7eb      	b.n	8004004 <_printf_i+0x1dc>
 800402c:	2500      	movs	r5, #0
 800402e:	f104 0919 	add.w	r9, r4, #25
 8004032:	e7f5      	b.n	8004020 <_printf_i+0x1f8>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1ac      	bne.n	8003f92 <_printf_i+0x16a>
 8004038:	7803      	ldrb	r3, [r0, #0]
 800403a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800403e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004042:	e76c      	b.n	8003f1e <_printf_i+0xf6>
 8004044:	08006012 	.word	0x08006012
 8004048:	08006023 	.word	0x08006023

0800404c <iprintf>:
 800404c:	b40f      	push	{r0, r1, r2, r3}
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <iprintf+0x2c>)
 8004050:	b513      	push	{r0, r1, r4, lr}
 8004052:	681c      	ldr	r4, [r3, #0]
 8004054:	b124      	cbz	r4, 8004060 <iprintf+0x14>
 8004056:	69a3      	ldr	r3, [r4, #24]
 8004058:	b913      	cbnz	r3, 8004060 <iprintf+0x14>
 800405a:	4620      	mov	r0, r4
 800405c:	f001 f864 	bl	8005128 <__sinit>
 8004060:	ab05      	add	r3, sp, #20
 8004062:	9a04      	ldr	r2, [sp, #16]
 8004064:	68a1      	ldr	r1, [r4, #8]
 8004066:	4620      	mov	r0, r4
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	f001 fd33 	bl	8005ad4 <_vfiprintf_r>
 800406e:	b002      	add	sp, #8
 8004070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004074:	b004      	add	sp, #16
 8004076:	4770      	bx	lr
 8004078:	20000414 	.word	0x20000414

0800407c <_puts_r>:
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	460e      	mov	r6, r1
 8004080:	4605      	mov	r5, r0
 8004082:	b118      	cbz	r0, 800408c <_puts_r+0x10>
 8004084:	6983      	ldr	r3, [r0, #24]
 8004086:	b90b      	cbnz	r3, 800408c <_puts_r+0x10>
 8004088:	f001 f84e 	bl	8005128 <__sinit>
 800408c:	69ab      	ldr	r3, [r5, #24]
 800408e:	68ac      	ldr	r4, [r5, #8]
 8004090:	b913      	cbnz	r3, 8004098 <_puts_r+0x1c>
 8004092:	4628      	mov	r0, r5
 8004094:	f001 f848 	bl	8005128 <__sinit>
 8004098:	4b23      	ldr	r3, [pc, #140]	; (8004128 <_puts_r+0xac>)
 800409a:	429c      	cmp	r4, r3
 800409c:	d117      	bne.n	80040ce <_puts_r+0x52>
 800409e:	686c      	ldr	r4, [r5, #4]
 80040a0:	89a3      	ldrh	r3, [r4, #12]
 80040a2:	071b      	lsls	r3, r3, #28
 80040a4:	d51d      	bpl.n	80040e2 <_puts_r+0x66>
 80040a6:	6923      	ldr	r3, [r4, #16]
 80040a8:	b1db      	cbz	r3, 80040e2 <_puts_r+0x66>
 80040aa:	3e01      	subs	r6, #1
 80040ac:	68a3      	ldr	r3, [r4, #8]
 80040ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040b2:	3b01      	subs	r3, #1
 80040b4:	60a3      	str	r3, [r4, #8]
 80040b6:	b9e9      	cbnz	r1, 80040f4 <_puts_r+0x78>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	da2e      	bge.n	800411a <_puts_r+0x9e>
 80040bc:	4622      	mov	r2, r4
 80040be:	210a      	movs	r1, #10
 80040c0:	4628      	mov	r0, r5
 80040c2:	f000 f83f 	bl	8004144 <__swbuf_r>
 80040c6:	3001      	adds	r0, #1
 80040c8:	d011      	beq.n	80040ee <_puts_r+0x72>
 80040ca:	200a      	movs	r0, #10
 80040cc:	e011      	b.n	80040f2 <_puts_r+0x76>
 80040ce:	4b17      	ldr	r3, [pc, #92]	; (800412c <_puts_r+0xb0>)
 80040d0:	429c      	cmp	r4, r3
 80040d2:	d101      	bne.n	80040d8 <_puts_r+0x5c>
 80040d4:	68ac      	ldr	r4, [r5, #8]
 80040d6:	e7e3      	b.n	80040a0 <_puts_r+0x24>
 80040d8:	4b15      	ldr	r3, [pc, #84]	; (8004130 <_puts_r+0xb4>)
 80040da:	429c      	cmp	r4, r3
 80040dc:	bf08      	it	eq
 80040de:	68ec      	ldreq	r4, [r5, #12]
 80040e0:	e7de      	b.n	80040a0 <_puts_r+0x24>
 80040e2:	4621      	mov	r1, r4
 80040e4:	4628      	mov	r0, r5
 80040e6:	f000 f87f 	bl	80041e8 <__swsetup_r>
 80040ea:	2800      	cmp	r0, #0
 80040ec:	d0dd      	beq.n	80040aa <_puts_r+0x2e>
 80040ee:	f04f 30ff 	mov.w	r0, #4294967295
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	da04      	bge.n	8004102 <_puts_r+0x86>
 80040f8:	69a2      	ldr	r2, [r4, #24]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	dc06      	bgt.n	800410c <_puts_r+0x90>
 80040fe:	290a      	cmp	r1, #10
 8004100:	d004      	beq.n	800410c <_puts_r+0x90>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	6022      	str	r2, [r4, #0]
 8004108:	7019      	strb	r1, [r3, #0]
 800410a:	e7cf      	b.n	80040ac <_puts_r+0x30>
 800410c:	4622      	mov	r2, r4
 800410e:	4628      	mov	r0, r5
 8004110:	f000 f818 	bl	8004144 <__swbuf_r>
 8004114:	3001      	adds	r0, #1
 8004116:	d1c9      	bne.n	80040ac <_puts_r+0x30>
 8004118:	e7e9      	b.n	80040ee <_puts_r+0x72>
 800411a:	200a      	movs	r0, #10
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	6022      	str	r2, [r4, #0]
 8004122:	7018      	strb	r0, [r3, #0]
 8004124:	e7e5      	b.n	80040f2 <_puts_r+0x76>
 8004126:	bf00      	nop
 8004128:	08006064 	.word	0x08006064
 800412c:	08006084 	.word	0x08006084
 8004130:	08006044 	.word	0x08006044

08004134 <puts>:
 8004134:	4b02      	ldr	r3, [pc, #8]	; (8004140 <puts+0xc>)
 8004136:	4601      	mov	r1, r0
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	f7ff bf9f 	b.w	800407c <_puts_r>
 800413e:	bf00      	nop
 8004140:	20000414 	.word	0x20000414

08004144 <__swbuf_r>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	460e      	mov	r6, r1
 8004148:	4614      	mov	r4, r2
 800414a:	4605      	mov	r5, r0
 800414c:	b118      	cbz	r0, 8004156 <__swbuf_r+0x12>
 800414e:	6983      	ldr	r3, [r0, #24]
 8004150:	b90b      	cbnz	r3, 8004156 <__swbuf_r+0x12>
 8004152:	f000 ffe9 	bl	8005128 <__sinit>
 8004156:	4b21      	ldr	r3, [pc, #132]	; (80041dc <__swbuf_r+0x98>)
 8004158:	429c      	cmp	r4, r3
 800415a:	d12a      	bne.n	80041b2 <__swbuf_r+0x6e>
 800415c:	686c      	ldr	r4, [r5, #4]
 800415e:	69a3      	ldr	r3, [r4, #24]
 8004160:	60a3      	str	r3, [r4, #8]
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	071a      	lsls	r2, r3, #28
 8004166:	d52e      	bpl.n	80041c6 <__swbuf_r+0x82>
 8004168:	6923      	ldr	r3, [r4, #16]
 800416a:	b363      	cbz	r3, 80041c6 <__swbuf_r+0x82>
 800416c:	6923      	ldr	r3, [r4, #16]
 800416e:	6820      	ldr	r0, [r4, #0]
 8004170:	b2f6      	uxtb	r6, r6
 8004172:	1ac0      	subs	r0, r0, r3
 8004174:	6963      	ldr	r3, [r4, #20]
 8004176:	4637      	mov	r7, r6
 8004178:	4283      	cmp	r3, r0
 800417a:	dc04      	bgt.n	8004186 <__swbuf_r+0x42>
 800417c:	4621      	mov	r1, r4
 800417e:	4628      	mov	r0, r5
 8004180:	f000 ff68 	bl	8005054 <_fflush_r>
 8004184:	bb28      	cbnz	r0, 80041d2 <__swbuf_r+0x8e>
 8004186:	68a3      	ldr	r3, [r4, #8]
 8004188:	3001      	adds	r0, #1
 800418a:	3b01      	subs	r3, #1
 800418c:	60a3      	str	r3, [r4, #8]
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	6022      	str	r2, [r4, #0]
 8004194:	701e      	strb	r6, [r3, #0]
 8004196:	6963      	ldr	r3, [r4, #20]
 8004198:	4283      	cmp	r3, r0
 800419a:	d004      	beq.n	80041a6 <__swbuf_r+0x62>
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	07db      	lsls	r3, r3, #31
 80041a0:	d519      	bpl.n	80041d6 <__swbuf_r+0x92>
 80041a2:	2e0a      	cmp	r6, #10
 80041a4:	d117      	bne.n	80041d6 <__swbuf_r+0x92>
 80041a6:	4621      	mov	r1, r4
 80041a8:	4628      	mov	r0, r5
 80041aa:	f000 ff53 	bl	8005054 <_fflush_r>
 80041ae:	b190      	cbz	r0, 80041d6 <__swbuf_r+0x92>
 80041b0:	e00f      	b.n	80041d2 <__swbuf_r+0x8e>
 80041b2:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <__swbuf_r+0x9c>)
 80041b4:	429c      	cmp	r4, r3
 80041b6:	d101      	bne.n	80041bc <__swbuf_r+0x78>
 80041b8:	68ac      	ldr	r4, [r5, #8]
 80041ba:	e7d0      	b.n	800415e <__swbuf_r+0x1a>
 80041bc:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <__swbuf_r+0xa0>)
 80041be:	429c      	cmp	r4, r3
 80041c0:	bf08      	it	eq
 80041c2:	68ec      	ldreq	r4, [r5, #12]
 80041c4:	e7cb      	b.n	800415e <__swbuf_r+0x1a>
 80041c6:	4621      	mov	r1, r4
 80041c8:	4628      	mov	r0, r5
 80041ca:	f000 f80d 	bl	80041e8 <__swsetup_r>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d0cc      	beq.n	800416c <__swbuf_r+0x28>
 80041d2:	f04f 37ff 	mov.w	r7, #4294967295
 80041d6:	4638      	mov	r0, r7
 80041d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041da:	bf00      	nop
 80041dc:	08006064 	.word	0x08006064
 80041e0:	08006084 	.word	0x08006084
 80041e4:	08006044 	.word	0x08006044

080041e8 <__swsetup_r>:
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <__swsetup_r+0xcc>)
 80041ea:	b570      	push	{r4, r5, r6, lr}
 80041ec:	681d      	ldr	r5, [r3, #0]
 80041ee:	4606      	mov	r6, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	b125      	cbz	r5, 80041fe <__swsetup_r+0x16>
 80041f4:	69ab      	ldr	r3, [r5, #24]
 80041f6:	b913      	cbnz	r3, 80041fe <__swsetup_r+0x16>
 80041f8:	4628      	mov	r0, r5
 80041fa:	f000 ff95 	bl	8005128 <__sinit>
 80041fe:	4b2e      	ldr	r3, [pc, #184]	; (80042b8 <__swsetup_r+0xd0>)
 8004200:	429c      	cmp	r4, r3
 8004202:	d10f      	bne.n	8004224 <__swsetup_r+0x3c>
 8004204:	686c      	ldr	r4, [r5, #4]
 8004206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800420a:	b29a      	uxth	r2, r3
 800420c:	0715      	lsls	r5, r2, #28
 800420e:	d42c      	bmi.n	800426a <__swsetup_r+0x82>
 8004210:	06d0      	lsls	r0, r2, #27
 8004212:	d411      	bmi.n	8004238 <__swsetup_r+0x50>
 8004214:	2209      	movs	r2, #9
 8004216:	6032      	str	r2, [r6, #0]
 8004218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800421c:	81a3      	strh	r3, [r4, #12]
 800421e:	f04f 30ff 	mov.w	r0, #4294967295
 8004222:	e03e      	b.n	80042a2 <__swsetup_r+0xba>
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <__swsetup_r+0xd4>)
 8004226:	429c      	cmp	r4, r3
 8004228:	d101      	bne.n	800422e <__swsetup_r+0x46>
 800422a:	68ac      	ldr	r4, [r5, #8]
 800422c:	e7eb      	b.n	8004206 <__swsetup_r+0x1e>
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <__swsetup_r+0xd8>)
 8004230:	429c      	cmp	r4, r3
 8004232:	bf08      	it	eq
 8004234:	68ec      	ldreq	r4, [r5, #12]
 8004236:	e7e6      	b.n	8004206 <__swsetup_r+0x1e>
 8004238:	0751      	lsls	r1, r2, #29
 800423a:	d512      	bpl.n	8004262 <__swsetup_r+0x7a>
 800423c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800423e:	b141      	cbz	r1, 8004252 <__swsetup_r+0x6a>
 8004240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004244:	4299      	cmp	r1, r3
 8004246:	d002      	beq.n	800424e <__swsetup_r+0x66>
 8004248:	4630      	mov	r0, r6
 800424a:	f001 fb75 	bl	8005938 <_free_r>
 800424e:	2300      	movs	r3, #0
 8004250:	6363      	str	r3, [r4, #52]	; 0x34
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	2300      	movs	r3, #0
 800425c:	6063      	str	r3, [r4, #4]
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	89a3      	ldrh	r3, [r4, #12]
 8004264:	f043 0308 	orr.w	r3, r3, #8
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	6923      	ldr	r3, [r4, #16]
 800426c:	b94b      	cbnz	r3, 8004282 <__swsetup_r+0x9a>
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004278:	d003      	beq.n	8004282 <__swsetup_r+0x9a>
 800427a:	4621      	mov	r1, r4
 800427c:	4630      	mov	r0, r6
 800427e:	f001 f80f 	bl	80052a0 <__smakebuf_r>
 8004282:	89a2      	ldrh	r2, [r4, #12]
 8004284:	f012 0301 	ands.w	r3, r2, #1
 8004288:	d00c      	beq.n	80042a4 <__swsetup_r+0xbc>
 800428a:	2300      	movs	r3, #0
 800428c:	60a3      	str	r3, [r4, #8]
 800428e:	6963      	ldr	r3, [r4, #20]
 8004290:	425b      	negs	r3, r3
 8004292:	61a3      	str	r3, [r4, #24]
 8004294:	6923      	ldr	r3, [r4, #16]
 8004296:	b953      	cbnz	r3, 80042ae <__swsetup_r+0xc6>
 8004298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800429c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80042a0:	d1ba      	bne.n	8004218 <__swsetup_r+0x30>
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
 80042a4:	0792      	lsls	r2, r2, #30
 80042a6:	bf58      	it	pl
 80042a8:	6963      	ldrpl	r3, [r4, #20]
 80042aa:	60a3      	str	r3, [r4, #8]
 80042ac:	e7f2      	b.n	8004294 <__swsetup_r+0xac>
 80042ae:	2000      	movs	r0, #0
 80042b0:	e7f7      	b.n	80042a2 <__swsetup_r+0xba>
 80042b2:	bf00      	nop
 80042b4:	20000414 	.word	0x20000414
 80042b8:	08006064 	.word	0x08006064
 80042bc:	08006084 	.word	0x08006084
 80042c0:	08006044 	.word	0x08006044

080042c4 <quorem>:
 80042c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c8:	6903      	ldr	r3, [r0, #16]
 80042ca:	690c      	ldr	r4, [r1, #16]
 80042cc:	4680      	mov	r8, r0
 80042ce:	42a3      	cmp	r3, r4
 80042d0:	f2c0 8084 	blt.w	80043dc <quorem+0x118>
 80042d4:	3c01      	subs	r4, #1
 80042d6:	f101 0714 	add.w	r7, r1, #20
 80042da:	f100 0614 	add.w	r6, r0, #20
 80042de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80042e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80042e6:	3501      	adds	r5, #1
 80042e8:	fbb0 f5f5 	udiv	r5, r0, r5
 80042ec:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80042f0:	eb06 030c 	add.w	r3, r6, ip
 80042f4:	eb07 090c 	add.w	r9, r7, ip
 80042f8:	9301      	str	r3, [sp, #4]
 80042fa:	b39d      	cbz	r5, 8004364 <quorem+0xa0>
 80042fc:	f04f 0a00 	mov.w	sl, #0
 8004300:	4638      	mov	r0, r7
 8004302:	46b6      	mov	lr, r6
 8004304:	46d3      	mov	fp, sl
 8004306:	f850 2b04 	ldr.w	r2, [r0], #4
 800430a:	b293      	uxth	r3, r2
 800430c:	fb05 a303 	mla	r3, r5, r3, sl
 8004310:	0c12      	lsrs	r2, r2, #16
 8004312:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004316:	fb05 a202 	mla	r2, r5, r2, sl
 800431a:	b29b      	uxth	r3, r3
 800431c:	ebab 0303 	sub.w	r3, fp, r3
 8004320:	f8de b000 	ldr.w	fp, [lr]
 8004324:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004328:	fa1f fb8b 	uxth.w	fp, fp
 800432c:	445b      	add	r3, fp
 800432e:	fa1f fb82 	uxth.w	fp, r2
 8004332:	f8de 2000 	ldr.w	r2, [lr]
 8004336:	4581      	cmp	r9, r0
 8004338:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800433c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004340:	b29b      	uxth	r3, r3
 8004342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004346:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800434a:	f84e 3b04 	str.w	r3, [lr], #4
 800434e:	d2da      	bcs.n	8004306 <quorem+0x42>
 8004350:	f856 300c 	ldr.w	r3, [r6, ip]
 8004354:	b933      	cbnz	r3, 8004364 <quorem+0xa0>
 8004356:	9b01      	ldr	r3, [sp, #4]
 8004358:	3b04      	subs	r3, #4
 800435a:	429e      	cmp	r6, r3
 800435c:	461a      	mov	r2, r3
 800435e:	d331      	bcc.n	80043c4 <quorem+0x100>
 8004360:	f8c8 4010 	str.w	r4, [r8, #16]
 8004364:	4640      	mov	r0, r8
 8004366:	f001 fa11 	bl	800578c <__mcmp>
 800436a:	2800      	cmp	r0, #0
 800436c:	db26      	blt.n	80043bc <quorem+0xf8>
 800436e:	4630      	mov	r0, r6
 8004370:	f04f 0c00 	mov.w	ip, #0
 8004374:	3501      	adds	r5, #1
 8004376:	f857 1b04 	ldr.w	r1, [r7], #4
 800437a:	f8d0 e000 	ldr.w	lr, [r0]
 800437e:	b28b      	uxth	r3, r1
 8004380:	ebac 0303 	sub.w	r3, ip, r3
 8004384:	fa1f f28e 	uxth.w	r2, lr
 8004388:	4413      	add	r3, r2
 800438a:	0c0a      	lsrs	r2, r1, #16
 800438c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004390:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004394:	b29b      	uxth	r3, r3
 8004396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800439a:	45b9      	cmp	r9, r7
 800439c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80043a0:	f840 3b04 	str.w	r3, [r0], #4
 80043a4:	d2e7      	bcs.n	8004376 <quorem+0xb2>
 80043a6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80043aa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80043ae:	b92a      	cbnz	r2, 80043bc <quorem+0xf8>
 80043b0:	3b04      	subs	r3, #4
 80043b2:	429e      	cmp	r6, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	d30b      	bcc.n	80043d0 <quorem+0x10c>
 80043b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80043bc:	4628      	mov	r0, r5
 80043be:	b003      	add	sp, #12
 80043c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	3b04      	subs	r3, #4
 80043c8:	2a00      	cmp	r2, #0
 80043ca:	d1c9      	bne.n	8004360 <quorem+0x9c>
 80043cc:	3c01      	subs	r4, #1
 80043ce:	e7c4      	b.n	800435a <quorem+0x96>
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	3b04      	subs	r3, #4
 80043d4:	2a00      	cmp	r2, #0
 80043d6:	d1ef      	bne.n	80043b8 <quorem+0xf4>
 80043d8:	3c01      	subs	r4, #1
 80043da:	e7ea      	b.n	80043b2 <quorem+0xee>
 80043dc:	2000      	movs	r0, #0
 80043de:	e7ee      	b.n	80043be <quorem+0xfa>

080043e0 <_dtoa_r>:
 80043e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e4:	4616      	mov	r6, r2
 80043e6:	461f      	mov	r7, r3
 80043e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80043ea:	b095      	sub	sp, #84	; 0x54
 80043ec:	4604      	mov	r4, r0
 80043ee:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80043f2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80043f6:	b93d      	cbnz	r5, 8004408 <_dtoa_r+0x28>
 80043f8:	2010      	movs	r0, #16
 80043fa:	f000 ff91 	bl	8005320 <malloc>
 80043fe:	6260      	str	r0, [r4, #36]	; 0x24
 8004400:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004404:	6005      	str	r5, [r0, #0]
 8004406:	60c5      	str	r5, [r0, #12]
 8004408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800440a:	6819      	ldr	r1, [r3, #0]
 800440c:	b151      	cbz	r1, 8004424 <_dtoa_r+0x44>
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	2301      	movs	r3, #1
 8004412:	4093      	lsls	r3, r2
 8004414:	604a      	str	r2, [r1, #4]
 8004416:	608b      	str	r3, [r1, #8]
 8004418:	4620      	mov	r0, r4
 800441a:	f000 ffd6 	bl	80053ca <_Bfree>
 800441e:	2200      	movs	r2, #0
 8004420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	1e3b      	subs	r3, r7, #0
 8004426:	bfaf      	iteee	ge
 8004428:	2300      	movge	r3, #0
 800442a:	2201      	movlt	r2, #1
 800442c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004430:	9303      	strlt	r3, [sp, #12]
 8004432:	bfac      	ite	ge
 8004434:	f8c8 3000 	strge.w	r3, [r8]
 8004438:	f8c8 2000 	strlt.w	r2, [r8]
 800443c:	4bae      	ldr	r3, [pc, #696]	; (80046f8 <_dtoa_r+0x318>)
 800443e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004442:	ea33 0308 	bics.w	r3, r3, r8
 8004446:	d11b      	bne.n	8004480 <_dtoa_r+0xa0>
 8004448:	f242 730f 	movw	r3, #9999	; 0x270f
 800444c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	9b02      	ldr	r3, [sp, #8]
 8004452:	b923      	cbnz	r3, 800445e <_dtoa_r+0x7e>
 8004454:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004458:	2800      	cmp	r0, #0
 800445a:	f000 8545 	beq.w	8004ee8 <_dtoa_r+0xb08>
 800445e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004460:	b953      	cbnz	r3, 8004478 <_dtoa_r+0x98>
 8004462:	4ba6      	ldr	r3, [pc, #664]	; (80046fc <_dtoa_r+0x31c>)
 8004464:	e021      	b.n	80044aa <_dtoa_r+0xca>
 8004466:	4ba6      	ldr	r3, [pc, #664]	; (8004700 <_dtoa_r+0x320>)
 8004468:	9306      	str	r3, [sp, #24]
 800446a:	3308      	adds	r3, #8
 800446c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	9806      	ldr	r0, [sp, #24]
 8004472:	b015      	add	sp, #84	; 0x54
 8004474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004478:	4ba0      	ldr	r3, [pc, #640]	; (80046fc <_dtoa_r+0x31c>)
 800447a:	9306      	str	r3, [sp, #24]
 800447c:	3303      	adds	r3, #3
 800447e:	e7f5      	b.n	800446c <_dtoa_r+0x8c>
 8004480:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004484:	2200      	movs	r2, #0
 8004486:	2300      	movs	r3, #0
 8004488:	4630      	mov	r0, r6
 800448a:	4639      	mov	r1, r7
 800448c:	f7fc fa9c 	bl	80009c8 <__aeabi_dcmpeq>
 8004490:	4682      	mov	sl, r0
 8004492:	b160      	cbz	r0, 80044ae <_dtoa_r+0xce>
 8004494:	2301      	movs	r3, #1
 8004496:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8520 	beq.w	8004ee2 <_dtoa_r+0xb02>
 80044a2:	4b98      	ldr	r3, [pc, #608]	; (8004704 <_dtoa_r+0x324>)
 80044a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	9306      	str	r3, [sp, #24]
 80044ac:	e7e0      	b.n	8004470 <_dtoa_r+0x90>
 80044ae:	ab12      	add	r3, sp, #72	; 0x48
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	ab13      	add	r3, sp, #76	; 0x4c
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	4632      	mov	r2, r6
 80044b8:	463b      	mov	r3, r7
 80044ba:	4620      	mov	r0, r4
 80044bc:	f001 f9de 	bl	800587c <__d2b>
 80044c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80044c4:	4683      	mov	fp, r0
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	d07d      	beq.n	80045c6 <_dtoa_r+0x1e6>
 80044ca:	46b0      	mov	r8, r6
 80044cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80044d0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80044d4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80044d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80044dc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80044e0:	2200      	movs	r2, #0
 80044e2:	4b89      	ldr	r3, [pc, #548]	; (8004708 <_dtoa_r+0x328>)
 80044e4:	4640      	mov	r0, r8
 80044e6:	4649      	mov	r1, r9
 80044e8:	f7fb fe4e 	bl	8000188 <__aeabi_dsub>
 80044ec:	a37c      	add	r3, pc, #496	; (adr r3, 80046e0 <_dtoa_r+0x300>)
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	f7fc f801 	bl	80004f8 <__aeabi_dmul>
 80044f6:	a37c      	add	r3, pc, #496	; (adr r3, 80046e8 <_dtoa_r+0x308>)
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f7fb fe46 	bl	800018c <__adddf3>
 8004500:	4606      	mov	r6, r0
 8004502:	4628      	mov	r0, r5
 8004504:	460f      	mov	r7, r1
 8004506:	f7fb ff8d 	bl	8000424 <__aeabi_i2d>
 800450a:	a379      	add	r3, pc, #484	; (adr r3, 80046f0 <_dtoa_r+0x310>)
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	f7fb fff2 	bl	80004f8 <__aeabi_dmul>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4630      	mov	r0, r6
 800451a:	4639      	mov	r1, r7
 800451c:	f7fb fe36 	bl	800018c <__adddf3>
 8004520:	4606      	mov	r6, r0
 8004522:	460f      	mov	r7, r1
 8004524:	f7fc fa98 	bl	8000a58 <__aeabi_d2iz>
 8004528:	2200      	movs	r2, #0
 800452a:	4682      	mov	sl, r0
 800452c:	2300      	movs	r3, #0
 800452e:	4630      	mov	r0, r6
 8004530:	4639      	mov	r1, r7
 8004532:	f7fc fa53 	bl	80009dc <__aeabi_dcmplt>
 8004536:	b148      	cbz	r0, 800454c <_dtoa_r+0x16c>
 8004538:	4650      	mov	r0, sl
 800453a:	f7fb ff73 	bl	8000424 <__aeabi_i2d>
 800453e:	4632      	mov	r2, r6
 8004540:	463b      	mov	r3, r7
 8004542:	f7fc fa41 	bl	80009c8 <__aeabi_dcmpeq>
 8004546:	b908      	cbnz	r0, 800454c <_dtoa_r+0x16c>
 8004548:	f10a 3aff 	add.w	sl, sl, #4294967295
 800454c:	f1ba 0f16 	cmp.w	sl, #22
 8004550:	d85a      	bhi.n	8004608 <_dtoa_r+0x228>
 8004552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004556:	496d      	ldr	r1, [pc, #436]	; (800470c <_dtoa_r+0x32c>)
 8004558:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800455c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004560:	f7fc fa5a 	bl	8000a18 <__aeabi_dcmpgt>
 8004564:	2800      	cmp	r0, #0
 8004566:	d051      	beq.n	800460c <_dtoa_r+0x22c>
 8004568:	2300      	movs	r3, #0
 800456a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800456e:	930d      	str	r3, [sp, #52]	; 0x34
 8004570:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004572:	1b5d      	subs	r5, r3, r5
 8004574:	1e6b      	subs	r3, r5, #1
 8004576:	9307      	str	r3, [sp, #28]
 8004578:	bf43      	ittte	mi
 800457a:	2300      	movmi	r3, #0
 800457c:	f1c5 0901 	rsbmi	r9, r5, #1
 8004580:	9307      	strmi	r3, [sp, #28]
 8004582:	f04f 0900 	movpl.w	r9, #0
 8004586:	f1ba 0f00 	cmp.w	sl, #0
 800458a:	db41      	blt.n	8004610 <_dtoa_r+0x230>
 800458c:	9b07      	ldr	r3, [sp, #28]
 800458e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004592:	4453      	add	r3, sl
 8004594:	9307      	str	r3, [sp, #28]
 8004596:	2300      	movs	r3, #0
 8004598:	9308      	str	r3, [sp, #32]
 800459a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800459c:	2b09      	cmp	r3, #9
 800459e:	f200 808f 	bhi.w	80046c0 <_dtoa_r+0x2e0>
 80045a2:	2b05      	cmp	r3, #5
 80045a4:	bfc4      	itt	gt
 80045a6:	3b04      	subgt	r3, #4
 80045a8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80045aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80045ac:	bfc8      	it	gt
 80045ae:	2500      	movgt	r5, #0
 80045b0:	f1a3 0302 	sub.w	r3, r3, #2
 80045b4:	bfd8      	it	le
 80045b6:	2501      	movle	r5, #1
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	f200 808d 	bhi.w	80046d8 <_dtoa_r+0x2f8>
 80045be:	e8df f003 	tbb	[pc, r3]
 80045c2:	7d7b      	.short	0x7d7b
 80045c4:	6f2f      	.short	0x6f2f
 80045c6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80045ca:	441d      	add	r5, r3
 80045cc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80045d0:	2820      	cmp	r0, #32
 80045d2:	dd13      	ble.n	80045fc <_dtoa_r+0x21c>
 80045d4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80045d8:	9b02      	ldr	r3, [sp, #8]
 80045da:	fa08 f800 	lsl.w	r8, r8, r0
 80045de:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80045e2:	fa23 f000 	lsr.w	r0, r3, r0
 80045e6:	ea48 0000 	orr.w	r0, r8, r0
 80045ea:	f7fb ff0b 	bl	8000404 <__aeabi_ui2d>
 80045ee:	2301      	movs	r3, #1
 80045f0:	4680      	mov	r8, r0
 80045f2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80045f6:	3d01      	subs	r5, #1
 80045f8:	9310      	str	r3, [sp, #64]	; 0x40
 80045fa:	e771      	b.n	80044e0 <_dtoa_r+0x100>
 80045fc:	9b02      	ldr	r3, [sp, #8]
 80045fe:	f1c0 0020 	rsb	r0, r0, #32
 8004602:	fa03 f000 	lsl.w	r0, r3, r0
 8004606:	e7f0      	b.n	80045ea <_dtoa_r+0x20a>
 8004608:	2301      	movs	r3, #1
 800460a:	e7b0      	b.n	800456e <_dtoa_r+0x18e>
 800460c:	900d      	str	r0, [sp, #52]	; 0x34
 800460e:	e7af      	b.n	8004570 <_dtoa_r+0x190>
 8004610:	f1ca 0300 	rsb	r3, sl, #0
 8004614:	9308      	str	r3, [sp, #32]
 8004616:	2300      	movs	r3, #0
 8004618:	eba9 090a 	sub.w	r9, r9, sl
 800461c:	930c      	str	r3, [sp, #48]	; 0x30
 800461e:	e7bc      	b.n	800459a <_dtoa_r+0x1ba>
 8004620:	2301      	movs	r3, #1
 8004622:	9309      	str	r3, [sp, #36]	; 0x24
 8004624:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004626:	2b00      	cmp	r3, #0
 8004628:	dd74      	ble.n	8004714 <_dtoa_r+0x334>
 800462a:	4698      	mov	r8, r3
 800462c:	9304      	str	r3, [sp, #16]
 800462e:	2200      	movs	r2, #0
 8004630:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004632:	6072      	str	r2, [r6, #4]
 8004634:	2204      	movs	r2, #4
 8004636:	f102 0014 	add.w	r0, r2, #20
 800463a:	4298      	cmp	r0, r3
 800463c:	6871      	ldr	r1, [r6, #4]
 800463e:	d96e      	bls.n	800471e <_dtoa_r+0x33e>
 8004640:	4620      	mov	r0, r4
 8004642:	f000 fe8e 	bl	8005362 <_Balloc>
 8004646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004648:	6030      	str	r0, [r6, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f1b8 0f0e 	cmp.w	r8, #14
 8004650:	9306      	str	r3, [sp, #24]
 8004652:	f200 80ed 	bhi.w	8004830 <_dtoa_r+0x450>
 8004656:	2d00      	cmp	r5, #0
 8004658:	f000 80ea 	beq.w	8004830 <_dtoa_r+0x450>
 800465c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004660:	f1ba 0f00 	cmp.w	sl, #0
 8004664:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004668:	dd77      	ble.n	800475a <_dtoa_r+0x37a>
 800466a:	4a28      	ldr	r2, [pc, #160]	; (800470c <_dtoa_r+0x32c>)
 800466c:	f00a 030f 	and.w	r3, sl, #15
 8004670:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004674:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004678:	06f0      	lsls	r0, r6, #27
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004682:	d568      	bpl.n	8004756 <_dtoa_r+0x376>
 8004684:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <_dtoa_r+0x330>)
 800468a:	2503      	movs	r5, #3
 800468c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004690:	f7fc f85c 	bl	800074c <__aeabi_ddiv>
 8004694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004698:	f006 060f 	and.w	r6, r6, #15
 800469c:	4f1c      	ldr	r7, [pc, #112]	; (8004710 <_dtoa_r+0x330>)
 800469e:	e04f      	b.n	8004740 <_dtoa_r+0x360>
 80046a0:	2301      	movs	r3, #1
 80046a2:	9309      	str	r3, [sp, #36]	; 0x24
 80046a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80046a6:	4453      	add	r3, sl
 80046a8:	f103 0801 	add.w	r8, r3, #1
 80046ac:	9304      	str	r3, [sp, #16]
 80046ae:	4643      	mov	r3, r8
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	bfb8      	it	lt
 80046b4:	2301      	movlt	r3, #1
 80046b6:	e7ba      	b.n	800462e <_dtoa_r+0x24e>
 80046b8:	2300      	movs	r3, #0
 80046ba:	e7b2      	b.n	8004622 <_dtoa_r+0x242>
 80046bc:	2300      	movs	r3, #0
 80046be:	e7f0      	b.n	80046a2 <_dtoa_r+0x2c2>
 80046c0:	2501      	movs	r5, #1
 80046c2:	2300      	movs	r3, #0
 80046c4:	9509      	str	r5, [sp, #36]	; 0x24
 80046c6:	931e      	str	r3, [sp, #120]	; 0x78
 80046c8:	f04f 33ff 	mov.w	r3, #4294967295
 80046cc:	2200      	movs	r2, #0
 80046ce:	9304      	str	r3, [sp, #16]
 80046d0:	4698      	mov	r8, r3
 80046d2:	2312      	movs	r3, #18
 80046d4:	921f      	str	r2, [sp, #124]	; 0x7c
 80046d6:	e7aa      	b.n	800462e <_dtoa_r+0x24e>
 80046d8:	2301      	movs	r3, #1
 80046da:	9309      	str	r3, [sp, #36]	; 0x24
 80046dc:	e7f4      	b.n	80046c8 <_dtoa_r+0x2e8>
 80046de:	bf00      	nop
 80046e0:	636f4361 	.word	0x636f4361
 80046e4:	3fd287a7 	.word	0x3fd287a7
 80046e8:	8b60c8b3 	.word	0x8b60c8b3
 80046ec:	3fc68a28 	.word	0x3fc68a28
 80046f0:	509f79fb 	.word	0x509f79fb
 80046f4:	3fd34413 	.word	0x3fd34413
 80046f8:	7ff00000 	.word	0x7ff00000
 80046fc:	0800603d 	.word	0x0800603d
 8004700:	08006034 	.word	0x08006034
 8004704:	08006011 	.word	0x08006011
 8004708:	3ff80000 	.word	0x3ff80000
 800470c:	080060d0 	.word	0x080060d0
 8004710:	080060a8 	.word	0x080060a8
 8004714:	2301      	movs	r3, #1
 8004716:	9304      	str	r3, [sp, #16]
 8004718:	4698      	mov	r8, r3
 800471a:	461a      	mov	r2, r3
 800471c:	e7da      	b.n	80046d4 <_dtoa_r+0x2f4>
 800471e:	3101      	adds	r1, #1
 8004720:	6071      	str	r1, [r6, #4]
 8004722:	0052      	lsls	r2, r2, #1
 8004724:	e787      	b.n	8004636 <_dtoa_r+0x256>
 8004726:	07f1      	lsls	r1, r6, #31
 8004728:	d508      	bpl.n	800473c <_dtoa_r+0x35c>
 800472a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800472e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004732:	f7fb fee1 	bl	80004f8 <__aeabi_dmul>
 8004736:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800473a:	3501      	adds	r5, #1
 800473c:	1076      	asrs	r6, r6, #1
 800473e:	3708      	adds	r7, #8
 8004740:	2e00      	cmp	r6, #0
 8004742:	d1f0      	bne.n	8004726 <_dtoa_r+0x346>
 8004744:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800474c:	f7fb fffe 	bl	800074c <__aeabi_ddiv>
 8004750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004754:	e01b      	b.n	800478e <_dtoa_r+0x3ae>
 8004756:	2502      	movs	r5, #2
 8004758:	e7a0      	b.n	800469c <_dtoa_r+0x2bc>
 800475a:	f000 80a4 	beq.w	80048a6 <_dtoa_r+0x4c6>
 800475e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004762:	f1ca 0600 	rsb	r6, sl, #0
 8004766:	4ba0      	ldr	r3, [pc, #640]	; (80049e8 <_dtoa_r+0x608>)
 8004768:	f006 020f 	and.w	r2, r6, #15
 800476c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f7fb fec0 	bl	80004f8 <__aeabi_dmul>
 8004778:	2502      	movs	r5, #2
 800477a:	2300      	movs	r3, #0
 800477c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004780:	4f9a      	ldr	r7, [pc, #616]	; (80049ec <_dtoa_r+0x60c>)
 8004782:	1136      	asrs	r6, r6, #4
 8004784:	2e00      	cmp	r6, #0
 8004786:	f040 8083 	bne.w	8004890 <_dtoa_r+0x4b0>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e0      	bne.n	8004750 <_dtoa_r+0x370>
 800478e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 808a 	beq.w	80048aa <_dtoa_r+0x4ca>
 8004796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800479a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800479e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80047a2:	2200      	movs	r2, #0
 80047a4:	4b92      	ldr	r3, [pc, #584]	; (80049f0 <_dtoa_r+0x610>)
 80047a6:	f7fc f919 	bl	80009dc <__aeabi_dcmplt>
 80047aa:	2800      	cmp	r0, #0
 80047ac:	d07d      	beq.n	80048aa <_dtoa_r+0x4ca>
 80047ae:	f1b8 0f00 	cmp.w	r8, #0
 80047b2:	d07a      	beq.n	80048aa <_dtoa_r+0x4ca>
 80047b4:	9b04      	ldr	r3, [sp, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	dd36      	ble.n	8004828 <_dtoa_r+0x448>
 80047ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80047be:	2200      	movs	r2, #0
 80047c0:	4b8c      	ldr	r3, [pc, #560]	; (80049f4 <_dtoa_r+0x614>)
 80047c2:	f7fb fe99 	bl	80004f8 <__aeabi_dmul>
 80047c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047ca:	9e04      	ldr	r6, [sp, #16]
 80047cc:	f10a 37ff 	add.w	r7, sl, #4294967295
 80047d0:	3501      	adds	r5, #1
 80047d2:	4628      	mov	r0, r5
 80047d4:	f7fb fe26 	bl	8000424 <__aeabi_i2d>
 80047d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047dc:	f7fb fe8c 	bl	80004f8 <__aeabi_dmul>
 80047e0:	2200      	movs	r2, #0
 80047e2:	4b85      	ldr	r3, [pc, #532]	; (80049f8 <_dtoa_r+0x618>)
 80047e4:	f7fb fcd2 	bl	800018c <__adddf3>
 80047e8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80047ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80047f0:	950b      	str	r5, [sp, #44]	; 0x2c
 80047f2:	2e00      	cmp	r6, #0
 80047f4:	d15c      	bne.n	80048b0 <_dtoa_r+0x4d0>
 80047f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047fa:	2200      	movs	r2, #0
 80047fc:	4b7f      	ldr	r3, [pc, #508]	; (80049fc <_dtoa_r+0x61c>)
 80047fe:	f7fb fcc3 	bl	8000188 <__aeabi_dsub>
 8004802:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004804:	462b      	mov	r3, r5
 8004806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800480a:	f7fc f905 	bl	8000a18 <__aeabi_dcmpgt>
 800480e:	2800      	cmp	r0, #0
 8004810:	f040 8281 	bne.w	8004d16 <_dtoa_r+0x936>
 8004814:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800481a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800481e:	f7fc f8dd 	bl	80009dc <__aeabi_dcmplt>
 8004822:	2800      	cmp	r0, #0
 8004824:	f040 8275 	bne.w	8004d12 <_dtoa_r+0x932>
 8004828:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800482c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004832:	2b00      	cmp	r3, #0
 8004834:	f2c0 814b 	blt.w	8004ace <_dtoa_r+0x6ee>
 8004838:	f1ba 0f0e 	cmp.w	sl, #14
 800483c:	f300 8147 	bgt.w	8004ace <_dtoa_r+0x6ee>
 8004840:	4b69      	ldr	r3, [pc, #420]	; (80049e8 <_dtoa_r+0x608>)
 8004842:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800484e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004850:	2b00      	cmp	r3, #0
 8004852:	f280 80d7 	bge.w	8004a04 <_dtoa_r+0x624>
 8004856:	f1b8 0f00 	cmp.w	r8, #0
 800485a:	f300 80d3 	bgt.w	8004a04 <_dtoa_r+0x624>
 800485e:	f040 8257 	bne.w	8004d10 <_dtoa_r+0x930>
 8004862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004866:	2200      	movs	r2, #0
 8004868:	4b64      	ldr	r3, [pc, #400]	; (80049fc <_dtoa_r+0x61c>)
 800486a:	f7fb fe45 	bl	80004f8 <__aeabi_dmul>
 800486e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004872:	f7fc f8c7 	bl	8000a04 <__aeabi_dcmpge>
 8004876:	4646      	mov	r6, r8
 8004878:	4647      	mov	r7, r8
 800487a:	2800      	cmp	r0, #0
 800487c:	f040 822d 	bne.w	8004cda <_dtoa_r+0x8fa>
 8004880:	9b06      	ldr	r3, [sp, #24]
 8004882:	9a06      	ldr	r2, [sp, #24]
 8004884:	1c5d      	adds	r5, r3, #1
 8004886:	2331      	movs	r3, #49	; 0x31
 8004888:	f10a 0a01 	add.w	sl, sl, #1
 800488c:	7013      	strb	r3, [r2, #0]
 800488e:	e228      	b.n	8004ce2 <_dtoa_r+0x902>
 8004890:	07f2      	lsls	r2, r6, #31
 8004892:	d505      	bpl.n	80048a0 <_dtoa_r+0x4c0>
 8004894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004898:	f7fb fe2e 	bl	80004f8 <__aeabi_dmul>
 800489c:	2301      	movs	r3, #1
 800489e:	3501      	adds	r5, #1
 80048a0:	1076      	asrs	r6, r6, #1
 80048a2:	3708      	adds	r7, #8
 80048a4:	e76e      	b.n	8004784 <_dtoa_r+0x3a4>
 80048a6:	2502      	movs	r5, #2
 80048a8:	e771      	b.n	800478e <_dtoa_r+0x3ae>
 80048aa:	4657      	mov	r7, sl
 80048ac:	4646      	mov	r6, r8
 80048ae:	e790      	b.n	80047d2 <_dtoa_r+0x3f2>
 80048b0:	4b4d      	ldr	r3, [pc, #308]	; (80049e8 <_dtoa_r+0x608>)
 80048b2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80048b6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80048ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d048      	beq.n	8004952 <_dtoa_r+0x572>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	2000      	movs	r0, #0
 80048c6:	494e      	ldr	r1, [pc, #312]	; (8004a00 <_dtoa_r+0x620>)
 80048c8:	f7fb ff40 	bl	800074c <__aeabi_ddiv>
 80048cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80048d0:	f7fb fc5a 	bl	8000188 <__aeabi_dsub>
 80048d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80048d8:	9d06      	ldr	r5, [sp, #24]
 80048da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048de:	f7fc f8bb 	bl	8000a58 <__aeabi_d2iz>
 80048e2:	9011      	str	r0, [sp, #68]	; 0x44
 80048e4:	f7fb fd9e 	bl	8000424 <__aeabi_i2d>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048f0:	f7fb fc4a 	bl	8000188 <__aeabi_dsub>
 80048f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048fa:	3330      	adds	r3, #48	; 0x30
 80048fc:	f805 3b01 	strb.w	r3, [r5], #1
 8004900:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004904:	f7fc f86a 	bl	80009dc <__aeabi_dcmplt>
 8004908:	2800      	cmp	r0, #0
 800490a:	d163      	bne.n	80049d4 <_dtoa_r+0x5f4>
 800490c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004910:	2000      	movs	r0, #0
 8004912:	4937      	ldr	r1, [pc, #220]	; (80049f0 <_dtoa_r+0x610>)
 8004914:	f7fb fc38 	bl	8000188 <__aeabi_dsub>
 8004918:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800491c:	f7fc f85e 	bl	80009dc <__aeabi_dcmplt>
 8004920:	2800      	cmp	r0, #0
 8004922:	f040 80b5 	bne.w	8004a90 <_dtoa_r+0x6b0>
 8004926:	9b06      	ldr	r3, [sp, #24]
 8004928:	1aeb      	subs	r3, r5, r3
 800492a:	429e      	cmp	r6, r3
 800492c:	f77f af7c 	ble.w	8004828 <_dtoa_r+0x448>
 8004930:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004934:	2200      	movs	r2, #0
 8004936:	4b2f      	ldr	r3, [pc, #188]	; (80049f4 <_dtoa_r+0x614>)
 8004938:	f7fb fdde 	bl	80004f8 <__aeabi_dmul>
 800493c:	2200      	movs	r2, #0
 800493e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004946:	4b2b      	ldr	r3, [pc, #172]	; (80049f4 <_dtoa_r+0x614>)
 8004948:	f7fb fdd6 	bl	80004f8 <__aeabi_dmul>
 800494c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004950:	e7c3      	b.n	80048da <_dtoa_r+0x4fa>
 8004952:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004956:	f7fb fdcf 	bl	80004f8 <__aeabi_dmul>
 800495a:	9b06      	ldr	r3, [sp, #24]
 800495c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004960:	199d      	adds	r5, r3, r6
 8004962:	461e      	mov	r6, r3
 8004964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004968:	f7fc f876 	bl	8000a58 <__aeabi_d2iz>
 800496c:	9011      	str	r0, [sp, #68]	; 0x44
 800496e:	f7fb fd59 	bl	8000424 <__aeabi_i2d>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800497a:	f7fb fc05 	bl	8000188 <__aeabi_dsub>
 800497e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004984:	3330      	adds	r3, #48	; 0x30
 8004986:	f806 3b01 	strb.w	r3, [r6], #1
 800498a:	42ae      	cmp	r6, r5
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	d124      	bne.n	80049dc <_dtoa_r+0x5fc>
 8004992:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004996:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <_dtoa_r+0x620>)
 8004998:	f7fb fbf8 	bl	800018c <__adddf3>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049a4:	f7fc f838 	bl	8000a18 <__aeabi_dcmpgt>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d171      	bne.n	8004a90 <_dtoa_r+0x6b0>
 80049ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80049b0:	2000      	movs	r0, #0
 80049b2:	4913      	ldr	r1, [pc, #76]	; (8004a00 <_dtoa_r+0x620>)
 80049b4:	f7fb fbe8 	bl	8000188 <__aeabi_dsub>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049c0:	f7fc f80c 	bl	80009dc <__aeabi_dcmplt>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	f43f af2f 	beq.w	8004828 <_dtoa_r+0x448>
 80049ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80049ce:	1e6a      	subs	r2, r5, #1
 80049d0:	2b30      	cmp	r3, #48	; 0x30
 80049d2:	d001      	beq.n	80049d8 <_dtoa_r+0x5f8>
 80049d4:	46ba      	mov	sl, r7
 80049d6:	e04a      	b.n	8004a6e <_dtoa_r+0x68e>
 80049d8:	4615      	mov	r5, r2
 80049da:	e7f6      	b.n	80049ca <_dtoa_r+0x5ea>
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <_dtoa_r+0x614>)
 80049de:	f7fb fd8b 	bl	80004f8 <__aeabi_dmul>
 80049e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049e6:	e7bd      	b.n	8004964 <_dtoa_r+0x584>
 80049e8:	080060d0 	.word	0x080060d0
 80049ec:	080060a8 	.word	0x080060a8
 80049f0:	3ff00000 	.word	0x3ff00000
 80049f4:	40240000 	.word	0x40240000
 80049f8:	401c0000 	.word	0x401c0000
 80049fc:	40140000 	.word	0x40140000
 8004a00:	3fe00000 	.word	0x3fe00000
 8004a04:	9d06      	ldr	r5, [sp, #24]
 8004a06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a0e:	4630      	mov	r0, r6
 8004a10:	4639      	mov	r1, r7
 8004a12:	f7fb fe9b 	bl	800074c <__aeabi_ddiv>
 8004a16:	f7fc f81f 	bl	8000a58 <__aeabi_d2iz>
 8004a1a:	4681      	mov	r9, r0
 8004a1c:	f7fb fd02 	bl	8000424 <__aeabi_i2d>
 8004a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a24:	f7fb fd68 	bl	80004f8 <__aeabi_dmul>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	4639      	mov	r1, r7
 8004a30:	f7fb fbaa 	bl	8000188 <__aeabi_dsub>
 8004a34:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004a38:	f805 6b01 	strb.w	r6, [r5], #1
 8004a3c:	9e06      	ldr	r6, [sp, #24]
 8004a3e:	4602      	mov	r2, r0
 8004a40:	1bae      	subs	r6, r5, r6
 8004a42:	45b0      	cmp	r8, r6
 8004a44:	460b      	mov	r3, r1
 8004a46:	d135      	bne.n	8004ab4 <_dtoa_r+0x6d4>
 8004a48:	f7fb fba0 	bl	800018c <__adddf3>
 8004a4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a50:	4606      	mov	r6, r0
 8004a52:	460f      	mov	r7, r1
 8004a54:	f7fb ffe0 	bl	8000a18 <__aeabi_dcmpgt>
 8004a58:	b9c8      	cbnz	r0, 8004a8e <_dtoa_r+0x6ae>
 8004a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a5e:	4630      	mov	r0, r6
 8004a60:	4639      	mov	r1, r7
 8004a62:	f7fb ffb1 	bl	80009c8 <__aeabi_dcmpeq>
 8004a66:	b110      	cbz	r0, 8004a6e <_dtoa_r+0x68e>
 8004a68:	f019 0f01 	tst.w	r9, #1
 8004a6c:	d10f      	bne.n	8004a8e <_dtoa_r+0x6ae>
 8004a6e:	4659      	mov	r1, fp
 8004a70:	4620      	mov	r0, r4
 8004a72:	f000 fcaa 	bl	80053ca <_Bfree>
 8004a76:	2300      	movs	r3, #0
 8004a78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a7a:	702b      	strb	r3, [r5, #0]
 8004a7c:	f10a 0301 	add.w	r3, sl, #1
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f43f acf3 	beq.w	8004470 <_dtoa_r+0x90>
 8004a8a:	601d      	str	r5, [r3, #0]
 8004a8c:	e4f0      	b.n	8004470 <_dtoa_r+0x90>
 8004a8e:	4657      	mov	r7, sl
 8004a90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004a94:	1e6b      	subs	r3, r5, #1
 8004a96:	2a39      	cmp	r2, #57	; 0x39
 8004a98:	d106      	bne.n	8004aa8 <_dtoa_r+0x6c8>
 8004a9a:	9a06      	ldr	r2, [sp, #24]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d107      	bne.n	8004ab0 <_dtoa_r+0x6d0>
 8004aa0:	2330      	movs	r3, #48	; 0x30
 8004aa2:	7013      	strb	r3, [r2, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	3701      	adds	r7, #1
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	3201      	adds	r2, #1
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	e791      	b.n	80049d4 <_dtoa_r+0x5f4>
 8004ab0:	461d      	mov	r5, r3
 8004ab2:	e7ed      	b.n	8004a90 <_dtoa_r+0x6b0>
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	4b99      	ldr	r3, [pc, #612]	; (8004d1c <_dtoa_r+0x93c>)
 8004ab8:	f7fb fd1e 	bl	80004f8 <__aeabi_dmul>
 8004abc:	2200      	movs	r2, #0
 8004abe:	2300      	movs	r3, #0
 8004ac0:	4606      	mov	r6, r0
 8004ac2:	460f      	mov	r7, r1
 8004ac4:	f7fb ff80 	bl	80009c8 <__aeabi_dcmpeq>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d09e      	beq.n	8004a0a <_dtoa_r+0x62a>
 8004acc:	e7cf      	b.n	8004a6e <_dtoa_r+0x68e>
 8004ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ad0:	2a00      	cmp	r2, #0
 8004ad2:	f000 8088 	beq.w	8004be6 <_dtoa_r+0x806>
 8004ad6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004ad8:	2a01      	cmp	r2, #1
 8004ada:	dc6d      	bgt.n	8004bb8 <_dtoa_r+0x7d8>
 8004adc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ade:	2a00      	cmp	r2, #0
 8004ae0:	d066      	beq.n	8004bb0 <_dtoa_r+0x7d0>
 8004ae2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ae6:	464d      	mov	r5, r9
 8004ae8:	9e08      	ldr	r6, [sp, #32]
 8004aea:	9a07      	ldr	r2, [sp, #28]
 8004aec:	2101      	movs	r1, #1
 8004aee:	441a      	add	r2, r3
 8004af0:	4620      	mov	r0, r4
 8004af2:	4499      	add	r9, r3
 8004af4:	9207      	str	r2, [sp, #28]
 8004af6:	f000 fd08 	bl	800550a <__i2b>
 8004afa:	4607      	mov	r7, r0
 8004afc:	2d00      	cmp	r5, #0
 8004afe:	dd0b      	ble.n	8004b18 <_dtoa_r+0x738>
 8004b00:	9b07      	ldr	r3, [sp, #28]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	dd08      	ble.n	8004b18 <_dtoa_r+0x738>
 8004b06:	42ab      	cmp	r3, r5
 8004b08:	bfa8      	it	ge
 8004b0a:	462b      	movge	r3, r5
 8004b0c:	9a07      	ldr	r2, [sp, #28]
 8004b0e:	eba9 0903 	sub.w	r9, r9, r3
 8004b12:	1aed      	subs	r5, r5, r3
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	9307      	str	r3, [sp, #28]
 8004b18:	9b08      	ldr	r3, [sp, #32]
 8004b1a:	b1eb      	cbz	r3, 8004b58 <_dtoa_r+0x778>
 8004b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d065      	beq.n	8004bee <_dtoa_r+0x80e>
 8004b22:	b18e      	cbz	r6, 8004b48 <_dtoa_r+0x768>
 8004b24:	4639      	mov	r1, r7
 8004b26:	4632      	mov	r2, r6
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f000 fd8d 	bl	8005648 <__pow5mult>
 8004b2e:	465a      	mov	r2, fp
 8004b30:	4601      	mov	r1, r0
 8004b32:	4607      	mov	r7, r0
 8004b34:	4620      	mov	r0, r4
 8004b36:	f000 fcf1 	bl	800551c <__multiply>
 8004b3a:	4659      	mov	r1, fp
 8004b3c:	900a      	str	r0, [sp, #40]	; 0x28
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f000 fc43 	bl	80053ca <_Bfree>
 8004b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b46:	469b      	mov	fp, r3
 8004b48:	9b08      	ldr	r3, [sp, #32]
 8004b4a:	1b9a      	subs	r2, r3, r6
 8004b4c:	d004      	beq.n	8004b58 <_dtoa_r+0x778>
 8004b4e:	4659      	mov	r1, fp
 8004b50:	4620      	mov	r0, r4
 8004b52:	f000 fd79 	bl	8005648 <__pow5mult>
 8004b56:	4683      	mov	fp, r0
 8004b58:	2101      	movs	r1, #1
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f000 fcd5 	bl	800550a <__i2b>
 8004b60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b62:	4606      	mov	r6, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 81c6 	beq.w	8004ef6 <_dtoa_r+0xb16>
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4601      	mov	r1, r0
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f000 fd6a 	bl	8005648 <__pow5mult>
 8004b74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004b76:	4606      	mov	r6, r0
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	dc3e      	bgt.n	8004bfa <_dtoa_r+0x81a>
 8004b7c:	9b02      	ldr	r3, [sp, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d137      	bne.n	8004bf2 <_dtoa_r+0x812>
 8004b82:	9b03      	ldr	r3, [sp, #12]
 8004b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d134      	bne.n	8004bf6 <_dtoa_r+0x816>
 8004b8c:	9b03      	ldr	r3, [sp, #12]
 8004b8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b92:	0d1b      	lsrs	r3, r3, #20
 8004b94:	051b      	lsls	r3, r3, #20
 8004b96:	b12b      	cbz	r3, 8004ba4 <_dtoa_r+0x7c4>
 8004b98:	9b07      	ldr	r3, [sp, #28]
 8004b9a:	f109 0901 	add.w	r9, r9, #1
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	9307      	str	r3, [sp, #28]
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	9308      	str	r3, [sp, #32]
 8004ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d128      	bne.n	8004bfe <_dtoa_r+0x81e>
 8004bac:	2001      	movs	r0, #1
 8004bae:	e02e      	b.n	8004c0e <_dtoa_r+0x82e>
 8004bb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004bb2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004bb6:	e796      	b.n	8004ae6 <_dtoa_r+0x706>
 8004bb8:	9b08      	ldr	r3, [sp, #32]
 8004bba:	f108 36ff 	add.w	r6, r8, #4294967295
 8004bbe:	42b3      	cmp	r3, r6
 8004bc0:	bfb7      	itett	lt
 8004bc2:	9b08      	ldrlt	r3, [sp, #32]
 8004bc4:	1b9e      	subge	r6, r3, r6
 8004bc6:	1af2      	sublt	r2, r6, r3
 8004bc8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004bca:	bfbf      	itttt	lt
 8004bcc:	9608      	strlt	r6, [sp, #32]
 8004bce:	189b      	addlt	r3, r3, r2
 8004bd0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004bd2:	2600      	movlt	r6, #0
 8004bd4:	f1b8 0f00 	cmp.w	r8, #0
 8004bd8:	bfb9      	ittee	lt
 8004bda:	eba9 0508 	sublt.w	r5, r9, r8
 8004bde:	2300      	movlt	r3, #0
 8004be0:	464d      	movge	r5, r9
 8004be2:	4643      	movge	r3, r8
 8004be4:	e781      	b.n	8004aea <_dtoa_r+0x70a>
 8004be6:	9e08      	ldr	r6, [sp, #32]
 8004be8:	464d      	mov	r5, r9
 8004bea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004bec:	e786      	b.n	8004afc <_dtoa_r+0x71c>
 8004bee:	9a08      	ldr	r2, [sp, #32]
 8004bf0:	e7ad      	b.n	8004b4e <_dtoa_r+0x76e>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e7d6      	b.n	8004ba4 <_dtoa_r+0x7c4>
 8004bf6:	9b02      	ldr	r3, [sp, #8]
 8004bf8:	e7d4      	b.n	8004ba4 <_dtoa_r+0x7c4>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9308      	str	r3, [sp, #32]
 8004bfe:	6933      	ldr	r3, [r6, #16]
 8004c00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004c04:	6918      	ldr	r0, [r3, #16]
 8004c06:	f000 fc32 	bl	800546e <__hi0bits>
 8004c0a:	f1c0 0020 	rsb	r0, r0, #32
 8004c0e:	9b07      	ldr	r3, [sp, #28]
 8004c10:	4418      	add	r0, r3
 8004c12:	f010 001f 	ands.w	r0, r0, #31
 8004c16:	d047      	beq.n	8004ca8 <_dtoa_r+0x8c8>
 8004c18:	f1c0 0320 	rsb	r3, r0, #32
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	dd3b      	ble.n	8004c98 <_dtoa_r+0x8b8>
 8004c20:	9b07      	ldr	r3, [sp, #28]
 8004c22:	f1c0 001c 	rsb	r0, r0, #28
 8004c26:	4481      	add	r9, r0
 8004c28:	4405      	add	r5, r0
 8004c2a:	4403      	add	r3, r0
 8004c2c:	9307      	str	r3, [sp, #28]
 8004c2e:	f1b9 0f00 	cmp.w	r9, #0
 8004c32:	dd05      	ble.n	8004c40 <_dtoa_r+0x860>
 8004c34:	4659      	mov	r1, fp
 8004c36:	464a      	mov	r2, r9
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f000 fd53 	bl	80056e4 <__lshift>
 8004c3e:	4683      	mov	fp, r0
 8004c40:	9b07      	ldr	r3, [sp, #28]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	dd05      	ble.n	8004c52 <_dtoa_r+0x872>
 8004c46:	4631      	mov	r1, r6
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f000 fd4a 	bl	80056e4 <__lshift>
 8004c50:	4606      	mov	r6, r0
 8004c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c54:	b353      	cbz	r3, 8004cac <_dtoa_r+0x8cc>
 8004c56:	4631      	mov	r1, r6
 8004c58:	4658      	mov	r0, fp
 8004c5a:	f000 fd97 	bl	800578c <__mcmp>
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	da24      	bge.n	8004cac <_dtoa_r+0x8cc>
 8004c62:	2300      	movs	r3, #0
 8004c64:	4659      	mov	r1, fp
 8004c66:	220a      	movs	r2, #10
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f000 fbc5 	bl	80053f8 <__multadd>
 8004c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c74:	4683      	mov	fp, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 8144 	beq.w	8004f04 <_dtoa_r+0xb24>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4639      	mov	r1, r7
 8004c80:	220a      	movs	r2, #10
 8004c82:	4620      	mov	r0, r4
 8004c84:	f000 fbb8 	bl	80053f8 <__multadd>
 8004c88:	9b04      	ldr	r3, [sp, #16]
 8004c8a:	4607      	mov	r7, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	dc4d      	bgt.n	8004d2c <_dtoa_r+0x94c>
 8004c90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	dd4a      	ble.n	8004d2c <_dtoa_r+0x94c>
 8004c96:	e011      	b.n	8004cbc <_dtoa_r+0x8dc>
 8004c98:	d0c9      	beq.n	8004c2e <_dtoa_r+0x84e>
 8004c9a:	9a07      	ldr	r2, [sp, #28]
 8004c9c:	331c      	adds	r3, #28
 8004c9e:	441a      	add	r2, r3
 8004ca0:	4499      	add	r9, r3
 8004ca2:	441d      	add	r5, r3
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	e7c1      	b.n	8004c2c <_dtoa_r+0x84c>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	e7f6      	b.n	8004c9a <_dtoa_r+0x8ba>
 8004cac:	f1b8 0f00 	cmp.w	r8, #0
 8004cb0:	dc36      	bgt.n	8004d20 <_dtoa_r+0x940>
 8004cb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	dd33      	ble.n	8004d20 <_dtoa_r+0x940>
 8004cb8:	f8cd 8010 	str.w	r8, [sp, #16]
 8004cbc:	9b04      	ldr	r3, [sp, #16]
 8004cbe:	b963      	cbnz	r3, 8004cda <_dtoa_r+0x8fa>
 8004cc0:	4631      	mov	r1, r6
 8004cc2:	2205      	movs	r2, #5
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f000 fb97 	bl	80053f8 <__multadd>
 8004cca:	4601      	mov	r1, r0
 8004ccc:	4606      	mov	r6, r0
 8004cce:	4658      	mov	r0, fp
 8004cd0:	f000 fd5c 	bl	800578c <__mcmp>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	f73f add3 	bgt.w	8004880 <_dtoa_r+0x4a0>
 8004cda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004cdc:	9d06      	ldr	r5, [sp, #24]
 8004cde:	ea6f 0a03 	mvn.w	sl, r3
 8004ce2:	f04f 0900 	mov.w	r9, #0
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f000 fb6e 	bl	80053ca <_Bfree>
 8004cee:	2f00      	cmp	r7, #0
 8004cf0:	f43f aebd 	beq.w	8004a6e <_dtoa_r+0x68e>
 8004cf4:	f1b9 0f00 	cmp.w	r9, #0
 8004cf8:	d005      	beq.n	8004d06 <_dtoa_r+0x926>
 8004cfa:	45b9      	cmp	r9, r7
 8004cfc:	d003      	beq.n	8004d06 <_dtoa_r+0x926>
 8004cfe:	4649      	mov	r1, r9
 8004d00:	4620      	mov	r0, r4
 8004d02:	f000 fb62 	bl	80053ca <_Bfree>
 8004d06:	4639      	mov	r1, r7
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f000 fb5e 	bl	80053ca <_Bfree>
 8004d0e:	e6ae      	b.n	8004a6e <_dtoa_r+0x68e>
 8004d10:	2600      	movs	r6, #0
 8004d12:	4637      	mov	r7, r6
 8004d14:	e7e1      	b.n	8004cda <_dtoa_r+0x8fa>
 8004d16:	46ba      	mov	sl, r7
 8004d18:	4637      	mov	r7, r6
 8004d1a:	e5b1      	b.n	8004880 <_dtoa_r+0x4a0>
 8004d1c:	40240000 	.word	0x40240000
 8004d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d22:	f8cd 8010 	str.w	r8, [sp, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80f3 	beq.w	8004f12 <_dtoa_r+0xb32>
 8004d2c:	2d00      	cmp	r5, #0
 8004d2e:	dd05      	ble.n	8004d3c <_dtoa_r+0x95c>
 8004d30:	4639      	mov	r1, r7
 8004d32:	462a      	mov	r2, r5
 8004d34:	4620      	mov	r0, r4
 8004d36:	f000 fcd5 	bl	80056e4 <__lshift>
 8004d3a:	4607      	mov	r7, r0
 8004d3c:	9b08      	ldr	r3, [sp, #32]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d04c      	beq.n	8004ddc <_dtoa_r+0x9fc>
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4620      	mov	r0, r4
 8004d46:	f000 fb0c 	bl	8005362 <_Balloc>
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	f107 010c 	add.w	r1, r7, #12
 8004d52:	3202      	adds	r2, #2
 8004d54:	0092      	lsls	r2, r2, #2
 8004d56:	300c      	adds	r0, #12
 8004d58:	f000 faf8 	bl	800534c <memcpy>
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	4629      	mov	r1, r5
 8004d60:	4620      	mov	r0, r4
 8004d62:	f000 fcbf 	bl	80056e4 <__lshift>
 8004d66:	46b9      	mov	r9, r7
 8004d68:	4607      	mov	r7, r0
 8004d6a:	9b06      	ldr	r3, [sp, #24]
 8004d6c:	9307      	str	r3, [sp, #28]
 8004d6e:	9b02      	ldr	r3, [sp, #8]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	9308      	str	r3, [sp, #32]
 8004d76:	4631      	mov	r1, r6
 8004d78:	4658      	mov	r0, fp
 8004d7a:	f7ff faa3 	bl	80042c4 <quorem>
 8004d7e:	4649      	mov	r1, r9
 8004d80:	4605      	mov	r5, r0
 8004d82:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004d86:	4658      	mov	r0, fp
 8004d88:	f000 fd00 	bl	800578c <__mcmp>
 8004d8c:	463a      	mov	r2, r7
 8004d8e:	9002      	str	r0, [sp, #8]
 8004d90:	4631      	mov	r1, r6
 8004d92:	4620      	mov	r0, r4
 8004d94:	f000 fd14 	bl	80057c0 <__mdiff>
 8004d98:	68c3      	ldr	r3, [r0, #12]
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	bb03      	cbnz	r3, 8004de0 <_dtoa_r+0xa00>
 8004d9e:	4601      	mov	r1, r0
 8004da0:	9009      	str	r0, [sp, #36]	; 0x24
 8004da2:	4658      	mov	r0, fp
 8004da4:	f000 fcf2 	bl	800578c <__mcmp>
 8004da8:	4603      	mov	r3, r0
 8004daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dac:	4611      	mov	r1, r2
 8004dae:	4620      	mov	r0, r4
 8004db0:	9309      	str	r3, [sp, #36]	; 0x24
 8004db2:	f000 fb0a 	bl	80053ca <_Bfree>
 8004db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db8:	b9a3      	cbnz	r3, 8004de4 <_dtoa_r+0xa04>
 8004dba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004dbc:	b992      	cbnz	r2, 8004de4 <_dtoa_r+0xa04>
 8004dbe:	9a08      	ldr	r2, [sp, #32]
 8004dc0:	b982      	cbnz	r2, 8004de4 <_dtoa_r+0xa04>
 8004dc2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004dc6:	d029      	beq.n	8004e1c <_dtoa_r+0xa3c>
 8004dc8:	9b02      	ldr	r3, [sp, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	dd01      	ble.n	8004dd2 <_dtoa_r+0x9f2>
 8004dce:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004dd2:	9b07      	ldr	r3, [sp, #28]
 8004dd4:	1c5d      	adds	r5, r3, #1
 8004dd6:	f883 8000 	strb.w	r8, [r3]
 8004dda:	e784      	b.n	8004ce6 <_dtoa_r+0x906>
 8004ddc:	4638      	mov	r0, r7
 8004dde:	e7c2      	b.n	8004d66 <_dtoa_r+0x986>
 8004de0:	2301      	movs	r3, #1
 8004de2:	e7e3      	b.n	8004dac <_dtoa_r+0x9cc>
 8004de4:	9a02      	ldr	r2, [sp, #8]
 8004de6:	2a00      	cmp	r2, #0
 8004de8:	db04      	blt.n	8004df4 <_dtoa_r+0xa14>
 8004dea:	d123      	bne.n	8004e34 <_dtoa_r+0xa54>
 8004dec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004dee:	bb0a      	cbnz	r2, 8004e34 <_dtoa_r+0xa54>
 8004df0:	9a08      	ldr	r2, [sp, #32]
 8004df2:	b9fa      	cbnz	r2, 8004e34 <_dtoa_r+0xa54>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	ddec      	ble.n	8004dd2 <_dtoa_r+0x9f2>
 8004df8:	4659      	mov	r1, fp
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f000 fc71 	bl	80056e4 <__lshift>
 8004e02:	4631      	mov	r1, r6
 8004e04:	4683      	mov	fp, r0
 8004e06:	f000 fcc1 	bl	800578c <__mcmp>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	dc03      	bgt.n	8004e16 <_dtoa_r+0xa36>
 8004e0e:	d1e0      	bne.n	8004dd2 <_dtoa_r+0x9f2>
 8004e10:	f018 0f01 	tst.w	r8, #1
 8004e14:	d0dd      	beq.n	8004dd2 <_dtoa_r+0x9f2>
 8004e16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004e1a:	d1d8      	bne.n	8004dce <_dtoa_r+0x9ee>
 8004e1c:	9b07      	ldr	r3, [sp, #28]
 8004e1e:	9a07      	ldr	r2, [sp, #28]
 8004e20:	1c5d      	adds	r5, r3, #1
 8004e22:	2339      	movs	r3, #57	; 0x39
 8004e24:	7013      	strb	r3, [r2, #0]
 8004e26:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e2a:	1e6a      	subs	r2, r5, #1
 8004e2c:	2b39      	cmp	r3, #57	; 0x39
 8004e2e:	d04d      	beq.n	8004ecc <_dtoa_r+0xaec>
 8004e30:	3301      	adds	r3, #1
 8004e32:	e052      	b.n	8004eda <_dtoa_r+0xafa>
 8004e34:	9a07      	ldr	r2, [sp, #28]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f102 0501 	add.w	r5, r2, #1
 8004e3c:	dd06      	ble.n	8004e4c <_dtoa_r+0xa6c>
 8004e3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004e42:	d0eb      	beq.n	8004e1c <_dtoa_r+0xa3c>
 8004e44:	f108 0801 	add.w	r8, r8, #1
 8004e48:	9b07      	ldr	r3, [sp, #28]
 8004e4a:	e7c4      	b.n	8004dd6 <_dtoa_r+0x9f6>
 8004e4c:	9b06      	ldr	r3, [sp, #24]
 8004e4e:	9a04      	ldr	r2, [sp, #16]
 8004e50:	1aeb      	subs	r3, r5, r3
 8004e52:	4293      	cmp	r3, r2
 8004e54:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004e58:	d021      	beq.n	8004e9e <_dtoa_r+0xabe>
 8004e5a:	4659      	mov	r1, fp
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	220a      	movs	r2, #10
 8004e60:	4620      	mov	r0, r4
 8004e62:	f000 fac9 	bl	80053f8 <__multadd>
 8004e66:	45b9      	cmp	r9, r7
 8004e68:	4683      	mov	fp, r0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	f04f 020a 	mov.w	r2, #10
 8004e72:	4649      	mov	r1, r9
 8004e74:	4620      	mov	r0, r4
 8004e76:	d105      	bne.n	8004e84 <_dtoa_r+0xaa4>
 8004e78:	f000 fabe 	bl	80053f8 <__multadd>
 8004e7c:	4681      	mov	r9, r0
 8004e7e:	4607      	mov	r7, r0
 8004e80:	9507      	str	r5, [sp, #28]
 8004e82:	e778      	b.n	8004d76 <_dtoa_r+0x996>
 8004e84:	f000 fab8 	bl	80053f8 <__multadd>
 8004e88:	4639      	mov	r1, r7
 8004e8a:	4681      	mov	r9, r0
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	220a      	movs	r2, #10
 8004e90:	4620      	mov	r0, r4
 8004e92:	f000 fab1 	bl	80053f8 <__multadd>
 8004e96:	4607      	mov	r7, r0
 8004e98:	e7f2      	b.n	8004e80 <_dtoa_r+0xaa0>
 8004e9a:	f04f 0900 	mov.w	r9, #0
 8004e9e:	4659      	mov	r1, fp
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f000 fc1e 	bl	80056e4 <__lshift>
 8004ea8:	4631      	mov	r1, r6
 8004eaa:	4683      	mov	fp, r0
 8004eac:	f000 fc6e 	bl	800578c <__mcmp>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	dcb8      	bgt.n	8004e26 <_dtoa_r+0xa46>
 8004eb4:	d102      	bne.n	8004ebc <_dtoa_r+0xadc>
 8004eb6:	f018 0f01 	tst.w	r8, #1
 8004eba:	d1b4      	bne.n	8004e26 <_dtoa_r+0xa46>
 8004ebc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004ec0:	1e6a      	subs	r2, r5, #1
 8004ec2:	2b30      	cmp	r3, #48	; 0x30
 8004ec4:	f47f af0f 	bne.w	8004ce6 <_dtoa_r+0x906>
 8004ec8:	4615      	mov	r5, r2
 8004eca:	e7f7      	b.n	8004ebc <_dtoa_r+0xadc>
 8004ecc:	9b06      	ldr	r3, [sp, #24]
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d105      	bne.n	8004ede <_dtoa_r+0xafe>
 8004ed2:	2331      	movs	r3, #49	; 0x31
 8004ed4:	9a06      	ldr	r2, [sp, #24]
 8004ed6:	f10a 0a01 	add.w	sl, sl, #1
 8004eda:	7013      	strb	r3, [r2, #0]
 8004edc:	e703      	b.n	8004ce6 <_dtoa_r+0x906>
 8004ede:	4615      	mov	r5, r2
 8004ee0:	e7a1      	b.n	8004e26 <_dtoa_r+0xa46>
 8004ee2:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <_dtoa_r+0xb60>)
 8004ee4:	f7ff bae1 	b.w	80044aa <_dtoa_r+0xca>
 8004ee8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f47f aabb 	bne.w	8004466 <_dtoa_r+0x86>
 8004ef0:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <_dtoa_r+0xb64>)
 8004ef2:	f7ff bada 	b.w	80044aa <_dtoa_r+0xca>
 8004ef6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	f77f ae3f 	ble.w	8004b7c <_dtoa_r+0x79c>
 8004efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f00:	9308      	str	r3, [sp, #32]
 8004f02:	e653      	b.n	8004bac <_dtoa_r+0x7cc>
 8004f04:	9b04      	ldr	r3, [sp, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	dc03      	bgt.n	8004f12 <_dtoa_r+0xb32>
 8004f0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	f73f aed5 	bgt.w	8004cbc <_dtoa_r+0x8dc>
 8004f12:	9d06      	ldr	r5, [sp, #24]
 8004f14:	4631      	mov	r1, r6
 8004f16:	4658      	mov	r0, fp
 8004f18:	f7ff f9d4 	bl	80042c4 <quorem>
 8004f1c:	9b06      	ldr	r3, [sp, #24]
 8004f1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004f22:	f805 8b01 	strb.w	r8, [r5], #1
 8004f26:	9a04      	ldr	r2, [sp, #16]
 8004f28:	1aeb      	subs	r3, r5, r3
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	ddb5      	ble.n	8004e9a <_dtoa_r+0xaba>
 8004f2e:	4659      	mov	r1, fp
 8004f30:	2300      	movs	r3, #0
 8004f32:	220a      	movs	r2, #10
 8004f34:	4620      	mov	r0, r4
 8004f36:	f000 fa5f 	bl	80053f8 <__multadd>
 8004f3a:	4683      	mov	fp, r0
 8004f3c:	e7ea      	b.n	8004f14 <_dtoa_r+0xb34>
 8004f3e:	bf00      	nop
 8004f40:	08006010 	.word	0x08006010
 8004f44:	08006034 	.word	0x08006034

08004f48 <__sflush_r>:
 8004f48:	898a      	ldrh	r2, [r1, #12]
 8004f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4e:	4605      	mov	r5, r0
 8004f50:	0710      	lsls	r0, r2, #28
 8004f52:	460c      	mov	r4, r1
 8004f54:	d458      	bmi.n	8005008 <__sflush_r+0xc0>
 8004f56:	684b      	ldr	r3, [r1, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	dc05      	bgt.n	8004f68 <__sflush_r+0x20>
 8004f5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	dc02      	bgt.n	8004f68 <__sflush_r+0x20>
 8004f62:	2000      	movs	r0, #0
 8004f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f6a:	2e00      	cmp	r6, #0
 8004f6c:	d0f9      	beq.n	8004f62 <__sflush_r+0x1a>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f74:	682f      	ldr	r7, [r5, #0]
 8004f76:	6a21      	ldr	r1, [r4, #32]
 8004f78:	602b      	str	r3, [r5, #0]
 8004f7a:	d032      	beq.n	8004fe2 <__sflush_r+0x9a>
 8004f7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	075a      	lsls	r2, r3, #29
 8004f82:	d505      	bpl.n	8004f90 <__sflush_r+0x48>
 8004f84:	6863      	ldr	r3, [r4, #4]
 8004f86:	1ac0      	subs	r0, r0, r3
 8004f88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f8a:	b10b      	cbz	r3, 8004f90 <__sflush_r+0x48>
 8004f8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f8e:	1ac0      	subs	r0, r0, r3
 8004f90:	2300      	movs	r3, #0
 8004f92:	4602      	mov	r2, r0
 8004f94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f96:	6a21      	ldr	r1, [r4, #32]
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b0      	blx	r6
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	89a3      	ldrh	r3, [r4, #12]
 8004fa0:	d106      	bne.n	8004fb0 <__sflush_r+0x68>
 8004fa2:	6829      	ldr	r1, [r5, #0]
 8004fa4:	291d      	cmp	r1, #29
 8004fa6:	d848      	bhi.n	800503a <__sflush_r+0xf2>
 8004fa8:	4a29      	ldr	r2, [pc, #164]	; (8005050 <__sflush_r+0x108>)
 8004faa:	40ca      	lsrs	r2, r1
 8004fac:	07d6      	lsls	r6, r2, #31
 8004fae:	d544      	bpl.n	800503a <__sflush_r+0xf2>
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	6062      	str	r2, [r4, #4]
 8004fb4:	6922      	ldr	r2, [r4, #16]
 8004fb6:	04d9      	lsls	r1, r3, #19
 8004fb8:	6022      	str	r2, [r4, #0]
 8004fba:	d504      	bpl.n	8004fc6 <__sflush_r+0x7e>
 8004fbc:	1c42      	adds	r2, r0, #1
 8004fbe:	d101      	bne.n	8004fc4 <__sflush_r+0x7c>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	b903      	cbnz	r3, 8004fc6 <__sflush_r+0x7e>
 8004fc4:	6560      	str	r0, [r4, #84]	; 0x54
 8004fc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fc8:	602f      	str	r7, [r5, #0]
 8004fca:	2900      	cmp	r1, #0
 8004fcc:	d0c9      	beq.n	8004f62 <__sflush_r+0x1a>
 8004fce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fd2:	4299      	cmp	r1, r3
 8004fd4:	d002      	beq.n	8004fdc <__sflush_r+0x94>
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f000 fcae 	bl	8005938 <_free_r>
 8004fdc:	2000      	movs	r0, #0
 8004fde:	6360      	str	r0, [r4, #52]	; 0x34
 8004fe0:	e7c0      	b.n	8004f64 <__sflush_r+0x1c>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	47b0      	blx	r6
 8004fe8:	1c41      	adds	r1, r0, #1
 8004fea:	d1c8      	bne.n	8004f7e <__sflush_r+0x36>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0c5      	beq.n	8004f7e <__sflush_r+0x36>
 8004ff2:	2b1d      	cmp	r3, #29
 8004ff4:	d001      	beq.n	8004ffa <__sflush_r+0xb2>
 8004ff6:	2b16      	cmp	r3, #22
 8004ff8:	d101      	bne.n	8004ffe <__sflush_r+0xb6>
 8004ffa:	602f      	str	r7, [r5, #0]
 8004ffc:	e7b1      	b.n	8004f62 <__sflush_r+0x1a>
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005004:	81a3      	strh	r3, [r4, #12]
 8005006:	e7ad      	b.n	8004f64 <__sflush_r+0x1c>
 8005008:	690f      	ldr	r7, [r1, #16]
 800500a:	2f00      	cmp	r7, #0
 800500c:	d0a9      	beq.n	8004f62 <__sflush_r+0x1a>
 800500e:	0793      	lsls	r3, r2, #30
 8005010:	bf18      	it	ne
 8005012:	2300      	movne	r3, #0
 8005014:	680e      	ldr	r6, [r1, #0]
 8005016:	bf08      	it	eq
 8005018:	694b      	ldreq	r3, [r1, #20]
 800501a:	eba6 0807 	sub.w	r8, r6, r7
 800501e:	600f      	str	r7, [r1, #0]
 8005020:	608b      	str	r3, [r1, #8]
 8005022:	f1b8 0f00 	cmp.w	r8, #0
 8005026:	dd9c      	ble.n	8004f62 <__sflush_r+0x1a>
 8005028:	4643      	mov	r3, r8
 800502a:	463a      	mov	r2, r7
 800502c:	6a21      	ldr	r1, [r4, #32]
 800502e:	4628      	mov	r0, r5
 8005030:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005032:	47b0      	blx	r6
 8005034:	2800      	cmp	r0, #0
 8005036:	dc06      	bgt.n	8005046 <__sflush_r+0xfe>
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800503e:	81a3      	strh	r3, [r4, #12]
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	e78e      	b.n	8004f64 <__sflush_r+0x1c>
 8005046:	4407      	add	r7, r0
 8005048:	eba8 0800 	sub.w	r8, r8, r0
 800504c:	e7e9      	b.n	8005022 <__sflush_r+0xda>
 800504e:	bf00      	nop
 8005050:	20400001 	.word	0x20400001

08005054 <_fflush_r>:
 8005054:	b538      	push	{r3, r4, r5, lr}
 8005056:	690b      	ldr	r3, [r1, #16]
 8005058:	4605      	mov	r5, r0
 800505a:	460c      	mov	r4, r1
 800505c:	b1db      	cbz	r3, 8005096 <_fflush_r+0x42>
 800505e:	b118      	cbz	r0, 8005068 <_fflush_r+0x14>
 8005060:	6983      	ldr	r3, [r0, #24]
 8005062:	b90b      	cbnz	r3, 8005068 <_fflush_r+0x14>
 8005064:	f000 f860 	bl	8005128 <__sinit>
 8005068:	4b0c      	ldr	r3, [pc, #48]	; (800509c <_fflush_r+0x48>)
 800506a:	429c      	cmp	r4, r3
 800506c:	d109      	bne.n	8005082 <_fflush_r+0x2e>
 800506e:	686c      	ldr	r4, [r5, #4]
 8005070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005074:	b17b      	cbz	r3, 8005096 <_fflush_r+0x42>
 8005076:	4621      	mov	r1, r4
 8005078:	4628      	mov	r0, r5
 800507a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800507e:	f7ff bf63 	b.w	8004f48 <__sflush_r>
 8005082:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <_fflush_r+0x4c>)
 8005084:	429c      	cmp	r4, r3
 8005086:	d101      	bne.n	800508c <_fflush_r+0x38>
 8005088:	68ac      	ldr	r4, [r5, #8]
 800508a:	e7f1      	b.n	8005070 <_fflush_r+0x1c>
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <_fflush_r+0x50>)
 800508e:	429c      	cmp	r4, r3
 8005090:	bf08      	it	eq
 8005092:	68ec      	ldreq	r4, [r5, #12]
 8005094:	e7ec      	b.n	8005070 <_fflush_r+0x1c>
 8005096:	2000      	movs	r0, #0
 8005098:	bd38      	pop	{r3, r4, r5, pc}
 800509a:	bf00      	nop
 800509c:	08006064 	.word	0x08006064
 80050a0:	08006084 	.word	0x08006084
 80050a4:	08006044 	.word	0x08006044

080050a8 <std>:
 80050a8:	2300      	movs	r3, #0
 80050aa:	b510      	push	{r4, lr}
 80050ac:	4604      	mov	r4, r0
 80050ae:	e9c0 3300 	strd	r3, r3, [r0]
 80050b2:	6083      	str	r3, [r0, #8]
 80050b4:	8181      	strh	r1, [r0, #12]
 80050b6:	6643      	str	r3, [r0, #100]	; 0x64
 80050b8:	81c2      	strh	r2, [r0, #14]
 80050ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050be:	6183      	str	r3, [r0, #24]
 80050c0:	4619      	mov	r1, r3
 80050c2:	2208      	movs	r2, #8
 80050c4:	305c      	adds	r0, #92	; 0x5c
 80050c6:	f7fe fb69 	bl	800379c <memset>
 80050ca:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <std+0x38>)
 80050cc:	6224      	str	r4, [r4, #32]
 80050ce:	6263      	str	r3, [r4, #36]	; 0x24
 80050d0:	4b04      	ldr	r3, [pc, #16]	; (80050e4 <std+0x3c>)
 80050d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80050d4:	4b04      	ldr	r3, [pc, #16]	; (80050e8 <std+0x40>)
 80050d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <std+0x44>)
 80050da:	6323      	str	r3, [r4, #48]	; 0x30
 80050dc:	bd10      	pop	{r4, pc}
 80050de:	bf00      	nop
 80050e0:	08005d21 	.word	0x08005d21
 80050e4:	08005d43 	.word	0x08005d43
 80050e8:	08005d7b 	.word	0x08005d7b
 80050ec:	08005d9f 	.word	0x08005d9f

080050f0 <_cleanup_r>:
 80050f0:	4901      	ldr	r1, [pc, #4]	; (80050f8 <_cleanup_r+0x8>)
 80050f2:	f000 b885 	b.w	8005200 <_fwalk_reent>
 80050f6:	bf00      	nop
 80050f8:	08005055 	.word	0x08005055

080050fc <__sfmoreglue>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	2568      	movs	r5, #104	; 0x68
 8005100:	1e4a      	subs	r2, r1, #1
 8005102:	4355      	muls	r5, r2
 8005104:	460e      	mov	r6, r1
 8005106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800510a:	f000 fc61 	bl	80059d0 <_malloc_r>
 800510e:	4604      	mov	r4, r0
 8005110:	b140      	cbz	r0, 8005124 <__sfmoreglue+0x28>
 8005112:	2100      	movs	r1, #0
 8005114:	e9c0 1600 	strd	r1, r6, [r0]
 8005118:	300c      	adds	r0, #12
 800511a:	60a0      	str	r0, [r4, #8]
 800511c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005120:	f7fe fb3c 	bl	800379c <memset>
 8005124:	4620      	mov	r0, r4
 8005126:	bd70      	pop	{r4, r5, r6, pc}

08005128 <__sinit>:
 8005128:	6983      	ldr	r3, [r0, #24]
 800512a:	b510      	push	{r4, lr}
 800512c:	4604      	mov	r4, r0
 800512e:	bb33      	cbnz	r3, 800517e <__sinit+0x56>
 8005130:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005134:	6503      	str	r3, [r0, #80]	; 0x50
 8005136:	4b12      	ldr	r3, [pc, #72]	; (8005180 <__sinit+0x58>)
 8005138:	4a12      	ldr	r2, [pc, #72]	; (8005184 <__sinit+0x5c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6282      	str	r2, [r0, #40]	; 0x28
 800513e:	4298      	cmp	r0, r3
 8005140:	bf04      	itt	eq
 8005142:	2301      	moveq	r3, #1
 8005144:	6183      	streq	r3, [r0, #24]
 8005146:	f000 f81f 	bl	8005188 <__sfp>
 800514a:	6060      	str	r0, [r4, #4]
 800514c:	4620      	mov	r0, r4
 800514e:	f000 f81b 	bl	8005188 <__sfp>
 8005152:	60a0      	str	r0, [r4, #8]
 8005154:	4620      	mov	r0, r4
 8005156:	f000 f817 	bl	8005188 <__sfp>
 800515a:	2200      	movs	r2, #0
 800515c:	60e0      	str	r0, [r4, #12]
 800515e:	2104      	movs	r1, #4
 8005160:	6860      	ldr	r0, [r4, #4]
 8005162:	f7ff ffa1 	bl	80050a8 <std>
 8005166:	2201      	movs	r2, #1
 8005168:	2109      	movs	r1, #9
 800516a:	68a0      	ldr	r0, [r4, #8]
 800516c:	f7ff ff9c 	bl	80050a8 <std>
 8005170:	2202      	movs	r2, #2
 8005172:	2112      	movs	r1, #18
 8005174:	68e0      	ldr	r0, [r4, #12]
 8005176:	f7ff ff97 	bl	80050a8 <std>
 800517a:	2301      	movs	r3, #1
 800517c:	61a3      	str	r3, [r4, #24]
 800517e:	bd10      	pop	{r4, pc}
 8005180:	08005ffc 	.word	0x08005ffc
 8005184:	080050f1 	.word	0x080050f1

08005188 <__sfp>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	4b1b      	ldr	r3, [pc, #108]	; (80051f8 <__sfp+0x70>)
 800518c:	4607      	mov	r7, r0
 800518e:	681e      	ldr	r6, [r3, #0]
 8005190:	69b3      	ldr	r3, [r6, #24]
 8005192:	b913      	cbnz	r3, 800519a <__sfp+0x12>
 8005194:	4630      	mov	r0, r6
 8005196:	f7ff ffc7 	bl	8005128 <__sinit>
 800519a:	3648      	adds	r6, #72	; 0x48
 800519c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	d503      	bpl.n	80051ac <__sfp+0x24>
 80051a4:	6833      	ldr	r3, [r6, #0]
 80051a6:	b133      	cbz	r3, 80051b6 <__sfp+0x2e>
 80051a8:	6836      	ldr	r6, [r6, #0]
 80051aa:	e7f7      	b.n	800519c <__sfp+0x14>
 80051ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051b0:	b16d      	cbz	r5, 80051ce <__sfp+0x46>
 80051b2:	3468      	adds	r4, #104	; 0x68
 80051b4:	e7f4      	b.n	80051a0 <__sfp+0x18>
 80051b6:	2104      	movs	r1, #4
 80051b8:	4638      	mov	r0, r7
 80051ba:	f7ff ff9f 	bl	80050fc <__sfmoreglue>
 80051be:	6030      	str	r0, [r6, #0]
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d1f1      	bne.n	80051a8 <__sfp+0x20>
 80051c4:	230c      	movs	r3, #12
 80051c6:	4604      	mov	r4, r0
 80051c8:	603b      	str	r3, [r7, #0]
 80051ca:	4620      	mov	r0, r4
 80051cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ce:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <__sfp+0x74>)
 80051d0:	6665      	str	r5, [r4, #100]	; 0x64
 80051d2:	e9c4 5500 	strd	r5, r5, [r4]
 80051d6:	60a5      	str	r5, [r4, #8]
 80051d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80051dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80051e0:	2208      	movs	r2, #8
 80051e2:	4629      	mov	r1, r5
 80051e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051e8:	f7fe fad8 	bl	800379c <memset>
 80051ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051f4:	e7e9      	b.n	80051ca <__sfp+0x42>
 80051f6:	bf00      	nop
 80051f8:	08005ffc 	.word	0x08005ffc
 80051fc:	ffff0001 	.word	0xffff0001

08005200 <_fwalk_reent>:
 8005200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005204:	4680      	mov	r8, r0
 8005206:	4689      	mov	r9, r1
 8005208:	2600      	movs	r6, #0
 800520a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800520e:	b914      	cbnz	r4, 8005216 <_fwalk_reent+0x16>
 8005210:	4630      	mov	r0, r6
 8005212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005216:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800521a:	3f01      	subs	r7, #1
 800521c:	d501      	bpl.n	8005222 <_fwalk_reent+0x22>
 800521e:	6824      	ldr	r4, [r4, #0]
 8005220:	e7f5      	b.n	800520e <_fwalk_reent+0xe>
 8005222:	89ab      	ldrh	r3, [r5, #12]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d907      	bls.n	8005238 <_fwalk_reent+0x38>
 8005228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800522c:	3301      	adds	r3, #1
 800522e:	d003      	beq.n	8005238 <_fwalk_reent+0x38>
 8005230:	4629      	mov	r1, r5
 8005232:	4640      	mov	r0, r8
 8005234:	47c8      	blx	r9
 8005236:	4306      	orrs	r6, r0
 8005238:	3568      	adds	r5, #104	; 0x68
 800523a:	e7ee      	b.n	800521a <_fwalk_reent+0x1a>

0800523c <_localeconv_r>:
 800523c:	4b04      	ldr	r3, [pc, #16]	; (8005250 <_localeconv_r+0x14>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6a18      	ldr	r0, [r3, #32]
 8005242:	4b04      	ldr	r3, [pc, #16]	; (8005254 <_localeconv_r+0x18>)
 8005244:	2800      	cmp	r0, #0
 8005246:	bf08      	it	eq
 8005248:	4618      	moveq	r0, r3
 800524a:	30f0      	adds	r0, #240	; 0xf0
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20000414 	.word	0x20000414
 8005254:	20000478 	.word	0x20000478

08005258 <__swhatbuf_r>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	460e      	mov	r6, r1
 800525c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005260:	b096      	sub	sp, #88	; 0x58
 8005262:	2900      	cmp	r1, #0
 8005264:	4614      	mov	r4, r2
 8005266:	461d      	mov	r5, r3
 8005268:	da07      	bge.n	800527a <__swhatbuf_r+0x22>
 800526a:	2300      	movs	r3, #0
 800526c:	602b      	str	r3, [r5, #0]
 800526e:	89b3      	ldrh	r3, [r6, #12]
 8005270:	061a      	lsls	r2, r3, #24
 8005272:	d410      	bmi.n	8005296 <__swhatbuf_r+0x3e>
 8005274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005278:	e00e      	b.n	8005298 <__swhatbuf_r+0x40>
 800527a:	466a      	mov	r2, sp
 800527c:	f000 fdb6 	bl	8005dec <_fstat_r>
 8005280:	2800      	cmp	r0, #0
 8005282:	dbf2      	blt.n	800526a <__swhatbuf_r+0x12>
 8005284:	9a01      	ldr	r2, [sp, #4]
 8005286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800528a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800528e:	425a      	negs	r2, r3
 8005290:	415a      	adcs	r2, r3
 8005292:	602a      	str	r2, [r5, #0]
 8005294:	e7ee      	b.n	8005274 <__swhatbuf_r+0x1c>
 8005296:	2340      	movs	r3, #64	; 0x40
 8005298:	2000      	movs	r0, #0
 800529a:	6023      	str	r3, [r4, #0]
 800529c:	b016      	add	sp, #88	; 0x58
 800529e:	bd70      	pop	{r4, r5, r6, pc}

080052a0 <__smakebuf_r>:
 80052a0:	898b      	ldrh	r3, [r1, #12]
 80052a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052a4:	079d      	lsls	r5, r3, #30
 80052a6:	4606      	mov	r6, r0
 80052a8:	460c      	mov	r4, r1
 80052aa:	d507      	bpl.n	80052bc <__smakebuf_r+0x1c>
 80052ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	6123      	str	r3, [r4, #16]
 80052b4:	2301      	movs	r3, #1
 80052b6:	6163      	str	r3, [r4, #20]
 80052b8:	b002      	add	sp, #8
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
 80052bc:	ab01      	add	r3, sp, #4
 80052be:	466a      	mov	r2, sp
 80052c0:	f7ff ffca 	bl	8005258 <__swhatbuf_r>
 80052c4:	9900      	ldr	r1, [sp, #0]
 80052c6:	4605      	mov	r5, r0
 80052c8:	4630      	mov	r0, r6
 80052ca:	f000 fb81 	bl	80059d0 <_malloc_r>
 80052ce:	b948      	cbnz	r0, 80052e4 <__smakebuf_r+0x44>
 80052d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052d4:	059a      	lsls	r2, r3, #22
 80052d6:	d4ef      	bmi.n	80052b8 <__smakebuf_r+0x18>
 80052d8:	f023 0303 	bic.w	r3, r3, #3
 80052dc:	f043 0302 	orr.w	r3, r3, #2
 80052e0:	81a3      	strh	r3, [r4, #12]
 80052e2:	e7e3      	b.n	80052ac <__smakebuf_r+0xc>
 80052e4:	4b0d      	ldr	r3, [pc, #52]	; (800531c <__smakebuf_r+0x7c>)
 80052e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	6020      	str	r0, [r4, #0]
 80052ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f0:	81a3      	strh	r3, [r4, #12]
 80052f2:	9b00      	ldr	r3, [sp, #0]
 80052f4:	6120      	str	r0, [r4, #16]
 80052f6:	6163      	str	r3, [r4, #20]
 80052f8:	9b01      	ldr	r3, [sp, #4]
 80052fa:	b15b      	cbz	r3, 8005314 <__smakebuf_r+0x74>
 80052fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005300:	4630      	mov	r0, r6
 8005302:	f000 fd85 	bl	8005e10 <_isatty_r>
 8005306:	b128      	cbz	r0, 8005314 <__smakebuf_r+0x74>
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	f023 0303 	bic.w	r3, r3, #3
 800530e:	f043 0301 	orr.w	r3, r3, #1
 8005312:	81a3      	strh	r3, [r4, #12]
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	431d      	orrs	r5, r3
 8005318:	81a5      	strh	r5, [r4, #12]
 800531a:	e7cd      	b.n	80052b8 <__smakebuf_r+0x18>
 800531c:	080050f1 	.word	0x080050f1

08005320 <malloc>:
 8005320:	4b02      	ldr	r3, [pc, #8]	; (800532c <malloc+0xc>)
 8005322:	4601      	mov	r1, r0
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	f000 bb53 	b.w	80059d0 <_malloc_r>
 800532a:	bf00      	nop
 800532c:	20000414 	.word	0x20000414

08005330 <memchr>:
 8005330:	b510      	push	{r4, lr}
 8005332:	b2c9      	uxtb	r1, r1
 8005334:	4402      	add	r2, r0
 8005336:	4290      	cmp	r0, r2
 8005338:	4603      	mov	r3, r0
 800533a:	d101      	bne.n	8005340 <memchr+0x10>
 800533c:	2300      	movs	r3, #0
 800533e:	e003      	b.n	8005348 <memchr+0x18>
 8005340:	781c      	ldrb	r4, [r3, #0]
 8005342:	3001      	adds	r0, #1
 8005344:	428c      	cmp	r4, r1
 8005346:	d1f6      	bne.n	8005336 <memchr+0x6>
 8005348:	4618      	mov	r0, r3
 800534a:	bd10      	pop	{r4, pc}

0800534c <memcpy>:
 800534c:	b510      	push	{r4, lr}
 800534e:	1e43      	subs	r3, r0, #1
 8005350:	440a      	add	r2, r1
 8005352:	4291      	cmp	r1, r2
 8005354:	d100      	bne.n	8005358 <memcpy+0xc>
 8005356:	bd10      	pop	{r4, pc}
 8005358:	f811 4b01 	ldrb.w	r4, [r1], #1
 800535c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005360:	e7f7      	b.n	8005352 <memcpy+0x6>

08005362 <_Balloc>:
 8005362:	b570      	push	{r4, r5, r6, lr}
 8005364:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005366:	4604      	mov	r4, r0
 8005368:	460e      	mov	r6, r1
 800536a:	b93d      	cbnz	r5, 800537c <_Balloc+0x1a>
 800536c:	2010      	movs	r0, #16
 800536e:	f7ff ffd7 	bl	8005320 <malloc>
 8005372:	6260      	str	r0, [r4, #36]	; 0x24
 8005374:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005378:	6005      	str	r5, [r0, #0]
 800537a:	60c5      	str	r5, [r0, #12]
 800537c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800537e:	68eb      	ldr	r3, [r5, #12]
 8005380:	b183      	cbz	r3, 80053a4 <_Balloc+0x42>
 8005382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800538a:	b9b8      	cbnz	r0, 80053bc <_Balloc+0x5a>
 800538c:	2101      	movs	r1, #1
 800538e:	fa01 f506 	lsl.w	r5, r1, r6
 8005392:	1d6a      	adds	r2, r5, #5
 8005394:	0092      	lsls	r2, r2, #2
 8005396:	4620      	mov	r0, r4
 8005398:	f000 fabf 	bl	800591a <_calloc_r>
 800539c:	b160      	cbz	r0, 80053b8 <_Balloc+0x56>
 800539e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80053a2:	e00e      	b.n	80053c2 <_Balloc+0x60>
 80053a4:	2221      	movs	r2, #33	; 0x21
 80053a6:	2104      	movs	r1, #4
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 fab6 	bl	800591a <_calloc_r>
 80053ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053b0:	60e8      	str	r0, [r5, #12]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e4      	bne.n	8005382 <_Balloc+0x20>
 80053b8:	2000      	movs	r0, #0
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	6802      	ldr	r2, [r0, #0]
 80053be:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80053c2:	2300      	movs	r3, #0
 80053c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80053c8:	e7f7      	b.n	80053ba <_Balloc+0x58>

080053ca <_Bfree>:
 80053ca:	b570      	push	{r4, r5, r6, lr}
 80053cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80053ce:	4606      	mov	r6, r0
 80053d0:	460d      	mov	r5, r1
 80053d2:	b93c      	cbnz	r4, 80053e4 <_Bfree+0x1a>
 80053d4:	2010      	movs	r0, #16
 80053d6:	f7ff ffa3 	bl	8005320 <malloc>
 80053da:	6270      	str	r0, [r6, #36]	; 0x24
 80053dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053e0:	6004      	str	r4, [r0, #0]
 80053e2:	60c4      	str	r4, [r0, #12]
 80053e4:	b13d      	cbz	r5, 80053f6 <_Bfree+0x2c>
 80053e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80053e8:	686a      	ldr	r2, [r5, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053f0:	6029      	str	r1, [r5, #0]
 80053f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80053f6:	bd70      	pop	{r4, r5, r6, pc}

080053f8 <__multadd>:
 80053f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053fc:	461f      	mov	r7, r3
 80053fe:	4606      	mov	r6, r0
 8005400:	460c      	mov	r4, r1
 8005402:	2300      	movs	r3, #0
 8005404:	690d      	ldr	r5, [r1, #16]
 8005406:	f101 0c14 	add.w	ip, r1, #20
 800540a:	f8dc 0000 	ldr.w	r0, [ip]
 800540e:	3301      	adds	r3, #1
 8005410:	b281      	uxth	r1, r0
 8005412:	fb02 7101 	mla	r1, r2, r1, r7
 8005416:	0c00      	lsrs	r0, r0, #16
 8005418:	0c0f      	lsrs	r7, r1, #16
 800541a:	fb02 7000 	mla	r0, r2, r0, r7
 800541e:	b289      	uxth	r1, r1
 8005420:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005424:	429d      	cmp	r5, r3
 8005426:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800542a:	f84c 1b04 	str.w	r1, [ip], #4
 800542e:	dcec      	bgt.n	800540a <__multadd+0x12>
 8005430:	b1d7      	cbz	r7, 8005468 <__multadd+0x70>
 8005432:	68a3      	ldr	r3, [r4, #8]
 8005434:	42ab      	cmp	r3, r5
 8005436:	dc12      	bgt.n	800545e <__multadd+0x66>
 8005438:	6861      	ldr	r1, [r4, #4]
 800543a:	4630      	mov	r0, r6
 800543c:	3101      	adds	r1, #1
 800543e:	f7ff ff90 	bl	8005362 <_Balloc>
 8005442:	4680      	mov	r8, r0
 8005444:	6922      	ldr	r2, [r4, #16]
 8005446:	f104 010c 	add.w	r1, r4, #12
 800544a:	3202      	adds	r2, #2
 800544c:	0092      	lsls	r2, r2, #2
 800544e:	300c      	adds	r0, #12
 8005450:	f7ff ff7c 	bl	800534c <memcpy>
 8005454:	4621      	mov	r1, r4
 8005456:	4630      	mov	r0, r6
 8005458:	f7ff ffb7 	bl	80053ca <_Bfree>
 800545c:	4644      	mov	r4, r8
 800545e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005462:	3501      	adds	r5, #1
 8005464:	615f      	str	r7, [r3, #20]
 8005466:	6125      	str	r5, [r4, #16]
 8005468:	4620      	mov	r0, r4
 800546a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800546e <__hi0bits>:
 800546e:	0c02      	lsrs	r2, r0, #16
 8005470:	0412      	lsls	r2, r2, #16
 8005472:	4603      	mov	r3, r0
 8005474:	b9b2      	cbnz	r2, 80054a4 <__hi0bits+0x36>
 8005476:	0403      	lsls	r3, r0, #16
 8005478:	2010      	movs	r0, #16
 800547a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800547e:	bf04      	itt	eq
 8005480:	021b      	lsleq	r3, r3, #8
 8005482:	3008      	addeq	r0, #8
 8005484:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005488:	bf04      	itt	eq
 800548a:	011b      	lsleq	r3, r3, #4
 800548c:	3004      	addeq	r0, #4
 800548e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005492:	bf04      	itt	eq
 8005494:	009b      	lsleq	r3, r3, #2
 8005496:	3002      	addeq	r0, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	db06      	blt.n	80054aa <__hi0bits+0x3c>
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	d503      	bpl.n	80054a8 <__hi0bits+0x3a>
 80054a0:	3001      	adds	r0, #1
 80054a2:	4770      	bx	lr
 80054a4:	2000      	movs	r0, #0
 80054a6:	e7e8      	b.n	800547a <__hi0bits+0xc>
 80054a8:	2020      	movs	r0, #32
 80054aa:	4770      	bx	lr

080054ac <__lo0bits>:
 80054ac:	6803      	ldr	r3, [r0, #0]
 80054ae:	4601      	mov	r1, r0
 80054b0:	f013 0207 	ands.w	r2, r3, #7
 80054b4:	d00b      	beq.n	80054ce <__lo0bits+0x22>
 80054b6:	07da      	lsls	r2, r3, #31
 80054b8:	d423      	bmi.n	8005502 <__lo0bits+0x56>
 80054ba:	0798      	lsls	r0, r3, #30
 80054bc:	bf49      	itett	mi
 80054be:	085b      	lsrmi	r3, r3, #1
 80054c0:	089b      	lsrpl	r3, r3, #2
 80054c2:	2001      	movmi	r0, #1
 80054c4:	600b      	strmi	r3, [r1, #0]
 80054c6:	bf5c      	itt	pl
 80054c8:	600b      	strpl	r3, [r1, #0]
 80054ca:	2002      	movpl	r0, #2
 80054cc:	4770      	bx	lr
 80054ce:	b298      	uxth	r0, r3
 80054d0:	b9a8      	cbnz	r0, 80054fe <__lo0bits+0x52>
 80054d2:	2010      	movs	r0, #16
 80054d4:	0c1b      	lsrs	r3, r3, #16
 80054d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80054da:	bf04      	itt	eq
 80054dc:	0a1b      	lsreq	r3, r3, #8
 80054de:	3008      	addeq	r0, #8
 80054e0:	071a      	lsls	r2, r3, #28
 80054e2:	bf04      	itt	eq
 80054e4:	091b      	lsreq	r3, r3, #4
 80054e6:	3004      	addeq	r0, #4
 80054e8:	079a      	lsls	r2, r3, #30
 80054ea:	bf04      	itt	eq
 80054ec:	089b      	lsreq	r3, r3, #2
 80054ee:	3002      	addeq	r0, #2
 80054f0:	07da      	lsls	r2, r3, #31
 80054f2:	d402      	bmi.n	80054fa <__lo0bits+0x4e>
 80054f4:	085b      	lsrs	r3, r3, #1
 80054f6:	d006      	beq.n	8005506 <__lo0bits+0x5a>
 80054f8:	3001      	adds	r0, #1
 80054fa:	600b      	str	r3, [r1, #0]
 80054fc:	4770      	bx	lr
 80054fe:	4610      	mov	r0, r2
 8005500:	e7e9      	b.n	80054d6 <__lo0bits+0x2a>
 8005502:	2000      	movs	r0, #0
 8005504:	4770      	bx	lr
 8005506:	2020      	movs	r0, #32
 8005508:	4770      	bx	lr

0800550a <__i2b>:
 800550a:	b510      	push	{r4, lr}
 800550c:	460c      	mov	r4, r1
 800550e:	2101      	movs	r1, #1
 8005510:	f7ff ff27 	bl	8005362 <_Balloc>
 8005514:	2201      	movs	r2, #1
 8005516:	6144      	str	r4, [r0, #20]
 8005518:	6102      	str	r2, [r0, #16]
 800551a:	bd10      	pop	{r4, pc}

0800551c <__multiply>:
 800551c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005520:	4614      	mov	r4, r2
 8005522:	690a      	ldr	r2, [r1, #16]
 8005524:	6923      	ldr	r3, [r4, #16]
 8005526:	4688      	mov	r8, r1
 8005528:	429a      	cmp	r2, r3
 800552a:	bfbe      	ittt	lt
 800552c:	460b      	movlt	r3, r1
 800552e:	46a0      	movlt	r8, r4
 8005530:	461c      	movlt	r4, r3
 8005532:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005536:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800553a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800553e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005542:	eb07 0609 	add.w	r6, r7, r9
 8005546:	42b3      	cmp	r3, r6
 8005548:	bfb8      	it	lt
 800554a:	3101      	addlt	r1, #1
 800554c:	f7ff ff09 	bl	8005362 <_Balloc>
 8005550:	f100 0514 	add.w	r5, r0, #20
 8005554:	462b      	mov	r3, r5
 8005556:	2200      	movs	r2, #0
 8005558:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800555c:	4573      	cmp	r3, lr
 800555e:	d316      	bcc.n	800558e <__multiply+0x72>
 8005560:	f104 0214 	add.w	r2, r4, #20
 8005564:	f108 0114 	add.w	r1, r8, #20
 8005568:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800556c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	9b00      	ldr	r3, [sp, #0]
 8005574:	9201      	str	r2, [sp, #4]
 8005576:	4293      	cmp	r3, r2
 8005578:	d80c      	bhi.n	8005594 <__multiply+0x78>
 800557a:	2e00      	cmp	r6, #0
 800557c:	dd03      	ble.n	8005586 <__multiply+0x6a>
 800557e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005582:	2b00      	cmp	r3, #0
 8005584:	d05d      	beq.n	8005642 <__multiply+0x126>
 8005586:	6106      	str	r6, [r0, #16]
 8005588:	b003      	add	sp, #12
 800558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558e:	f843 2b04 	str.w	r2, [r3], #4
 8005592:	e7e3      	b.n	800555c <__multiply+0x40>
 8005594:	f8b2 b000 	ldrh.w	fp, [r2]
 8005598:	f1bb 0f00 	cmp.w	fp, #0
 800559c:	d023      	beq.n	80055e6 <__multiply+0xca>
 800559e:	4689      	mov	r9, r1
 80055a0:	46ac      	mov	ip, r5
 80055a2:	f04f 0800 	mov.w	r8, #0
 80055a6:	f859 4b04 	ldr.w	r4, [r9], #4
 80055aa:	f8dc a000 	ldr.w	sl, [ip]
 80055ae:	b2a3      	uxth	r3, r4
 80055b0:	fa1f fa8a 	uxth.w	sl, sl
 80055b4:	fb0b a303 	mla	r3, fp, r3, sl
 80055b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80055bc:	f8dc 4000 	ldr.w	r4, [ip]
 80055c0:	4443      	add	r3, r8
 80055c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80055c6:	fb0b 840a 	mla	r4, fp, sl, r8
 80055ca:	46e2      	mov	sl, ip
 80055cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80055d6:	454f      	cmp	r7, r9
 80055d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80055dc:	f84a 3b04 	str.w	r3, [sl], #4
 80055e0:	d82b      	bhi.n	800563a <__multiply+0x11e>
 80055e2:	f8cc 8004 	str.w	r8, [ip, #4]
 80055e6:	9b01      	ldr	r3, [sp, #4]
 80055e8:	3204      	adds	r2, #4
 80055ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80055ee:	f1ba 0f00 	cmp.w	sl, #0
 80055f2:	d020      	beq.n	8005636 <__multiply+0x11a>
 80055f4:	4689      	mov	r9, r1
 80055f6:	46a8      	mov	r8, r5
 80055f8:	f04f 0b00 	mov.w	fp, #0
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	f8b9 c000 	ldrh.w	ip, [r9]
 8005602:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005606:	b29b      	uxth	r3, r3
 8005608:	fb0a 440c 	mla	r4, sl, ip, r4
 800560c:	46c4      	mov	ip, r8
 800560e:	445c      	add	r4, fp
 8005610:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005614:	f84c 3b04 	str.w	r3, [ip], #4
 8005618:	f859 3b04 	ldr.w	r3, [r9], #4
 800561c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	fb0a b303 	mla	r3, sl, r3, fp
 8005626:	454f      	cmp	r7, r9
 8005628:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800562c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005630:	d805      	bhi.n	800563e <__multiply+0x122>
 8005632:	f8c8 3004 	str.w	r3, [r8, #4]
 8005636:	3504      	adds	r5, #4
 8005638:	e79b      	b.n	8005572 <__multiply+0x56>
 800563a:	46d4      	mov	ip, sl
 800563c:	e7b3      	b.n	80055a6 <__multiply+0x8a>
 800563e:	46e0      	mov	r8, ip
 8005640:	e7dd      	b.n	80055fe <__multiply+0xe2>
 8005642:	3e01      	subs	r6, #1
 8005644:	e799      	b.n	800557a <__multiply+0x5e>
	...

08005648 <__pow5mult>:
 8005648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800564c:	4615      	mov	r5, r2
 800564e:	f012 0203 	ands.w	r2, r2, #3
 8005652:	4606      	mov	r6, r0
 8005654:	460f      	mov	r7, r1
 8005656:	d007      	beq.n	8005668 <__pow5mult+0x20>
 8005658:	4c21      	ldr	r4, [pc, #132]	; (80056e0 <__pow5mult+0x98>)
 800565a:	3a01      	subs	r2, #1
 800565c:	2300      	movs	r3, #0
 800565e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005662:	f7ff fec9 	bl	80053f8 <__multadd>
 8005666:	4607      	mov	r7, r0
 8005668:	10ad      	asrs	r5, r5, #2
 800566a:	d035      	beq.n	80056d8 <__pow5mult+0x90>
 800566c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800566e:	b93c      	cbnz	r4, 8005680 <__pow5mult+0x38>
 8005670:	2010      	movs	r0, #16
 8005672:	f7ff fe55 	bl	8005320 <malloc>
 8005676:	6270      	str	r0, [r6, #36]	; 0x24
 8005678:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800567c:	6004      	str	r4, [r0, #0]
 800567e:	60c4      	str	r4, [r0, #12]
 8005680:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005684:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005688:	b94c      	cbnz	r4, 800569e <__pow5mult+0x56>
 800568a:	f240 2171 	movw	r1, #625	; 0x271
 800568e:	4630      	mov	r0, r6
 8005690:	f7ff ff3b 	bl	800550a <__i2b>
 8005694:	2300      	movs	r3, #0
 8005696:	4604      	mov	r4, r0
 8005698:	f8c8 0008 	str.w	r0, [r8, #8]
 800569c:	6003      	str	r3, [r0, #0]
 800569e:	f04f 0800 	mov.w	r8, #0
 80056a2:	07eb      	lsls	r3, r5, #31
 80056a4:	d50a      	bpl.n	80056bc <__pow5mult+0x74>
 80056a6:	4639      	mov	r1, r7
 80056a8:	4622      	mov	r2, r4
 80056aa:	4630      	mov	r0, r6
 80056ac:	f7ff ff36 	bl	800551c <__multiply>
 80056b0:	4681      	mov	r9, r0
 80056b2:	4639      	mov	r1, r7
 80056b4:	4630      	mov	r0, r6
 80056b6:	f7ff fe88 	bl	80053ca <_Bfree>
 80056ba:	464f      	mov	r7, r9
 80056bc:	106d      	asrs	r5, r5, #1
 80056be:	d00b      	beq.n	80056d8 <__pow5mult+0x90>
 80056c0:	6820      	ldr	r0, [r4, #0]
 80056c2:	b938      	cbnz	r0, 80056d4 <__pow5mult+0x8c>
 80056c4:	4622      	mov	r2, r4
 80056c6:	4621      	mov	r1, r4
 80056c8:	4630      	mov	r0, r6
 80056ca:	f7ff ff27 	bl	800551c <__multiply>
 80056ce:	6020      	str	r0, [r4, #0]
 80056d0:	f8c0 8000 	str.w	r8, [r0]
 80056d4:	4604      	mov	r4, r0
 80056d6:	e7e4      	b.n	80056a2 <__pow5mult+0x5a>
 80056d8:	4638      	mov	r0, r7
 80056da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056de:	bf00      	nop
 80056e0:	08006198 	.word	0x08006198

080056e4 <__lshift>:
 80056e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056e8:	460c      	mov	r4, r1
 80056ea:	4607      	mov	r7, r0
 80056ec:	4616      	mov	r6, r2
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056f4:	eb0a 0903 	add.w	r9, sl, r3
 80056f8:	6849      	ldr	r1, [r1, #4]
 80056fa:	68a3      	ldr	r3, [r4, #8]
 80056fc:	f109 0501 	add.w	r5, r9, #1
 8005700:	42ab      	cmp	r3, r5
 8005702:	db32      	blt.n	800576a <__lshift+0x86>
 8005704:	4638      	mov	r0, r7
 8005706:	f7ff fe2c 	bl	8005362 <_Balloc>
 800570a:	2300      	movs	r3, #0
 800570c:	4680      	mov	r8, r0
 800570e:	461a      	mov	r2, r3
 8005710:	f100 0114 	add.w	r1, r0, #20
 8005714:	4553      	cmp	r3, sl
 8005716:	db2b      	blt.n	8005770 <__lshift+0x8c>
 8005718:	6920      	ldr	r0, [r4, #16]
 800571a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800571e:	f104 0314 	add.w	r3, r4, #20
 8005722:	f016 021f 	ands.w	r2, r6, #31
 8005726:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800572a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800572e:	d025      	beq.n	800577c <__lshift+0x98>
 8005730:	2000      	movs	r0, #0
 8005732:	f1c2 0e20 	rsb	lr, r2, #32
 8005736:	468a      	mov	sl, r1
 8005738:	681e      	ldr	r6, [r3, #0]
 800573a:	4096      	lsls	r6, r2
 800573c:	4330      	orrs	r0, r6
 800573e:	f84a 0b04 	str.w	r0, [sl], #4
 8005742:	f853 0b04 	ldr.w	r0, [r3], #4
 8005746:	459c      	cmp	ip, r3
 8005748:	fa20 f00e 	lsr.w	r0, r0, lr
 800574c:	d814      	bhi.n	8005778 <__lshift+0x94>
 800574e:	6048      	str	r0, [r1, #4]
 8005750:	b108      	cbz	r0, 8005756 <__lshift+0x72>
 8005752:	f109 0502 	add.w	r5, r9, #2
 8005756:	3d01      	subs	r5, #1
 8005758:	4638      	mov	r0, r7
 800575a:	f8c8 5010 	str.w	r5, [r8, #16]
 800575e:	4621      	mov	r1, r4
 8005760:	f7ff fe33 	bl	80053ca <_Bfree>
 8005764:	4640      	mov	r0, r8
 8005766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576a:	3101      	adds	r1, #1
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	e7c7      	b.n	8005700 <__lshift+0x1c>
 8005770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005774:	3301      	adds	r3, #1
 8005776:	e7cd      	b.n	8005714 <__lshift+0x30>
 8005778:	4651      	mov	r1, sl
 800577a:	e7dc      	b.n	8005736 <__lshift+0x52>
 800577c:	3904      	subs	r1, #4
 800577e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005782:	459c      	cmp	ip, r3
 8005784:	f841 2f04 	str.w	r2, [r1, #4]!
 8005788:	d8f9      	bhi.n	800577e <__lshift+0x9a>
 800578a:	e7e4      	b.n	8005756 <__lshift+0x72>

0800578c <__mcmp>:
 800578c:	6903      	ldr	r3, [r0, #16]
 800578e:	690a      	ldr	r2, [r1, #16]
 8005790:	b530      	push	{r4, r5, lr}
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	d10c      	bne.n	80057b0 <__mcmp+0x24>
 8005796:	0092      	lsls	r2, r2, #2
 8005798:	3014      	adds	r0, #20
 800579a:	3114      	adds	r1, #20
 800579c:	1884      	adds	r4, r0, r2
 800579e:	4411      	add	r1, r2
 80057a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80057a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80057a8:	4295      	cmp	r5, r2
 80057aa:	d003      	beq.n	80057b4 <__mcmp+0x28>
 80057ac:	d305      	bcc.n	80057ba <__mcmp+0x2e>
 80057ae:	2301      	movs	r3, #1
 80057b0:	4618      	mov	r0, r3
 80057b2:	bd30      	pop	{r4, r5, pc}
 80057b4:	42a0      	cmp	r0, r4
 80057b6:	d3f3      	bcc.n	80057a0 <__mcmp+0x14>
 80057b8:	e7fa      	b.n	80057b0 <__mcmp+0x24>
 80057ba:	f04f 33ff 	mov.w	r3, #4294967295
 80057be:	e7f7      	b.n	80057b0 <__mcmp+0x24>

080057c0 <__mdiff>:
 80057c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c4:	460d      	mov	r5, r1
 80057c6:	4607      	mov	r7, r0
 80057c8:	4611      	mov	r1, r2
 80057ca:	4628      	mov	r0, r5
 80057cc:	4614      	mov	r4, r2
 80057ce:	f7ff ffdd 	bl	800578c <__mcmp>
 80057d2:	1e06      	subs	r6, r0, #0
 80057d4:	d108      	bne.n	80057e8 <__mdiff+0x28>
 80057d6:	4631      	mov	r1, r6
 80057d8:	4638      	mov	r0, r7
 80057da:	f7ff fdc2 	bl	8005362 <_Balloc>
 80057de:	2301      	movs	r3, #1
 80057e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80057e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e8:	bfa4      	itt	ge
 80057ea:	4623      	movge	r3, r4
 80057ec:	462c      	movge	r4, r5
 80057ee:	4638      	mov	r0, r7
 80057f0:	6861      	ldr	r1, [r4, #4]
 80057f2:	bfa6      	itte	ge
 80057f4:	461d      	movge	r5, r3
 80057f6:	2600      	movge	r6, #0
 80057f8:	2601      	movlt	r6, #1
 80057fa:	f7ff fdb2 	bl	8005362 <_Balloc>
 80057fe:	f04f 0e00 	mov.w	lr, #0
 8005802:	60c6      	str	r6, [r0, #12]
 8005804:	692b      	ldr	r3, [r5, #16]
 8005806:	6926      	ldr	r6, [r4, #16]
 8005808:	f104 0214 	add.w	r2, r4, #20
 800580c:	f105 0914 	add.w	r9, r5, #20
 8005810:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005814:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005818:	f100 0114 	add.w	r1, r0, #20
 800581c:	f852 ab04 	ldr.w	sl, [r2], #4
 8005820:	f859 5b04 	ldr.w	r5, [r9], #4
 8005824:	fa1f f38a 	uxth.w	r3, sl
 8005828:	4473      	add	r3, lr
 800582a:	b2ac      	uxth	r4, r5
 800582c:	1b1b      	subs	r3, r3, r4
 800582e:	0c2c      	lsrs	r4, r5, #16
 8005830:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005834:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005838:	b29b      	uxth	r3, r3
 800583a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800583e:	45c8      	cmp	r8, r9
 8005840:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005844:	4694      	mov	ip, r2
 8005846:	f841 4b04 	str.w	r4, [r1], #4
 800584a:	d8e7      	bhi.n	800581c <__mdiff+0x5c>
 800584c:	45bc      	cmp	ip, r7
 800584e:	d304      	bcc.n	800585a <__mdiff+0x9a>
 8005850:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005854:	b183      	cbz	r3, 8005878 <__mdiff+0xb8>
 8005856:	6106      	str	r6, [r0, #16]
 8005858:	e7c4      	b.n	80057e4 <__mdiff+0x24>
 800585a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800585e:	b2a2      	uxth	r2, r4
 8005860:	4472      	add	r2, lr
 8005862:	1413      	asrs	r3, r2, #16
 8005864:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005868:	b292      	uxth	r2, r2
 800586a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800586e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005872:	f841 2b04 	str.w	r2, [r1], #4
 8005876:	e7e9      	b.n	800584c <__mdiff+0x8c>
 8005878:	3e01      	subs	r6, #1
 800587a:	e7e9      	b.n	8005850 <__mdiff+0x90>

0800587c <__d2b>:
 800587c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005880:	461c      	mov	r4, r3
 8005882:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005886:	2101      	movs	r1, #1
 8005888:	4690      	mov	r8, r2
 800588a:	f7ff fd6a 	bl	8005362 <_Balloc>
 800588e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005892:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005896:	4607      	mov	r7, r0
 8005898:	bb34      	cbnz	r4, 80058e8 <__d2b+0x6c>
 800589a:	9201      	str	r2, [sp, #4]
 800589c:	f1b8 0200 	subs.w	r2, r8, #0
 80058a0:	d027      	beq.n	80058f2 <__d2b+0x76>
 80058a2:	a802      	add	r0, sp, #8
 80058a4:	f840 2d08 	str.w	r2, [r0, #-8]!
 80058a8:	f7ff fe00 	bl	80054ac <__lo0bits>
 80058ac:	9900      	ldr	r1, [sp, #0]
 80058ae:	b1f0      	cbz	r0, 80058ee <__d2b+0x72>
 80058b0:	9a01      	ldr	r2, [sp, #4]
 80058b2:	f1c0 0320 	rsb	r3, r0, #32
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	430b      	orrs	r3, r1
 80058bc:	40c2      	lsrs	r2, r0
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	9201      	str	r2, [sp, #4]
 80058c2:	9b01      	ldr	r3, [sp, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bf14      	ite	ne
 80058c8:	2102      	movne	r1, #2
 80058ca:	2101      	moveq	r1, #1
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	6139      	str	r1, [r7, #16]
 80058d0:	b1c4      	cbz	r4, 8005904 <__d2b+0x88>
 80058d2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80058d6:	4404      	add	r4, r0
 80058d8:	6034      	str	r4, [r6, #0]
 80058da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80058de:	6028      	str	r0, [r5, #0]
 80058e0:	4638      	mov	r0, r7
 80058e2:	b002      	add	sp, #8
 80058e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80058ec:	e7d5      	b.n	800589a <__d2b+0x1e>
 80058ee:	6179      	str	r1, [r7, #20]
 80058f0:	e7e7      	b.n	80058c2 <__d2b+0x46>
 80058f2:	a801      	add	r0, sp, #4
 80058f4:	f7ff fdda 	bl	80054ac <__lo0bits>
 80058f8:	2101      	movs	r1, #1
 80058fa:	9b01      	ldr	r3, [sp, #4]
 80058fc:	6139      	str	r1, [r7, #16]
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	3020      	adds	r0, #32
 8005902:	e7e5      	b.n	80058d0 <__d2b+0x54>
 8005904:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005908:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800590c:	6030      	str	r0, [r6, #0]
 800590e:	6918      	ldr	r0, [r3, #16]
 8005910:	f7ff fdad 	bl	800546e <__hi0bits>
 8005914:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005918:	e7e1      	b.n	80058de <__d2b+0x62>

0800591a <_calloc_r>:
 800591a:	b538      	push	{r3, r4, r5, lr}
 800591c:	fb02 f401 	mul.w	r4, r2, r1
 8005920:	4621      	mov	r1, r4
 8005922:	f000 f855 	bl	80059d0 <_malloc_r>
 8005926:	4605      	mov	r5, r0
 8005928:	b118      	cbz	r0, 8005932 <_calloc_r+0x18>
 800592a:	4622      	mov	r2, r4
 800592c:	2100      	movs	r1, #0
 800592e:	f7fd ff35 	bl	800379c <memset>
 8005932:	4628      	mov	r0, r5
 8005934:	bd38      	pop	{r3, r4, r5, pc}
	...

08005938 <_free_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	4605      	mov	r5, r0
 800593c:	2900      	cmp	r1, #0
 800593e:	d043      	beq.n	80059c8 <_free_r+0x90>
 8005940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005944:	1f0c      	subs	r4, r1, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	bfb8      	it	lt
 800594a:	18e4      	addlt	r4, r4, r3
 800594c:	f000 fa94 	bl	8005e78 <__malloc_lock>
 8005950:	4a1e      	ldr	r2, [pc, #120]	; (80059cc <_free_r+0x94>)
 8005952:	6813      	ldr	r3, [r2, #0]
 8005954:	4610      	mov	r0, r2
 8005956:	b933      	cbnz	r3, 8005966 <_free_r+0x2e>
 8005958:	6063      	str	r3, [r4, #4]
 800595a:	6014      	str	r4, [r2, #0]
 800595c:	4628      	mov	r0, r5
 800595e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005962:	f000 ba8a 	b.w	8005e7a <__malloc_unlock>
 8005966:	42a3      	cmp	r3, r4
 8005968:	d90b      	bls.n	8005982 <_free_r+0x4a>
 800596a:	6821      	ldr	r1, [r4, #0]
 800596c:	1862      	adds	r2, r4, r1
 800596e:	4293      	cmp	r3, r2
 8005970:	bf01      	itttt	eq
 8005972:	681a      	ldreq	r2, [r3, #0]
 8005974:	685b      	ldreq	r3, [r3, #4]
 8005976:	1852      	addeq	r2, r2, r1
 8005978:	6022      	streq	r2, [r4, #0]
 800597a:	6063      	str	r3, [r4, #4]
 800597c:	6004      	str	r4, [r0, #0]
 800597e:	e7ed      	b.n	800595c <_free_r+0x24>
 8005980:	4613      	mov	r3, r2
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	b10a      	cbz	r2, 800598a <_free_r+0x52>
 8005986:	42a2      	cmp	r2, r4
 8005988:	d9fa      	bls.n	8005980 <_free_r+0x48>
 800598a:	6819      	ldr	r1, [r3, #0]
 800598c:	1858      	adds	r0, r3, r1
 800598e:	42a0      	cmp	r0, r4
 8005990:	d10b      	bne.n	80059aa <_free_r+0x72>
 8005992:	6820      	ldr	r0, [r4, #0]
 8005994:	4401      	add	r1, r0
 8005996:	1858      	adds	r0, r3, r1
 8005998:	4282      	cmp	r2, r0
 800599a:	6019      	str	r1, [r3, #0]
 800599c:	d1de      	bne.n	800595c <_free_r+0x24>
 800599e:	6810      	ldr	r0, [r2, #0]
 80059a0:	6852      	ldr	r2, [r2, #4]
 80059a2:	4401      	add	r1, r0
 80059a4:	6019      	str	r1, [r3, #0]
 80059a6:	605a      	str	r2, [r3, #4]
 80059a8:	e7d8      	b.n	800595c <_free_r+0x24>
 80059aa:	d902      	bls.n	80059b2 <_free_r+0x7a>
 80059ac:	230c      	movs	r3, #12
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	e7d4      	b.n	800595c <_free_r+0x24>
 80059b2:	6820      	ldr	r0, [r4, #0]
 80059b4:	1821      	adds	r1, r4, r0
 80059b6:	428a      	cmp	r2, r1
 80059b8:	bf01      	itttt	eq
 80059ba:	6811      	ldreq	r1, [r2, #0]
 80059bc:	6852      	ldreq	r2, [r2, #4]
 80059be:	1809      	addeq	r1, r1, r0
 80059c0:	6021      	streq	r1, [r4, #0]
 80059c2:	6062      	str	r2, [r4, #4]
 80059c4:	605c      	str	r4, [r3, #4]
 80059c6:	e7c9      	b.n	800595c <_free_r+0x24>
 80059c8:	bd38      	pop	{r3, r4, r5, pc}
 80059ca:	bf00      	nop
 80059cc:	20000624 	.word	0x20000624

080059d0 <_malloc_r>:
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	1ccd      	adds	r5, r1, #3
 80059d4:	f025 0503 	bic.w	r5, r5, #3
 80059d8:	3508      	adds	r5, #8
 80059da:	2d0c      	cmp	r5, #12
 80059dc:	bf38      	it	cc
 80059de:	250c      	movcc	r5, #12
 80059e0:	2d00      	cmp	r5, #0
 80059e2:	4606      	mov	r6, r0
 80059e4:	db01      	blt.n	80059ea <_malloc_r+0x1a>
 80059e6:	42a9      	cmp	r1, r5
 80059e8:	d903      	bls.n	80059f2 <_malloc_r+0x22>
 80059ea:	230c      	movs	r3, #12
 80059ec:	6033      	str	r3, [r6, #0]
 80059ee:	2000      	movs	r0, #0
 80059f0:	bd70      	pop	{r4, r5, r6, pc}
 80059f2:	f000 fa41 	bl	8005e78 <__malloc_lock>
 80059f6:	4a21      	ldr	r2, [pc, #132]	; (8005a7c <_malloc_r+0xac>)
 80059f8:	6814      	ldr	r4, [r2, #0]
 80059fa:	4621      	mov	r1, r4
 80059fc:	b991      	cbnz	r1, 8005a24 <_malloc_r+0x54>
 80059fe:	4c20      	ldr	r4, [pc, #128]	; (8005a80 <_malloc_r+0xb0>)
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	b91b      	cbnz	r3, 8005a0c <_malloc_r+0x3c>
 8005a04:	4630      	mov	r0, r6
 8005a06:	f000 f97b 	bl	8005d00 <_sbrk_r>
 8005a0a:	6020      	str	r0, [r4, #0]
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f000 f976 	bl	8005d00 <_sbrk_r>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d124      	bne.n	8005a62 <_malloc_r+0x92>
 8005a18:	230c      	movs	r3, #12
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	6033      	str	r3, [r6, #0]
 8005a1e:	f000 fa2c 	bl	8005e7a <__malloc_unlock>
 8005a22:	e7e4      	b.n	80059ee <_malloc_r+0x1e>
 8005a24:	680b      	ldr	r3, [r1, #0]
 8005a26:	1b5b      	subs	r3, r3, r5
 8005a28:	d418      	bmi.n	8005a5c <_malloc_r+0x8c>
 8005a2a:	2b0b      	cmp	r3, #11
 8005a2c:	d90f      	bls.n	8005a4e <_malloc_r+0x7e>
 8005a2e:	600b      	str	r3, [r1, #0]
 8005a30:	18cc      	adds	r4, r1, r3
 8005a32:	50cd      	str	r5, [r1, r3]
 8005a34:	4630      	mov	r0, r6
 8005a36:	f000 fa20 	bl	8005e7a <__malloc_unlock>
 8005a3a:	f104 000b 	add.w	r0, r4, #11
 8005a3e:	1d23      	adds	r3, r4, #4
 8005a40:	f020 0007 	bic.w	r0, r0, #7
 8005a44:	1ac3      	subs	r3, r0, r3
 8005a46:	d0d3      	beq.n	80059f0 <_malloc_r+0x20>
 8005a48:	425a      	negs	r2, r3
 8005a4a:	50e2      	str	r2, [r4, r3]
 8005a4c:	e7d0      	b.n	80059f0 <_malloc_r+0x20>
 8005a4e:	684b      	ldr	r3, [r1, #4]
 8005a50:	428c      	cmp	r4, r1
 8005a52:	bf16      	itet	ne
 8005a54:	6063      	strne	r3, [r4, #4]
 8005a56:	6013      	streq	r3, [r2, #0]
 8005a58:	460c      	movne	r4, r1
 8005a5a:	e7eb      	b.n	8005a34 <_malloc_r+0x64>
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	6849      	ldr	r1, [r1, #4]
 8005a60:	e7cc      	b.n	80059fc <_malloc_r+0x2c>
 8005a62:	1cc4      	adds	r4, r0, #3
 8005a64:	f024 0403 	bic.w	r4, r4, #3
 8005a68:	42a0      	cmp	r0, r4
 8005a6a:	d005      	beq.n	8005a78 <_malloc_r+0xa8>
 8005a6c:	1a21      	subs	r1, r4, r0
 8005a6e:	4630      	mov	r0, r6
 8005a70:	f000 f946 	bl	8005d00 <_sbrk_r>
 8005a74:	3001      	adds	r0, #1
 8005a76:	d0cf      	beq.n	8005a18 <_malloc_r+0x48>
 8005a78:	6025      	str	r5, [r4, #0]
 8005a7a:	e7db      	b.n	8005a34 <_malloc_r+0x64>
 8005a7c:	20000624 	.word	0x20000624
 8005a80:	20000628 	.word	0x20000628

08005a84 <__sfputc_r>:
 8005a84:	6893      	ldr	r3, [r2, #8]
 8005a86:	b410      	push	{r4}
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	6093      	str	r3, [r2, #8]
 8005a8e:	da07      	bge.n	8005aa0 <__sfputc_r+0x1c>
 8005a90:	6994      	ldr	r4, [r2, #24]
 8005a92:	42a3      	cmp	r3, r4
 8005a94:	db01      	blt.n	8005a9a <__sfputc_r+0x16>
 8005a96:	290a      	cmp	r1, #10
 8005a98:	d102      	bne.n	8005aa0 <__sfputc_r+0x1c>
 8005a9a:	bc10      	pop	{r4}
 8005a9c:	f7fe bb52 	b.w	8004144 <__swbuf_r>
 8005aa0:	6813      	ldr	r3, [r2, #0]
 8005aa2:	1c58      	adds	r0, r3, #1
 8005aa4:	6010      	str	r0, [r2, #0]
 8005aa6:	7019      	strb	r1, [r3, #0]
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	bc10      	pop	{r4}
 8005aac:	4770      	bx	lr

08005aae <__sfputs_r>:
 8005aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	460f      	mov	r7, r1
 8005ab4:	4614      	mov	r4, r2
 8005ab6:	18d5      	adds	r5, r2, r3
 8005ab8:	42ac      	cmp	r4, r5
 8005aba:	d101      	bne.n	8005ac0 <__sfputs_r+0x12>
 8005abc:	2000      	movs	r0, #0
 8005abe:	e007      	b.n	8005ad0 <__sfputs_r+0x22>
 8005ac0:	463a      	mov	r2, r7
 8005ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f7ff ffdc 	bl	8005a84 <__sfputc_r>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d1f3      	bne.n	8005ab8 <__sfputs_r+0xa>
 8005ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ad4 <_vfiprintf_r>:
 8005ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad8:	460c      	mov	r4, r1
 8005ada:	b09d      	sub	sp, #116	; 0x74
 8005adc:	4617      	mov	r7, r2
 8005ade:	461d      	mov	r5, r3
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	b118      	cbz	r0, 8005aec <_vfiprintf_r+0x18>
 8005ae4:	6983      	ldr	r3, [r0, #24]
 8005ae6:	b90b      	cbnz	r3, 8005aec <_vfiprintf_r+0x18>
 8005ae8:	f7ff fb1e 	bl	8005128 <__sinit>
 8005aec:	4b7c      	ldr	r3, [pc, #496]	; (8005ce0 <_vfiprintf_r+0x20c>)
 8005aee:	429c      	cmp	r4, r3
 8005af0:	d158      	bne.n	8005ba4 <_vfiprintf_r+0xd0>
 8005af2:	6874      	ldr	r4, [r6, #4]
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	0718      	lsls	r0, r3, #28
 8005af8:	d55e      	bpl.n	8005bb8 <_vfiprintf_r+0xe4>
 8005afa:	6923      	ldr	r3, [r4, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d05b      	beq.n	8005bb8 <_vfiprintf_r+0xe4>
 8005b00:	2300      	movs	r3, #0
 8005b02:	9309      	str	r3, [sp, #36]	; 0x24
 8005b04:	2320      	movs	r3, #32
 8005b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b0a:	2330      	movs	r3, #48	; 0x30
 8005b0c:	f04f 0b01 	mov.w	fp, #1
 8005b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b14:	9503      	str	r5, [sp, #12]
 8005b16:	46b8      	mov	r8, r7
 8005b18:	4645      	mov	r5, r8
 8005b1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005b1e:	b10b      	cbz	r3, 8005b24 <_vfiprintf_r+0x50>
 8005b20:	2b25      	cmp	r3, #37	; 0x25
 8005b22:	d154      	bne.n	8005bce <_vfiprintf_r+0xfa>
 8005b24:	ebb8 0a07 	subs.w	sl, r8, r7
 8005b28:	d00b      	beq.n	8005b42 <_vfiprintf_r+0x6e>
 8005b2a:	4653      	mov	r3, sl
 8005b2c:	463a      	mov	r2, r7
 8005b2e:	4621      	mov	r1, r4
 8005b30:	4630      	mov	r0, r6
 8005b32:	f7ff ffbc 	bl	8005aae <__sfputs_r>
 8005b36:	3001      	adds	r0, #1
 8005b38:	f000 80c2 	beq.w	8005cc0 <_vfiprintf_r+0x1ec>
 8005b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3e:	4453      	add	r3, sl
 8005b40:	9309      	str	r3, [sp, #36]	; 0x24
 8005b42:	f898 3000 	ldrb.w	r3, [r8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80ba 	beq.w	8005cc0 <_vfiprintf_r+0x1ec>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b56:	9304      	str	r3, [sp, #16]
 8005b58:	9307      	str	r3, [sp, #28]
 8005b5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b5e:	931a      	str	r3, [sp, #104]	; 0x68
 8005b60:	46a8      	mov	r8, r5
 8005b62:	2205      	movs	r2, #5
 8005b64:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005b68:	485e      	ldr	r0, [pc, #376]	; (8005ce4 <_vfiprintf_r+0x210>)
 8005b6a:	f7ff fbe1 	bl	8005330 <memchr>
 8005b6e:	9b04      	ldr	r3, [sp, #16]
 8005b70:	bb78      	cbnz	r0, 8005bd2 <_vfiprintf_r+0xfe>
 8005b72:	06d9      	lsls	r1, r3, #27
 8005b74:	bf44      	itt	mi
 8005b76:	2220      	movmi	r2, #32
 8005b78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b7c:	071a      	lsls	r2, r3, #28
 8005b7e:	bf44      	itt	mi
 8005b80:	222b      	movmi	r2, #43	; 0x2b
 8005b82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b86:	782a      	ldrb	r2, [r5, #0]
 8005b88:	2a2a      	cmp	r2, #42	; 0x2a
 8005b8a:	d02a      	beq.n	8005be2 <_vfiprintf_r+0x10e>
 8005b8c:	46a8      	mov	r8, r5
 8005b8e:	2000      	movs	r0, #0
 8005b90:	250a      	movs	r5, #10
 8005b92:	9a07      	ldr	r2, [sp, #28]
 8005b94:	4641      	mov	r1, r8
 8005b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b9a:	3b30      	subs	r3, #48	; 0x30
 8005b9c:	2b09      	cmp	r3, #9
 8005b9e:	d969      	bls.n	8005c74 <_vfiprintf_r+0x1a0>
 8005ba0:	b360      	cbz	r0, 8005bfc <_vfiprintf_r+0x128>
 8005ba2:	e024      	b.n	8005bee <_vfiprintf_r+0x11a>
 8005ba4:	4b50      	ldr	r3, [pc, #320]	; (8005ce8 <_vfiprintf_r+0x214>)
 8005ba6:	429c      	cmp	r4, r3
 8005ba8:	d101      	bne.n	8005bae <_vfiprintf_r+0xda>
 8005baa:	68b4      	ldr	r4, [r6, #8]
 8005bac:	e7a2      	b.n	8005af4 <_vfiprintf_r+0x20>
 8005bae:	4b4f      	ldr	r3, [pc, #316]	; (8005cec <_vfiprintf_r+0x218>)
 8005bb0:	429c      	cmp	r4, r3
 8005bb2:	bf08      	it	eq
 8005bb4:	68f4      	ldreq	r4, [r6, #12]
 8005bb6:	e79d      	b.n	8005af4 <_vfiprintf_r+0x20>
 8005bb8:	4621      	mov	r1, r4
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f7fe fb14 	bl	80041e8 <__swsetup_r>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d09d      	beq.n	8005b00 <_vfiprintf_r+0x2c>
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc8:	b01d      	add	sp, #116	; 0x74
 8005bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bce:	46a8      	mov	r8, r5
 8005bd0:	e7a2      	b.n	8005b18 <_vfiprintf_r+0x44>
 8005bd2:	4a44      	ldr	r2, [pc, #272]	; (8005ce4 <_vfiprintf_r+0x210>)
 8005bd4:	4645      	mov	r5, r8
 8005bd6:	1a80      	subs	r0, r0, r2
 8005bd8:	fa0b f000 	lsl.w	r0, fp, r0
 8005bdc:	4318      	orrs	r0, r3
 8005bde:	9004      	str	r0, [sp, #16]
 8005be0:	e7be      	b.n	8005b60 <_vfiprintf_r+0x8c>
 8005be2:	9a03      	ldr	r2, [sp, #12]
 8005be4:	1d11      	adds	r1, r2, #4
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	9103      	str	r1, [sp, #12]
 8005bea:	2a00      	cmp	r2, #0
 8005bec:	db01      	blt.n	8005bf2 <_vfiprintf_r+0x11e>
 8005bee:	9207      	str	r2, [sp, #28]
 8005bf0:	e004      	b.n	8005bfc <_vfiprintf_r+0x128>
 8005bf2:	4252      	negs	r2, r2
 8005bf4:	f043 0302 	orr.w	r3, r3, #2
 8005bf8:	9207      	str	r2, [sp, #28]
 8005bfa:	9304      	str	r3, [sp, #16]
 8005bfc:	f898 3000 	ldrb.w	r3, [r8]
 8005c00:	2b2e      	cmp	r3, #46	; 0x2e
 8005c02:	d10e      	bne.n	8005c22 <_vfiprintf_r+0x14e>
 8005c04:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005c08:	2b2a      	cmp	r3, #42	; 0x2a
 8005c0a:	d138      	bne.n	8005c7e <_vfiprintf_r+0x1aa>
 8005c0c:	9b03      	ldr	r3, [sp, #12]
 8005c0e:	f108 0802 	add.w	r8, r8, #2
 8005c12:	1d1a      	adds	r2, r3, #4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	9203      	str	r2, [sp, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	bfb8      	it	lt
 8005c1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c20:	9305      	str	r3, [sp, #20]
 8005c22:	4d33      	ldr	r5, [pc, #204]	; (8005cf0 <_vfiprintf_r+0x21c>)
 8005c24:	2203      	movs	r2, #3
 8005c26:	f898 1000 	ldrb.w	r1, [r8]
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f7ff fb80 	bl	8005330 <memchr>
 8005c30:	b140      	cbz	r0, 8005c44 <_vfiprintf_r+0x170>
 8005c32:	2340      	movs	r3, #64	; 0x40
 8005c34:	1b40      	subs	r0, r0, r5
 8005c36:	fa03 f000 	lsl.w	r0, r3, r0
 8005c3a:	9b04      	ldr	r3, [sp, #16]
 8005c3c:	f108 0801 	add.w	r8, r8, #1
 8005c40:	4303      	orrs	r3, r0
 8005c42:	9304      	str	r3, [sp, #16]
 8005c44:	f898 1000 	ldrb.w	r1, [r8]
 8005c48:	2206      	movs	r2, #6
 8005c4a:	482a      	ldr	r0, [pc, #168]	; (8005cf4 <_vfiprintf_r+0x220>)
 8005c4c:	f108 0701 	add.w	r7, r8, #1
 8005c50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c54:	f7ff fb6c 	bl	8005330 <memchr>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	d037      	beq.n	8005ccc <_vfiprintf_r+0x1f8>
 8005c5c:	4b26      	ldr	r3, [pc, #152]	; (8005cf8 <_vfiprintf_r+0x224>)
 8005c5e:	bb1b      	cbnz	r3, 8005ca8 <_vfiprintf_r+0x1d4>
 8005c60:	9b03      	ldr	r3, [sp, #12]
 8005c62:	3307      	adds	r3, #7
 8005c64:	f023 0307 	bic.w	r3, r3, #7
 8005c68:	3308      	adds	r3, #8
 8005c6a:	9303      	str	r3, [sp, #12]
 8005c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6e:	444b      	add	r3, r9
 8005c70:	9309      	str	r3, [sp, #36]	; 0x24
 8005c72:	e750      	b.n	8005b16 <_vfiprintf_r+0x42>
 8005c74:	fb05 3202 	mla	r2, r5, r2, r3
 8005c78:	2001      	movs	r0, #1
 8005c7a:	4688      	mov	r8, r1
 8005c7c:	e78a      	b.n	8005b94 <_vfiprintf_r+0xc0>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	250a      	movs	r5, #10
 8005c82:	4619      	mov	r1, r3
 8005c84:	f108 0801 	add.w	r8, r8, #1
 8005c88:	9305      	str	r3, [sp, #20]
 8005c8a:	4640      	mov	r0, r8
 8005c8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c90:	3a30      	subs	r2, #48	; 0x30
 8005c92:	2a09      	cmp	r2, #9
 8005c94:	d903      	bls.n	8005c9e <_vfiprintf_r+0x1ca>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0c3      	beq.n	8005c22 <_vfiprintf_r+0x14e>
 8005c9a:	9105      	str	r1, [sp, #20]
 8005c9c:	e7c1      	b.n	8005c22 <_vfiprintf_r+0x14e>
 8005c9e:	fb05 2101 	mla	r1, r5, r1, r2
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4680      	mov	r8, r0
 8005ca6:	e7f0      	b.n	8005c8a <_vfiprintf_r+0x1b6>
 8005ca8:	ab03      	add	r3, sp, #12
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	4622      	mov	r2, r4
 8005cae:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <_vfiprintf_r+0x228>)
 8005cb0:	a904      	add	r1, sp, #16
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f7fd fe0c 	bl	80038d0 <_printf_float>
 8005cb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005cbc:	4681      	mov	r9, r0
 8005cbe:	d1d5      	bne.n	8005c6c <_vfiprintf_r+0x198>
 8005cc0:	89a3      	ldrh	r3, [r4, #12]
 8005cc2:	065b      	lsls	r3, r3, #25
 8005cc4:	f53f af7e 	bmi.w	8005bc4 <_vfiprintf_r+0xf0>
 8005cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cca:	e77d      	b.n	8005bc8 <_vfiprintf_r+0xf4>
 8005ccc:	ab03      	add	r3, sp, #12
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	4622      	mov	r2, r4
 8005cd2:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <_vfiprintf_r+0x228>)
 8005cd4:	a904      	add	r1, sp, #16
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	f7fe f8a6 	bl	8003e28 <_printf_i>
 8005cdc:	e7ec      	b.n	8005cb8 <_vfiprintf_r+0x1e4>
 8005cde:	bf00      	nop
 8005ce0:	08006064 	.word	0x08006064
 8005ce4:	080061a4 	.word	0x080061a4
 8005ce8:	08006084 	.word	0x08006084
 8005cec:	08006044 	.word	0x08006044
 8005cf0:	080061aa 	.word	0x080061aa
 8005cf4:	080061ae 	.word	0x080061ae
 8005cf8:	080038d1 	.word	0x080038d1
 8005cfc:	08005aaf 	.word	0x08005aaf

08005d00 <_sbrk_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	2300      	movs	r3, #0
 8005d04:	4c05      	ldr	r4, [pc, #20]	; (8005d1c <_sbrk_r+0x1c>)
 8005d06:	4605      	mov	r5, r0
 8005d08:	4608      	mov	r0, r1
 8005d0a:	6023      	str	r3, [r4, #0]
 8005d0c:	f7fc fcdc 	bl	80026c8 <_sbrk>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d102      	bne.n	8005d1a <_sbrk_r+0x1a>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	b103      	cbz	r3, 8005d1a <_sbrk_r+0x1a>
 8005d18:	602b      	str	r3, [r5, #0]
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	200006e8 	.word	0x200006e8

08005d20 <__sread>:
 8005d20:	b510      	push	{r4, lr}
 8005d22:	460c      	mov	r4, r1
 8005d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d28:	f000 f8a8 	bl	8005e7c <_read_r>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	bfab      	itete	ge
 8005d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d32:	89a3      	ldrhlt	r3, [r4, #12]
 8005d34:	181b      	addge	r3, r3, r0
 8005d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d3a:	bfac      	ite	ge
 8005d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d3e:	81a3      	strhlt	r3, [r4, #12]
 8005d40:	bd10      	pop	{r4, pc}

08005d42 <__swrite>:
 8005d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d46:	461f      	mov	r7, r3
 8005d48:	898b      	ldrh	r3, [r1, #12]
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	05db      	lsls	r3, r3, #23
 8005d4e:	460c      	mov	r4, r1
 8005d50:	4616      	mov	r6, r2
 8005d52:	d505      	bpl.n	8005d60 <__swrite+0x1e>
 8005d54:	2302      	movs	r3, #2
 8005d56:	2200      	movs	r2, #0
 8005d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d5c:	f000 f868 	bl	8005e30 <_lseek_r>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	4632      	mov	r2, r6
 8005d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d68:	81a3      	strh	r3, [r4, #12]
 8005d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d6e:	463b      	mov	r3, r7
 8005d70:	4628      	mov	r0, r5
 8005d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d76:	f000 b817 	b.w	8005da8 <_write_r>

08005d7a <__sseek>:
 8005d7a:	b510      	push	{r4, lr}
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d82:	f000 f855 	bl	8005e30 <_lseek_r>
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	bf15      	itete	ne
 8005d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d96:	81a3      	strheq	r3, [r4, #12]
 8005d98:	bf18      	it	ne
 8005d9a:	81a3      	strhne	r3, [r4, #12]
 8005d9c:	bd10      	pop	{r4, pc}

08005d9e <__sclose>:
 8005d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da2:	f000 b813 	b.w	8005dcc <_close_r>
	...

08005da8 <_write_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4605      	mov	r5, r0
 8005dac:	4608      	mov	r0, r1
 8005dae:	4611      	mov	r1, r2
 8005db0:	2200      	movs	r2, #0
 8005db2:	4c05      	ldr	r4, [pc, #20]	; (8005dc8 <_write_r+0x20>)
 8005db4:	6022      	str	r2, [r4, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	f7fc fc39 	bl	800262e <_write>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_write_r+0x1e>
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_write_r+0x1e>
 8005dc4:	602b      	str	r3, [r5, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	200006e8 	.word	0x200006e8

08005dcc <_close_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	2300      	movs	r3, #0
 8005dd0:	4c05      	ldr	r4, [pc, #20]	; (8005de8 <_close_r+0x1c>)
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	6023      	str	r3, [r4, #0]
 8005dd8:	f7fc fc45 	bl	8002666 <_close>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_close_r+0x1a>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_close_r+0x1a>
 8005de4:	602b      	str	r3, [r5, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	200006e8 	.word	0x200006e8

08005dec <_fstat_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	2300      	movs	r3, #0
 8005df0:	4c06      	ldr	r4, [pc, #24]	; (8005e0c <_fstat_r+0x20>)
 8005df2:	4605      	mov	r5, r0
 8005df4:	4608      	mov	r0, r1
 8005df6:	4611      	mov	r1, r2
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	f7fc fc3f 	bl	800267c <_fstat>
 8005dfe:	1c43      	adds	r3, r0, #1
 8005e00:	d102      	bne.n	8005e08 <_fstat_r+0x1c>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	b103      	cbz	r3, 8005e08 <_fstat_r+0x1c>
 8005e06:	602b      	str	r3, [r5, #0]
 8005e08:	bd38      	pop	{r3, r4, r5, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200006e8 	.word	0x200006e8

08005e10 <_isatty_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	2300      	movs	r3, #0
 8005e14:	4c05      	ldr	r4, [pc, #20]	; (8005e2c <_isatty_r+0x1c>)
 8005e16:	4605      	mov	r5, r0
 8005e18:	4608      	mov	r0, r1
 8005e1a:	6023      	str	r3, [r4, #0]
 8005e1c:	f7fc fc3d 	bl	800269a <_isatty>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_isatty_r+0x1a>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_isatty_r+0x1a>
 8005e28:	602b      	str	r3, [r5, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	200006e8 	.word	0x200006e8

08005e30 <_lseek_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4605      	mov	r5, r0
 8005e34:	4608      	mov	r0, r1
 8005e36:	4611      	mov	r1, r2
 8005e38:	2200      	movs	r2, #0
 8005e3a:	4c05      	ldr	r4, [pc, #20]	; (8005e50 <_lseek_r+0x20>)
 8005e3c:	6022      	str	r2, [r4, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f7fc fc35 	bl	80026ae <_lseek>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d102      	bne.n	8005e4e <_lseek_r+0x1e>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	b103      	cbz	r3, 8005e4e <_lseek_r+0x1e>
 8005e4c:	602b      	str	r3, [r5, #0]
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	200006e8 	.word	0x200006e8

08005e54 <__ascii_mbtowc>:
 8005e54:	b082      	sub	sp, #8
 8005e56:	b901      	cbnz	r1, 8005e5a <__ascii_mbtowc+0x6>
 8005e58:	a901      	add	r1, sp, #4
 8005e5a:	b142      	cbz	r2, 8005e6e <__ascii_mbtowc+0x1a>
 8005e5c:	b14b      	cbz	r3, 8005e72 <__ascii_mbtowc+0x1e>
 8005e5e:	7813      	ldrb	r3, [r2, #0]
 8005e60:	600b      	str	r3, [r1, #0]
 8005e62:	7812      	ldrb	r2, [r2, #0]
 8005e64:	1c10      	adds	r0, r2, #0
 8005e66:	bf18      	it	ne
 8005e68:	2001      	movne	r0, #1
 8005e6a:	b002      	add	sp, #8
 8005e6c:	4770      	bx	lr
 8005e6e:	4610      	mov	r0, r2
 8005e70:	e7fb      	b.n	8005e6a <__ascii_mbtowc+0x16>
 8005e72:	f06f 0001 	mvn.w	r0, #1
 8005e76:	e7f8      	b.n	8005e6a <__ascii_mbtowc+0x16>

08005e78 <__malloc_lock>:
 8005e78:	4770      	bx	lr

08005e7a <__malloc_unlock>:
 8005e7a:	4770      	bx	lr

08005e7c <_read_r>:
 8005e7c:	b538      	push	{r3, r4, r5, lr}
 8005e7e:	4605      	mov	r5, r0
 8005e80:	4608      	mov	r0, r1
 8005e82:	4611      	mov	r1, r2
 8005e84:	2200      	movs	r2, #0
 8005e86:	4c05      	ldr	r4, [pc, #20]	; (8005e9c <_read_r+0x20>)
 8005e88:	6022      	str	r2, [r4, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f7fc fbb2 	bl	80025f4 <_read>
 8005e90:	1c43      	adds	r3, r0, #1
 8005e92:	d102      	bne.n	8005e9a <_read_r+0x1e>
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	b103      	cbz	r3, 8005e9a <_read_r+0x1e>
 8005e98:	602b      	str	r3, [r5, #0]
 8005e9a:	bd38      	pop	{r3, r4, r5, pc}
 8005e9c:	200006e8 	.word	0x200006e8

08005ea0 <__ascii_wctomb>:
 8005ea0:	b149      	cbz	r1, 8005eb6 <__ascii_wctomb+0x16>
 8005ea2:	2aff      	cmp	r2, #255	; 0xff
 8005ea4:	bf8b      	itete	hi
 8005ea6:	238a      	movhi	r3, #138	; 0x8a
 8005ea8:	700a      	strbls	r2, [r1, #0]
 8005eaa:	6003      	strhi	r3, [r0, #0]
 8005eac:	2001      	movls	r0, #1
 8005eae:	bf88      	it	hi
 8005eb0:	f04f 30ff 	movhi.w	r0, #4294967295
 8005eb4:	4770      	bx	lr
 8005eb6:	4608      	mov	r0, r1
 8005eb8:	4770      	bx	lr
	...

08005ebc <_init>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	bf00      	nop
 8005ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec2:	bc08      	pop	{r3}
 8005ec4:	469e      	mov	lr, r3
 8005ec6:	4770      	bx	lr

08005ec8 <_fini>:
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	bf00      	nop
 8005ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ece:	bc08      	pop	{r3}
 8005ed0:	469e      	mov	lr, r3
 8005ed2:	4770      	bx	lr
